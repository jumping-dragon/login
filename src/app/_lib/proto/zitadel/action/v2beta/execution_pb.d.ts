// @generated by protoc-gen-es v2.6.0 with parameter "json_types=true,import_extension=js"
// @generated from file zitadel/action/v2beta/execution.proto (package zitadel.action.v2beta, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv2";
import type { Message } from "@bufbuild/protobuf";
import type { Timestamp, TimestampJson } from "@bufbuild/protobuf/wkt";

/**
 * Describes the file zitadel/action/v2beta/execution.proto.
 */
export declare const file_zitadel_action_v2beta_execution: GenFile;

/**
 * @generated from message zitadel.action.v2beta.Execution
 */
export declare type Execution = Message<"zitadel.action.v2beta.Execution"> & {
  /**
   * @generated from field: zitadel.action.v2beta.Condition condition = 1;
   */
  condition?: Condition;

  /**
   * The timestamp of the execution creation.
   *
   * @generated from field: google.protobuf.Timestamp creation_date = 2;
   */
  creationDate?: Timestamp;

  /**
   * The timestamp of the last change to the execution.
   *
   * @generated from field: google.protobuf.Timestamp change_date = 3;
   */
  changeDate?: Timestamp;

  /**
   * Ordered list of targets called during the execution.
   *
   * @generated from field: repeated string targets = 4;
   */
  targets: string[];
};

/**
 * @generated from message zitadel.action.v2beta.Execution
 */
export declare type ExecutionJson = {
  /**
   * @generated from field: zitadel.action.v2beta.Condition condition = 1;
   */
  condition?: ConditionJson;

  /**
   * The timestamp of the execution creation.
   *
   * @generated from field: google.protobuf.Timestamp creation_date = 2;
   */
  creationDate?: TimestampJson;

  /**
   * The timestamp of the last change to the execution.
   *
   * @generated from field: google.protobuf.Timestamp change_date = 3;
   */
  changeDate?: TimestampJson;

  /**
   * Ordered list of targets called during the execution.
   *
   * @generated from field: repeated string targets = 4;
   */
  targets?: string[];
};

/**
 * Describes the message zitadel.action.v2beta.Execution.
 * Use `create(ExecutionSchema)` to create a new message.
 */
export declare const ExecutionSchema: GenMessage<Execution, {jsonType: ExecutionJson}>;

/**
 * @generated from message zitadel.action.v2beta.Condition
 */
export declare type Condition = Message<"zitadel.action.v2beta.Condition"> & {
  /**
   * Condition-types under which conditions the execution should happen, only one possible.
   *
   * @generated from oneof zitadel.action.v2beta.Condition.condition_type
   */
  conditionType: {
    /**
     * Condition-type to execute if a request on the defined API point happens.
     *
     * @generated from field: zitadel.action.v2beta.RequestExecution request = 1;
     */
    value: RequestExecution;
    case: "request";
  } | {
    /**
     * Condition-type to execute on response if a request on the defined API point happens.
     *
     * @generated from field: zitadel.action.v2beta.ResponseExecution response = 2;
     */
    value: ResponseExecution;
    case: "response";
  } | {
    /**
     * Condition-type to execute if function is used, replaces actions v1.
     *
     * @generated from field: zitadel.action.v2beta.FunctionExecution function = 3;
     */
    value: FunctionExecution;
    case: "function";
  } | {
    /**
     * Condition-type to execute if an event is created in the system.
     *
     * @generated from field: zitadel.action.v2beta.EventExecution event = 4;
     */
    value: EventExecution;
    case: "event";
  } | { case: undefined; value?: undefined };
};

/**
 * @generated from message zitadel.action.v2beta.Condition
 */
export declare type ConditionJson = {
  /**
   * Condition-type to execute if a request on the defined API point happens.
   *
   * @generated from field: zitadel.action.v2beta.RequestExecution request = 1;
   */
  request?: RequestExecutionJson;

  /**
   * Condition-type to execute on response if a request on the defined API point happens.
   *
   * @generated from field: zitadel.action.v2beta.ResponseExecution response = 2;
   */
  response?: ResponseExecutionJson;

  /**
   * Condition-type to execute if function is used, replaces actions v1.
   *
   * @generated from field: zitadel.action.v2beta.FunctionExecution function = 3;
   */
  function?: FunctionExecutionJson;

  /**
   * Condition-type to execute if an event is created in the system.
   *
   * @generated from field: zitadel.action.v2beta.EventExecution event = 4;
   */
  event?: EventExecutionJson;
};

/**
 * Describes the message zitadel.action.v2beta.Condition.
 * Use `create(ConditionSchema)` to create a new message.
 */
export declare const ConditionSchema: GenMessage<Condition, {jsonType: ConditionJson}>;

/**
 * @generated from message zitadel.action.v2beta.RequestExecution
 */
export declare type RequestExecution = Message<"zitadel.action.v2beta.RequestExecution"> & {
  /**
   * Condition for the request execution. Only one is possible.
   *
   * @generated from oneof zitadel.action.v2beta.RequestExecution.condition
   */
  condition: {
    /**
     * GRPC-method as condition.
     *
     * @generated from field: string method = 1;
     */
    value: string;
    case: "method";
  } | {
    /**
     * GRPC-service as condition.
     *
     * @generated from field: string service = 2;
     */
    value: string;
    case: "service";
  } | {
    /**
     * All calls to any available services and methods as condition.
     *
     * @generated from field: bool all = 3;
     */
    value: boolean;
    case: "all";
  } | { case: undefined; value?: undefined };
};

/**
 * @generated from message zitadel.action.v2beta.RequestExecution
 */
export declare type RequestExecutionJson = {
  /**
   * GRPC-method as condition.
   *
   * @generated from field: string method = 1;
   */
  method?: string;

  /**
   * GRPC-service as condition.
   *
   * @generated from field: string service = 2;
   */
  service?: string;

  /**
   * All calls to any available services and methods as condition.
   *
   * @generated from field: bool all = 3;
   */
  all?: boolean;
};

/**
 * Describes the message zitadel.action.v2beta.RequestExecution.
 * Use `create(RequestExecutionSchema)` to create a new message.
 */
export declare const RequestExecutionSchema: GenMessage<RequestExecution, {jsonType: RequestExecutionJson}>;

/**
 * @generated from message zitadel.action.v2beta.ResponseExecution
 */
export declare type ResponseExecution = Message<"zitadel.action.v2beta.ResponseExecution"> & {
  /**
   * Condition for the response execution. Only one is possible.
   *
   * @generated from oneof zitadel.action.v2beta.ResponseExecution.condition
   */
  condition: {
    /**
     * GRPC-method as condition.
     *
     * @generated from field: string method = 1;
     */
    value: string;
    case: "method";
  } | {
    /**
     * GRPC-service as condition.
     *
     * @generated from field: string service = 2;
     */
    value: string;
    case: "service";
  } | {
    /**
     * All calls to any available services and methods as condition.
     *
     * @generated from field: bool all = 3;
     */
    value: boolean;
    case: "all";
  } | { case: undefined; value?: undefined };
};

/**
 * @generated from message zitadel.action.v2beta.ResponseExecution
 */
export declare type ResponseExecutionJson = {
  /**
   * GRPC-method as condition.
   *
   * @generated from field: string method = 1;
   */
  method?: string;

  /**
   * GRPC-service as condition.
   *
   * @generated from field: string service = 2;
   */
  service?: string;

  /**
   * All calls to any available services and methods as condition.
   *
   * @generated from field: bool all = 3;
   */
  all?: boolean;
};

/**
 * Describes the message zitadel.action.v2beta.ResponseExecution.
 * Use `create(ResponseExecutionSchema)` to create a new message.
 */
export declare const ResponseExecutionSchema: GenMessage<ResponseExecution, {jsonType: ResponseExecutionJson}>;

/**
 * Executed on the specified function
 *
 * @generated from message zitadel.action.v2beta.FunctionExecution
 */
export declare type FunctionExecution = Message<"zitadel.action.v2beta.FunctionExecution"> & {
  /**
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Executed on the specified function
 *
 * @generated from message zitadel.action.v2beta.FunctionExecution
 */
export declare type FunctionExecutionJson = {
  /**
   * @generated from field: string name = 1;
   */
  name?: string;
};

/**
 * Describes the message zitadel.action.v2beta.FunctionExecution.
 * Use `create(FunctionExecutionSchema)` to create a new message.
 */
export declare const FunctionExecutionSchema: GenMessage<FunctionExecution, {jsonType: FunctionExecutionJson}>;

/**
 * @generated from message zitadel.action.v2beta.EventExecution
 */
export declare type EventExecution = Message<"zitadel.action.v2beta.EventExecution"> & {
  /**
   * Condition for the event execution. Only one is possible.
   *
   * @generated from oneof zitadel.action.v2beta.EventExecution.condition
   */
  condition: {
    /**
     * Event name as condition.
     *
     * @generated from field: string event = 1;
     */
    value: string;
    case: "event";
  } | {
    /**
     * Event group as condition, all events under this group.
     *
     * @generated from field: string group = 2;
     */
    value: string;
    case: "group";
  } | {
    /**
     * all events as condition.
     *
     * @generated from field: bool all = 3;
     */
    value: boolean;
    case: "all";
  } | { case: undefined; value?: undefined };
};

/**
 * @generated from message zitadel.action.v2beta.EventExecution
 */
export declare type EventExecutionJson = {
  /**
   * Event name as condition.
   *
   * @generated from field: string event = 1;
   */
  event?: string;

  /**
   * Event group as condition, all events under this group.
   *
   * @generated from field: string group = 2;
   */
  group?: string;

  /**
   * all events as condition.
   *
   * @generated from field: bool all = 3;
   */
  all?: boolean;
};

/**
 * Describes the message zitadel.action.v2beta.EventExecution.
 * Use `create(EventExecutionSchema)` to create a new message.
 */
export declare const EventExecutionSchema: GenMessage<EventExecution, {jsonType: EventExecutionJson}>;

