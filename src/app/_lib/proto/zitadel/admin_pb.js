// @generated by protoc-gen-es v2.6.0 with parameter "json_types=true,import_extension=js"
// @generated from file zitadel/admin.proto (package zitadel.admin.v1, syntax proto3)
/* eslint-disable */

import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv2";
import { file_zitadel_idp } from "./idp_pb.js";
import { file_zitadel_instance } from "./instance_pb.js";
import { file_zitadel_user } from "./user_pb.js";
import { file_zitadel_object } from "./object_pb.js";
import { file_zitadel_options } from "./options_pb.js";
import { file_zitadel_org } from "./org_pb.js";
import { file_zitadel_policy } from "./policy_pb.js";
import { file_zitadel_settings } from "./settings_pb.js";
import { file_zitadel_text } from "./text_pb.js";
import { file_zitadel_member } from "./member_pb.js";
import { file_zitadel_event } from "./event_pb.js";
import { file_zitadel_management } from "./management_pb.js";
import { file_zitadel_v1 } from "./v1_pb.js";
import { file_zitadel_message } from "./message_pb.js";
import { file_zitadel_milestone_v1_milestone } from "./milestone/v1/milestone_pb.js";
import { file_google_api_annotations } from "../google/api/annotations_pb.js";
import { file_google_api_field_behavior } from "../google/api/field_behavior_pb.js";
import { file_google_protobuf_duration, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import { file_protoc_gen_openapiv2_options_annotations } from "../protoc-gen-openapiv2/options/annotations_pb.js";
import { file_validate_validate } from "../validate/validate_pb.js";

/**
 * Describes the file zitadel/admin.proto.
 */
export const file_zitadel_admin = /*@__PURE__*/
  fileDesc("ChN6aXRhZGVsL2FkbWluLnByb3RvEhB6aXRhZGVsLmFkbWluLnYxIhAKDkhlYWx0aHpSZXF1ZXN0IhEKD0hlYWx0aHpSZXNwb25zZSIeChxHZXRTdXBwb3J0ZWRMYW5ndWFnZXNSZXF1ZXN0IksKHUdldFN1cHBvcnRlZExhbmd1YWdlc1Jlc3BvbnNlEioKCWxhbmd1YWdlcxgBIAMoCUIXkkEUShJbImVuIiwgImRlIiwgIml0Il0iHAoaR2V0QWxsb3dlZExhbmd1YWdlc1JlcXVlc3QiSQobR2V0QWxsb3dlZExhbmd1YWdlc1Jlc3BvbnNlEioKCWxhbmd1YWdlcxgBIAMoCUIXkkEUShJbImVuIiwgImRlIiwgIml0Il0iSgoZU2V0RGVmYXVsdExhbmd1YWdlUmVxdWVzdBItCghsYW5ndWFnZRgBIAEoCUIbkkELSgQiZW4ieAqAAQHiQQEC+kIGcgQQARgKIkgKGlNldERlZmF1bHRMYW5ndWFnZVJlc3BvbnNlEioKB2RldGFpbHMYASABKAsyGS56aXRhZGVsLnYxLk9iamVjdERldGFpbHMiGwoZR2V0RGVmYXVsdExhbmd1YWdlUmVxdWVzdCI5ChpHZXREZWZhdWx0TGFuZ3VhZ2VSZXNwb25zZRIbCghsYW5ndWFnZRgBIAEoCUIJkkEGSgQiZW4iIjIKFFNldERlZmF1bHRPcmdSZXF1ZXN0EhoKBm9yZ19pZBgBIAEoCUIK+kIHcgUQARjIASJDChVTZXREZWZhdWx0T3JnUmVzcG9uc2USKgoHZGV0YWlscxgBIAEoCzIZLnppdGFkZWwudjEuT2JqZWN0RGV0YWlscyIWChRHZXREZWZhdWx0T3JnUmVxdWVzdCI5ChVHZXREZWZhdWx0T3JnUmVzcG9uc2USIAoDb3JnGAEgASgLMhMueml0YWRlbC5vcmcudjEuT3JnIhYKFEdldE15SW5zdGFuY2VSZXF1ZXN0Ik4KFUdldE15SW5zdGFuY2VSZXNwb25zZRI1CghpbnN0YW5jZRgBIAEoCzIjLnppdGFkZWwuaW5zdGFuY2UudjEuSW5zdGFuY2VEZXRhaWwiuQEKGkxpc3RJbnN0YW5jZURvbWFpbnNSZXF1ZXN0EiQKBXF1ZXJ5GAEgASgLMhUueml0YWRlbC52MS5MaXN0UXVlcnkSPAoOc29ydGluZ19jb2x1bW4YAiABKA4yJC56aXRhZGVsLmluc3RhbmNlLnYxLkRvbWFpbkZpZWxkTmFtZRI3CgdxdWVyaWVzGAMgAygLMiYueml0YWRlbC5pbnN0YW5jZS52MS5Eb21haW5TZWFyY2hRdWVyeSKyAQobTGlzdEluc3RhbmNlRG9tYWluc1Jlc3BvbnNlEigKB2RldGFpbHMYASABKAsyFy56aXRhZGVsLnYxLkxpc3REZXRhaWxzEjwKDnNvcnRpbmdfY29sdW1uGAIgASgOMiQueml0YWRlbC5pbnN0YW5jZS52MS5Eb21haW5GaWVsZE5hbWUSKwoGcmVzdWx0GAMgAygLMhsueml0YWRlbC5pbnN0YW5jZS52MS5Eb21haW4ixwEKIUxpc3RJbnN0YW5jZVRydXN0ZWREb21haW5zUmVxdWVzdBIkCgVxdWVyeRgBIAEoCzIVLnppdGFkZWwudjEuTGlzdFF1ZXJ5EjwKDnNvcnRpbmdfY29sdW1uGAIgASgOMiQueml0YWRlbC5pbnN0YW5jZS52MS5Eb21haW5GaWVsZE5hbWUSPgoHcXVlcmllcxgDIAMoCzItLnppdGFkZWwuaW5zdGFuY2UudjEuVHJ1c3RlZERvbWFpblNlYXJjaFF1ZXJ5IsABCiJMaXN0SW5zdGFuY2VUcnVzdGVkRG9tYWluc1Jlc3BvbnNlEigKB2RldGFpbHMYASABKAsyFy56aXRhZGVsLnYxLkxpc3REZXRhaWxzEjwKDnNvcnRpbmdfY29sdW1uGAIgASgOMiQueml0YWRlbC5pbnN0YW5jZS52MS5Eb21haW5GaWVsZE5hbWUSMgoGcmVzdWx0GAMgAygLMiIueml0YWRlbC5pbnN0YW5jZS52MS5UcnVzdGVkRG9tYWluIl8KH0FkZEluc3RhbmNlVHJ1c3RlZERvbWFpblJlcXVlc3QSPAoGZG9tYWluGAEgASgJQiySQRtKEyJsb2dpbi5leGFtcGxlLmNvbSJ4/QGAAQHiQQEC+kIHcgUQARj9ASJOCiBBZGRJbnN0YW5jZVRydXN0ZWREb21haW5SZXNwb25zZRIqCgdkZXRhaWxzGAEgASgLMhkueml0YWRlbC52MS5PYmplY3REZXRhaWxzImIKIlJlbW92ZUluc3RhbmNlVHJ1c3RlZERvbWFpblJlcXVlc3QSPAoGZG9tYWluGAEgASgJQiySQRtKEyJsb2dpbi5leGFtcGxlLmNvbSJ4/QGAAQHiQQEC+kIHcgUQARj9ASJRCiNSZW1vdmVJbnN0YW5jZVRydXN0ZWREb21haW5SZXNwb25zZRIqCgdkZXRhaWxzGAEgASgLMhkueml0YWRlbC52MS5PYmplY3REZXRhaWxzIn8KG0xpc3RTZWNyZXRHZW5lcmF0b3JzUmVxdWVzdBIkCgVxdWVyeRgBIAEoCzIVLnppdGFkZWwudjEuTGlzdFF1ZXJ5EjoKB3F1ZXJpZXMYAiADKAsyKS56aXRhZGVsLnNldHRpbmdzLnYxLlNlY3JldEdlbmVyYXRvclF1ZXJ5In4KHExpc3RTZWNyZXRHZW5lcmF0b3JzUmVzcG9uc2USKAoHZGV0YWlscxgBIAEoCzIXLnppdGFkZWwudjEuTGlzdERldGFpbHMSNAoGcmVzdWx0GAMgAygLMiQueml0YWRlbC5zZXR0aW5ncy52MS5TZWNyZXRHZW5lcmF0b3IiaQoZR2V0U2VjcmV0R2VuZXJhdG9yUmVxdWVzdBJMCg5nZW5lcmF0b3JfdHlwZRgBIAEoDjIoLnppdGFkZWwuc2V0dGluZ3MudjEuU2VjcmV0R2VuZXJhdG9yVHlwZUIK+kIHggEEEAEgACJcChpHZXRTZWNyZXRHZW5lcmF0b3JSZXNwb25zZRI+ChBzZWNyZXRfZ2VuZXJhdG9yGAEgASgLMiQueml0YWRlbC5zZXR0aW5ncy52MS5TZWNyZXRHZW5lcmF0b3IirAIKHFVwZGF0ZVNlY3JldEdlbmVyYXRvclJlcXVlc3QSTAoOZ2VuZXJhdG9yX3R5cGUYASABKA4yKC56aXRhZGVsLnNldHRpbmdzLnYxLlNlY3JldEdlbmVyYXRvclR5cGVCCvpCB4IBBBABIAASFgoGbGVuZ3RoGAIgASgNQgaSQQNKATYSNwoGZXhwaXJ5GAMgASgLMhkuZ29vZ2xlLnByb3RvYnVmLkR1cmF0aW9uQgySQQlKByIzNjAwcyISHQoVaW5jbHVkZV9sb3dlcl9sZXR0ZXJzGAQgASgIEh0KFWluY2x1ZGVfdXBwZXJfbGV0dGVycxgFIAEoCBIWCg5pbmNsdWRlX2RpZ2l0cxgGIAEoCBIXCg9pbmNsdWRlX3N5bWJvbHMYByABKAgiSwodVXBkYXRlU2VjcmV0R2VuZXJhdG9yUmVzcG9uc2USKgoHZGV0YWlscxgBIAEoCzIZLnppdGFkZWwudjEuT2JqZWN0RGV0YWlscyIWChRHZXRTTVRQQ29uZmlnUmVxdWVzdCJNChVHZXRTTVRQQ29uZmlnUmVzcG9uc2USNAoLc210cF9jb25maWcYASABKAsyHy56aXRhZGVsLnNldHRpbmdzLnYxLlNNVFBDb25maWciMQoYR2V0U01UUENvbmZpZ0J5SWRSZXF1ZXN0EhUKAmlkGAEgASgJQgn6QgZyBBABGGQiUQoZR2V0U01UUENvbmZpZ0J5SWRSZXNwb25zZRI0CgtzbXRwX2NvbmZpZxgBIAEoCzIfLnppdGFkZWwuc2V0dGluZ3MudjEuU01UUENvbmZpZyI+ChZMaXN0U01UUENvbmZpZ3NSZXF1ZXN0EiQKBXF1ZXJ5GAEgASgLMhUueml0YWRlbC52MS5MaXN0UXVlcnkidAoXTGlzdFNNVFBDb25maWdzUmVzcG9uc2USKAoHZGV0YWlscxgBIAEoCzIXLnppdGFkZWwudjEuTGlzdERldGFpbHMSLwoGcmVzdWx0GAIgAygLMh8ueml0YWRlbC5zZXR0aW5ncy52MS5TTVRQQ29uZmlnIvoDChRBZGRTTVRQQ29uZmlnUmVxdWVzdBJKCg5zZW5kZXJfYWRkcmVzcxgBIAEoCUIykkEhShkibm9yZXBseUBtLnppdGFkZWwuY2xvdWQieMgBgAEB4kEBAvpCB3IFEAEYyAESNwoLc2VuZGVyX25hbWUYAiABKAlCIpJBEUoJIlpJVEFERUwieMgBgAEB4kEBAvpCB3IFEAEYyAESCwoDdGxzGAMgASgIEmEKBGhvc3QYBCABKAlCU5JBQjIeTWFrZSBzdXJlIHRvIGluY2x1ZGUgdGhlIHBvcnQuShoic210cC5wb3N0bWFya2FwcC5jb206NTg3Inj0A4ABAeJBAQL6QgdyBRABGPQDEjkKBHVzZXIYBSABKAlCK5JBKEomIjE5N2YwMTE3LTUyOWUtNDQzZC1iZjZjLTAyOTJkZDlhMDJiNyISLAoIcGFzc3dvcmQYBiABKAlCGpJBF0oVInRoaXMtaXMtbXktcGFzc3dvcmQiEkUKEHJlcGx5X3RvX2FkZHJlc3MYByABKAlCK5JBHkoZInJlcGx5dG9AbS56aXRhZGVsLmNsb3VkInjIAfpCB3IFEAAYyAESPQoLZGVzY3JpcHRpb24YCCABKAlCKJJBG0oWInByb3ZpZGVyIGRlc2NyaXB0aW9uInjIAfpCB3IFEAAYyAEiTwoVQWRkU01UUENvbmZpZ1Jlc3BvbnNlEioKB2RldGFpbHMYASABKAsyGS56aXRhZGVsLnYxLk9iamVjdERldGFpbHMSCgoCaWQYAiABKAkimgQKF1VwZGF0ZVNNVFBDb25maWdSZXF1ZXN0EkoKDnNlbmRlcl9hZGRyZXNzGAEgASgJQjKSQSFKGSJub3JlcGx5QG0ueml0YWRlbC5jbG91ZCJ4yAGAAQHiQQEC+kIHcgUQARjIARI3CgtzZW5kZXJfbmFtZRgCIAEoCUIikkERSgkiWklUQURFTCJ4yAGAAQHiQQEC+kIHcgUQARjIARILCgN0bHMYAyABKAgSYQoEaG9zdBgEIAEoCUJTkkFCMh5NYWtlIHN1cmUgdG8gaW5jbHVkZSB0aGUgcG9ydC5KGiJzbXRwLnBvc3RtYXJrYXBwLmNvbTo1ODciePQDgAEB4kEBAvpCB3IFEAEY9AMSOQoEdXNlchgFIAEoCUIrkkEoSiYiMTk3ZjAxMTctNTI5ZS00NDNkLWJmNmMtMDI5MmRkOWEwMmI3IhJIChByZXBseV90b19hZGRyZXNzGAYgASgJQi6SQSFKGSJyZXBseXRvQG0ueml0YWRlbC5jbG91ZCJ4yAGAAQH6QgdyBRAAGMgBEiwKCHBhc3N3b3JkGAcgASgJQhqSQRdKFSJ0aGlzLWlzLW15LXBhc3N3b3JkIhJACgtkZXNjcmlwdGlvbhgIIAEoCUIrkkEeShYicHJvdmlkZXIgZGVzY3JpcHRpb24ieMgBgAEB+kIHcgUQABjIARIVCgJpZBgJIAEoCUIJ+kIGcgQQARhkIkYKGFVwZGF0ZVNNVFBDb25maWdSZXNwb25zZRIqCgdkZXRhaWxzGAEgASgLMhkueml0YWRlbC52MS5PYmplY3REZXRhaWxzIm4KH1VwZGF0ZVNNVFBDb25maWdQYXNzd29yZFJlcXVlc3QSNAoIcGFzc3dvcmQYASABKAlCIpJBH0odInRoaXMtaXMtbXktdXBkYXRlZC1wYXNzd29yZCISFQoCaWQYAiABKAlCCfpCBnIEEAEYZCJOCiBVcGRhdGVTTVRQQ29uZmlnUGFzc3dvcmRSZXNwb25zZRIqCgdkZXRhaWxzGAEgASgLMhkueml0YWRlbC52MS5PYmplY3REZXRhaWxzIjMKGUFjdGl2YXRlU01UUENvbmZpZ1JlcXVlc3QSFgoCaWQYASABKAlCCvpCB3IFEAEYyAEiSAoaQWN0aXZhdGVTTVRQQ29uZmlnUmVzcG9uc2USKgoHZGV0YWlscxgBIAEoCzIZLnppdGFkZWwudjEuT2JqZWN0RGV0YWlscyI1ChtEZWFjdGl2YXRlU01UUENvbmZpZ1JlcXVlc3QSFgoCaWQYASABKAlCCvpCB3IFEAEYyAEiSgocRGVhY3RpdmF0ZVNNVFBDb25maWdSZXNwb25zZRIqCgdkZXRhaWxzGAEgASgLMhkueml0YWRlbC52MS5PYmplY3REZXRhaWxzIjAKF1JlbW92ZVNNVFBDb25maWdSZXF1ZXN0EhUKAmlkGAEgASgJQgn6QgZyBBABGGQiRgoYUmVtb3ZlU01UUENvbmZpZ1Jlc3BvbnNlEioKB2RldGFpbHMYASABKAsyGS56aXRhZGVsLnYxLk9iamVjdERldGFpbHMiggEKGVRlc3RTTVRQQ29uZmlnQnlJZFJlcXVlc3QSFQoCaWQYASABKAlCCfpCBnIEEAEYZBJOChByZWNlaXZlcl9hZGRyZXNzGAIgASgJQjSSQSFKGSJub3JlcGx5QG0ueml0YWRlbC5jbG91ZCJ4yAGAAQHiQQEC+kIJcgcQARjIAWABIhwKGlRlc3RTTVRQQ29uZmlnQnlJZFJlc3BvbnNlItcEChVUZXN0U01UUENvbmZpZ1JlcXVlc3QSSgoOc2VuZGVyX2FkZHJlc3MYASABKAlCMpJBIUoZIm5vcmVwbHlAbS56aXRhZGVsLmNsb3VkInjIAYABAeJBAQL6QgdyBRABGMgBEjcKC3NlbmRlcl9uYW1lGAIgASgJQiKSQRFKCSJaSVRBREVMInjIAYABAeJBAQL6QgdyBRABGMgBEgsKA3RscxgDIAEoCBJhCgRob3N0GAQgASgJQlOSQUIyHk1ha2Ugc3VyZSB0byBpbmNsdWRlIHRoZSBwb3J0LkoaInNtdHAucG9zdG1hcmthcHAuY29tOjU4NyJ49AOAAQHiQQEC+kIHcgUQARj0AxI5CgR1c2VyGAUgASgJQiuSQShKJiIxOTdmMDExNy01MjllLTQ0M2QtYmY2Yy0wMjkyZGQ5YTAyYjciEiwKCHBhc3N3b3JkGAYgASgJQhqSQRdKFSJ0aGlzLWlzLW15LXBhc3N3b3JkIhJOChByZWNlaXZlcl9hZGRyZXNzGAcgASgJQjSSQSFKGSJub3JlcGx5QG0ueml0YWRlbC5jbG91ZCJ4yAGAAQHiQQEC+kIJcgcQARjIAWABEo8BCgJpZBgIIAEoCUKCAZJBfzJnWml0YWRlbCBTTVRQIHByb3ZpZGVyIGlkIGluIGNhc2UgeW91IGFyZSBub3Qgc2VuZGluZyB0aGUgcGFzc3dvcmQgYW5kIHdhbnQgdG8gcmV1c2UgdGhlIHN0b3JlZCBwYXNzd29yZEoUIjI2NzE5MTM2OTUxNTEzOTQ2NCIiGAoWVGVzdFNNVFBDb25maWdSZXNwb25zZSIZChdHZXRFbWFpbFByb3ZpZGVyUmVxdWVzdCJOChhHZXRFbWFpbFByb3ZpZGVyUmVzcG9uc2USMgoGY29uZmlnGAEgASgLMiIueml0YWRlbC5zZXR0aW5ncy52MS5FbWFpbFByb3ZpZGVyIjQKG0dldEVtYWlsUHJvdmlkZXJCeUlkUmVxdWVzdBIVCgJpZBgBIAEoCUIJ+kIGcgQQARhkIlIKHEdldEVtYWlsUHJvdmlkZXJCeUlkUmVzcG9uc2USMgoGY29uZmlnGAEgASgLMiIueml0YWRlbC5zZXR0aW5ncy52MS5FbWFpbFByb3ZpZGVyIkEKGUxpc3RFbWFpbFByb3ZpZGVyc1JlcXVlc3QSJAoFcXVlcnkYASABKAsyFS56aXRhZGVsLnYxLkxpc3RRdWVyeSJ6ChpMaXN0RW1haWxQcm92aWRlcnNSZXNwb25zZRIoCgdkZXRhaWxzGAEgASgLMhcueml0YWRlbC52MS5MaXN0RGV0YWlscxIyCgZyZXN1bHQYAiADKAsyIi56aXRhZGVsLnNldHRpbmdzLnYxLkVtYWlsUHJvdmlkZXIigQQKG0FkZEVtYWlsUHJvdmlkZXJTTVRQUmVxdWVzdBJKCg5zZW5kZXJfYWRkcmVzcxgBIAEoCUIykkEhShkibm9yZXBseUBtLnppdGFkZWwuY2xvdWQieMgBgAEB4kEBAvpCB3IFEAEYyAESNwoLc2VuZGVyX25hbWUYAiABKAlCIpJBEUoJIlpJVEFERUwieMgBgAEB4kEBAvpCB3IFEAEYyAESCwoDdGxzGAMgASgIEmEKBGhvc3QYBCABKAlCU5JBQjIeTWFrZSBzdXJlIHRvIGluY2x1ZGUgdGhlIHBvcnQuShoic210cC5wb3N0bWFya2FwcC5jb206NTg3Inj0A4ABAeJBAQL6QgdyBRABGPQDEjkKBHVzZXIYBSABKAlCK5JBKEomIjE5N2YwMTE3LTUyOWUtNDQzZC1iZjZjLTAyOTJkZDlhMDJiNyISLAoIcGFzc3dvcmQYBiABKAlCGpJBF0oVInRoaXMtaXMtbXktcGFzc3dvcmQiEkUKEHJlcGx5X3RvX2FkZHJlc3MYByABKAlCK5JBHkoZInJlcGx5dG9AbS56aXRhZGVsLmNsb3VkInjIAfpCB3IFEAAYyAESPQoLZGVzY3JpcHRpb24YCCABKAlCKJJBG0oWInByb3ZpZGVyIGRlc2NyaXB0aW9uInjIAfpCB3IFEAAYyAEiVgocQWRkRW1haWxQcm92aWRlclNNVFBSZXNwb25zZRIqCgdkZXRhaWxzGAEgASgLMhkueml0YWRlbC52MS5PYmplY3REZXRhaWxzEgoKAmlkGAIgASgJIpsECh5VcGRhdGVFbWFpbFByb3ZpZGVyU01UUFJlcXVlc3QSSgoOc2VuZGVyX2FkZHJlc3MYASABKAlCMpJBIUoZIm5vcmVwbHlAbS56aXRhZGVsLmNsb3VkInjIAYABAeJBAQL6QgdyBRABGMgBEjcKC3NlbmRlcl9uYW1lGAIgASgJQiKSQRFKCSJaSVRBREVMInjIAYABAeJBAQL6QgdyBRABGMgBEgsKA3RscxgDIAEoCBJhCgRob3N0GAQgASgJQlOSQUIyHk1ha2Ugc3VyZSB0byBpbmNsdWRlIHRoZSBwb3J0LkoaInNtdHAucG9zdG1hcmthcHAuY29tOjU4NyJ49AOAAQHiQQEC+kIHcgUQARj0AxI5CgR1c2VyGAUgASgJQiuSQShKJiIxOTdmMDExNy01MjllLTQ0M2QtYmY2Yy0wMjkyZGQ5YTAyYjciEkUKEHJlcGx5X3RvX2FkZHJlc3MYBiABKAlCK5JBHkoZInJlcGx5dG9AbS56aXRhZGVsLmNsb3VkInjIAfpCB3IFEAAYyAESLAoIcGFzc3dvcmQYByABKAlCGpJBF0oVInRoaXMtaXMtbXktcGFzc3dvcmQiEj0KC2Rlc2NyaXB0aW9uGAggASgJQiiSQRtKFiJwcm92aWRlciBkZXNjcmlwdGlvbiJ4yAH6QgdyBRAAGMgBEhUKAmlkGAkgASgJQgn6QgZyBBABGGQiTQofVXBkYXRlRW1haWxQcm92aWRlclNNVFBSZXNwb25zZRIqCgdkZXRhaWxzGAEgASgLMhkueml0YWRlbC52MS5PYmplY3REZXRhaWxzInUKJlVwZGF0ZUVtYWlsUHJvdmlkZXJTTVRQUGFzc3dvcmRSZXF1ZXN0EjQKCHBhc3N3b3JkGAEgASgJQiKSQR9KHSJ0aGlzLWlzLW15LXVwZGF0ZWQtcGFzc3dvcmQiEhUKAmlkGAIgASgJQgn6QgZyBBABGGQiVQonVXBkYXRlRW1haWxQcm92aWRlclNNVFBQYXNzd29yZFJlc3BvbnNlEioKB2RldGFpbHMYASABKAsyGS56aXRhZGVsLnYxLk9iamVjdERldGFpbHMirAEKG0FkZEVtYWlsUHJvdmlkZXJIVFRQUmVxdWVzdBJOCghlbmRwb2ludBgBIAEoCUI8kkErSiMiaHR0cDovL3JlbGF5LmV4YW1wbGUuY29tL3Byb3ZpZGVyIniAEIABAeJBAQL6QgdyBRABGIAQEj0KC2Rlc2NyaXB0aW9uGAIgASgJQiiSQRtKFiJwcm92aWRlciBkZXNjcmlwdGlvbiJ4yAH6QgdyBRAAGMgBIlYKHEFkZEVtYWlsUHJvdmlkZXJIVFRQUmVzcG9uc2USKgoHZGV0YWlscxgBIAEoCzIZLnppdGFkZWwudjEuT2JqZWN0RGV0YWlscxIKCgJpZBgCIAEoCSLGAQoeVXBkYXRlRW1haWxQcm92aWRlckhUVFBSZXF1ZXN0EhUKAmlkGAEgASgJQgn6QgZyBBABGGQSTgoIZW5kcG9pbnQYAiABKAlCPJJBK0ojImh0dHA6Ly9yZWxheS5leGFtcGxlLmNvbS9wcm92aWRlciJ4gBCAAQHiQQEC+kIHcgUQARiAEBI9CgtkZXNjcmlwdGlvbhgDIAEoCUIokkEbShYicHJvdmlkZXIgZGVzY3JpcHRpb24ieMgB+kIHcgUQABjIASJNCh9VcGRhdGVFbWFpbFByb3ZpZGVySFRUUFJlc3BvbnNlEioKB2RldGFpbHMYASABKAsyGS56aXRhZGVsLnYxLk9iamVjdERldGFpbHMiNgocQWN0aXZhdGVFbWFpbFByb3ZpZGVyUmVxdWVzdBIWCgJpZBgBIAEoCUIK+kIHcgUQARjIASJLCh1BY3RpdmF0ZUVtYWlsUHJvdmlkZXJSZXNwb25zZRIqCgdkZXRhaWxzGAEgASgLMhkueml0YWRlbC52MS5PYmplY3REZXRhaWxzIjgKHkRlYWN0aXZhdGVFbWFpbFByb3ZpZGVyUmVxdWVzdBIWCgJpZBgBIAEoCUIK+kIHcgUQARjIASJNCh9EZWFjdGl2YXRlRW1haWxQcm92aWRlclJlc3BvbnNlEioKB2RldGFpbHMYASABKAsyGS56aXRhZGVsLnYxLk9iamVjdERldGFpbHMiMwoaUmVtb3ZlRW1haWxQcm92aWRlclJlcXVlc3QSFQoCaWQYASABKAlCCfpCBnIEEAEYZCJJChtSZW1vdmVFbWFpbFByb3ZpZGVyUmVzcG9uc2USKgoHZGV0YWlscxgBIAEoCzIZLnppdGFkZWwudjEuT2JqZWN0RGV0YWlscyKJAQogVGVzdEVtYWlsUHJvdmlkZXJTTVRQQnlJZFJlcXVlc3QSFQoCaWQYASABKAlCCfpCBnIEEAEYZBJOChByZWNlaXZlcl9hZGRyZXNzGAIgASgJQjSSQSFKGSJub3JlcGx5QG0ueml0YWRlbC5jbG91ZCJ4yAGAAQHiQQEC+kIJcgcQARjIAWABIiMKIVRlc3RFbWFpbFByb3ZpZGVyU01UUEJ5SWRSZXNwb25zZSLeBAocVGVzdEVtYWlsUHJvdmlkZXJTTVRQUmVxdWVzdBJKCg5zZW5kZXJfYWRkcmVzcxgBIAEoCUIykkEhShkibm9yZXBseUBtLnppdGFkZWwuY2xvdWQieMgBgAEB4kEBAvpCB3IFEAEYyAESNwoLc2VuZGVyX25hbWUYAiABKAlCIpJBEUoJIlpJVEFERUwieMgBgAEB4kEBAvpCB3IFEAEYyAESCwoDdGxzGAMgASgIEmEKBGhvc3QYBCABKAlCU5JBQjIeTWFrZSBzdXJlIHRvIGluY2x1ZGUgdGhlIHBvcnQuShoic210cC5wb3N0bWFya2FwcC5jb206NTg3Inj0A4ABAeJBAQL6QgdyBRABGPQDEjkKBHVzZXIYBSABKAlCK5JBKEomIjE5N2YwMTE3LTUyOWUtNDQzZC1iZjZjLTAyOTJkZDlhMDJiNyISLAoIcGFzc3dvcmQYBiABKAlCGpJBF0oVInRoaXMtaXMtbXktcGFzc3dvcmQiEk4KEHJlY2VpdmVyX2FkZHJlc3MYByABKAlCNJJBIUoZIm5vcmVwbHlAbS56aXRhZGVsLmNsb3VkInjIAYABAeJBAQL6QglyBxABGMgBYAESjwEKAmlkGAggASgJQoIBkkF/MmdaaXRhZGVsIFNNVFAgcHJvdmlkZXIgaWQgaW4gY2FzZSB5b3UgYXJlIG5vdCBzZW5kaW5nIHRoZSBwYXNzd29yZCBhbmQgd2FudCB0byByZXVzZSB0aGUgc3RvcmVkIHBhc3N3b3JkShQiMjY3MTkxMzY5NTE1MTM5NDY0IiIfCh1UZXN0RW1haWxQcm92aWRlclNNVFBSZXNwb25zZSI/ChdMaXN0U01TUHJvdmlkZXJzUmVxdWVzdBIkCgVxdWVyeRgBIAEoCzIVLnppdGFkZWwudjEuTGlzdFF1ZXJ5InYKGExpc3RTTVNQcm92aWRlcnNSZXNwb25zZRIoCgdkZXRhaWxzGAEgASgLMhcueml0YWRlbC52MS5MaXN0RGV0YWlscxIwCgZyZXN1bHQYAyADKAsyIC56aXRhZGVsLnNldHRpbmdzLnYxLlNNU1Byb3ZpZGVyIi4KFUdldFNNU1Byb3ZpZGVyUmVxdWVzdBIVCgJpZBgBIAEoCUIJ+kIGcgQQARhkIkoKFkdldFNNU1Byb3ZpZGVyUmVzcG9uc2USMAoGY29uZmlnGAEgASgLMiAueml0YWRlbC5zZXR0aW5ncy52MS5TTVNQcm92aWRlciLzAgobQWRkU01TUHJvdmlkZXJUd2lsaW9SZXF1ZXN0EkoKA3NpZBgBIAEoCUI9kkEsSiQiQUIxMjNiOWU2MWQyMzhhYmFlN2QzYmU3YjY1ZWNiYzk4NyJ4yAGAAQHiQQEC+kIHcgUQARjIARImCgV0b2tlbhgCIAEoCUIXkkEGeMgBgAEB4kEBAvpCB3IFEAEYyAESTQoNc2VuZGVyX251bWJlchgDIAEoCUI2kkEpSiQiQUIxMjNiOWU2MWQyMzhhYmFlN2QzYmU3YjY1ZWNiYzk4NyJ4yAH6QgdyBRAAGMgBEj0KC2Rlc2NyaXB0aW9uGAQgASgJQiiSQRtKFiJwcm92aWRlciBkZXNjcmlwdGlvbiJ4yAH6QgdyBRAAGMgBElIKEnZlcmlmeV9zZXJ2aWNlX3NpZBgFIAEoCUI2kkEpSiQiQUIxMjNiOWU2MWQyMzhhYmFlN2QzYmU3YjY1ZWNiYzk4NyJ4yAH6QgdyBRAAGMgBIlYKHEFkZFNNU1Byb3ZpZGVyVHdpbGlvUmVzcG9uc2USKgoHZGV0YWlscxgBIAEoCzIZLnppdGFkZWwudjEuT2JqZWN0RGV0YWlscxIKCgJpZBgCIAEoCSLpAgoeVXBkYXRlU01TUHJvdmlkZXJUd2lsaW9SZXF1ZXN0EhYKAmlkGAEgASgJQgr6QgdyBRABGMgBEkoKA3NpZBgCIAEoCUI9kkEsSiQiQUIxMjNiOWU2MWQyMzhhYmFlN2QzYmU3YjY1ZWNiYzk4NyJ4yAGAAQHiQQEC+kIHcgUQARjIARJQCg1zZW5kZXJfbnVtYmVyGAMgASgJQjmSQSxKJCJBQjEyM2I5ZTYxZDIzOGFiYWU3ZDNiZTdiNjVlY2JjOTg3InjIAYABAfpCB3IFEAAYyAESPQoLZGVzY3JpcHRpb24YBCABKAlCKJJBG0oWInByb3ZpZGVyIGRlc2NyaXB0aW9uInjIAfpCB3IFEAAYyAESUgoSdmVyaWZ5X3NlcnZpY2Vfc2lkGAUgASgJQjaSQSlKJCJBQjEyM2I5ZTYxZDIzOGFiYWU3ZDNiZTdiNjVlY2JjOTg3InjIAfpCB3IFEAAYyAEiTQofVXBkYXRlU01TUHJvdmlkZXJUd2lsaW9SZXNwb25zZRIqCgdkZXRhaWxzGAEgASgLMhkueml0YWRlbC52MS5PYmplY3REZXRhaWxzIlgKI1VwZGF0ZVNNU1Byb3ZpZGVyVHdpbGlvVG9rZW5SZXF1ZXN0EhYKAmlkGAEgASgJQgr6QgdyBRABGMgBEhkKBXRva2VuGAIgASgJQgr6QgdyBRABGMgBIlIKJFVwZGF0ZVNNU1Byb3ZpZGVyVHdpbGlvVG9rZW5SZXNwb25zZRIqCgdkZXRhaWxzGAEgASgLMhkueml0YWRlbC52MS5PYmplY3REZXRhaWxzIqoBChlBZGRTTVNQcm92aWRlckhUVFBSZXF1ZXN0Ek4KCGVuZHBvaW50GAEgASgJQjySQStKIyJodHRwOi8vcmVsYXkuZXhhbXBsZS5jb20vcHJvdmlkZXIieIAQgAEB4kEBAvpCB3IFEAEYgBASPQoLZGVzY3JpcHRpb24YAiABKAlCKJJBG0oWInByb3ZpZGVyIGRlc2NyaXB0aW9uInjIAfpCB3IFEAAYyAEiVAoaQWRkU01TUHJvdmlkZXJIVFRQUmVzcG9uc2USKgoHZGV0YWlscxgBIAEoCzIZLnppdGFkZWwudjEuT2JqZWN0RGV0YWlscxIKCgJpZBgCIAEoCSLFAQocVXBkYXRlU01TUHJvdmlkZXJIVFRQUmVxdWVzdBIWCgJpZBgBIAEoCUIK+kIHcgUQARjIARJOCghlbmRwb2ludBgCIAEoCUI8kkErSiMiaHR0cDovL3JlbGF5LmV4YW1wbGUuY29tL3Byb3ZpZGVyIniAEIABAeJBAQL6QgdyBRABGIAQEj0KC2Rlc2NyaXB0aW9uGAMgASgJQiiSQRtKFiJwcm92aWRlciBkZXNjcmlwdGlvbiJ4yAH6QgdyBRAAGMgBIksKHVVwZGF0ZVNNU1Byb3ZpZGVySFRUUFJlc3BvbnNlEioKB2RldGFpbHMYASABKAsyGS56aXRhZGVsLnYxLk9iamVjdERldGFpbHMiNAoaQWN0aXZhdGVTTVNQcm92aWRlclJlcXVlc3QSFgoCaWQYASABKAlCCvpCB3IFEAEYyAEiSQobQWN0aXZhdGVTTVNQcm92aWRlclJlc3BvbnNlEioKB2RldGFpbHMYASABKAsyGS56aXRhZGVsLnYxLk9iamVjdERldGFpbHMiNgocRGVhY3RpdmF0ZVNNU1Byb3ZpZGVyUmVxdWVzdBIWCgJpZBgBIAEoCUIK+kIHcgUQARjIASJLCh1EZWFjdGl2YXRlU01TUHJvdmlkZXJSZXNwb25zZRIqCgdkZXRhaWxzGAEgASgLMhkueml0YWRlbC52MS5PYmplY3REZXRhaWxzIjIKGFJlbW92ZVNNU1Byb3ZpZGVyUmVxdWVzdBIWCgJpZBgBIAEoCUIK+kIHcgUQARjIASJHChlSZW1vdmVTTVNQcm92aWRlclJlc3BvbnNlEioKB2RldGFpbHMYASABKAsyGS56aXRhZGVsLnYxLk9iamVjdERldGFpbHMiKgooR2V0RmlsZVN5c3RlbU5vdGlmaWNhdGlvblByb3ZpZGVyUmVxdWVzdCJtCilHZXRGaWxlU3lzdGVtTm90aWZpY2F0aW9uUHJvdmlkZXJSZXNwb25zZRJACghwcm92aWRlchgBIAEoCzIuLnppdGFkZWwuc2V0dGluZ3MudjEuRGVidWdOb3RpZmljYXRpb25Qcm92aWRlciIjCiFHZXRMb2dOb3RpZmljYXRpb25Qcm92aWRlclJlcXVlc3QiZgoiR2V0TG9nTm90aWZpY2F0aW9uUHJvdmlkZXJSZXNwb25zZRJACghwcm92aWRlchgBIAEoCzIuLnppdGFkZWwuc2V0dGluZ3MudjEuRGVidWdOb3RpZmljYXRpb25Qcm92aWRlciIYChZHZXRPSURDU2V0dGluZ3NSZXF1ZXN0Ik4KF0dldE9JRENTZXR0aW5nc1Jlc3BvbnNlEjMKCHNldHRpbmdzGAEgASgLMiEueml0YWRlbC5zZXR0aW5ncy52MS5PSURDU2V0dGluZ3MihwIKFkFkZE9JRENTZXR0aW5nc1JlcXVlc3QSOAoVYWNjZXNzX3Rva2VuX2xpZmV0aW1lGAEgASgLMhkuZ29vZ2xlLnByb3RvYnVmLkR1cmF0aW9uEjQKEWlkX3Rva2VuX2xpZmV0aW1lGAIgASgLMhkuZ29vZ2xlLnByb3RvYnVmLkR1cmF0aW9uEkAKHXJlZnJlc2hfdG9rZW5faWRsZV9leHBpcmF0aW9uGAMgASgLMhkuZ29vZ2xlLnByb3RvYnVmLkR1cmF0aW9uEjsKGHJlZnJlc2hfdG9rZW5fZXhwaXJhdGlvbhgEIAEoCzIZLmdvb2dsZS5wcm90b2J1Zi5EdXJhdGlvbiJFChdBZGRPSURDU2V0dGluZ3NSZXNwb25zZRIqCgdkZXRhaWxzGAEgASgLMhkueml0YWRlbC52MS5PYmplY3REZXRhaWxzIooCChlVcGRhdGVPSURDU2V0dGluZ3NSZXF1ZXN0EjgKFWFjY2Vzc190b2tlbl9saWZldGltZRgBIAEoCzIZLmdvb2dsZS5wcm90b2J1Zi5EdXJhdGlvbhI0ChFpZF90b2tlbl9saWZldGltZRgCIAEoCzIZLmdvb2dsZS5wcm90b2J1Zi5EdXJhdGlvbhJACh1yZWZyZXNoX3Rva2VuX2lkbGVfZXhwaXJhdGlvbhgDIAEoCzIZLmdvb2dsZS5wcm90b2J1Zi5EdXJhdGlvbhI7ChhyZWZyZXNoX3Rva2VuX2V4cGlyYXRpb24YBCABKAsyGS5nb29nbGUucHJvdG9idWYuRHVyYXRpb24iSAoaVXBkYXRlT0lEQ1NldHRpbmdzUmVzcG9uc2USKgoHZGV0YWlscxgBIAEoCzIZLnppdGFkZWwudjEuT2JqZWN0RGV0YWlscyIaChhHZXRTZWN1cml0eVBvbGljeVJlcXVlc3QiUAoZR2V0U2VjdXJpdHlQb2xpY3lSZXNwb25zZRIzCgZwb2xpY3kYASABKAsyIy56aXRhZGVsLnNldHRpbmdzLnYxLlNlY3VyaXR5UG9saWN5InIKGFNldFNlY3VyaXR5UG9saWN5UmVxdWVzdBIfChdlbmFibGVfaWZyYW1lX2VtYmVkZGluZxgBIAEoCBIXCg9hbGxvd2VkX29yaWdpbnMYAiADKAkSHAoUZW5hYmxlX2ltcGVyc29uYXRpb24YAyABKAgiRwoZU2V0U2VjdXJpdHlQb2xpY3lSZXNwb25zZRIqCgdkZXRhaWxzGAEgASgLMhkueml0YWRlbC52MS5PYmplY3REZXRhaWxzIqsBChJJc09yZ1VuaXF1ZVJlcXVlc3QSJwoEbmFtZRgBIAEoCUIZkkEOSgkiWklUQURFTCJ4yAH6QgVyAxjIARIvCgZkb21haW4YAiABKAlCH5JBFEoPInppdGFkZWwuY2xvdWQieMgB+kIFcgMYyAE6O5JBOAo2MiRBbGwgdW5pcXVlIGZpZWxkcyBvZiBhbiBvcmdhbml6YXRpb27SAQRuYW1l0gEGZG9tYWluIigKE0lzT3JnVW5pcXVlUmVzcG9uc2USEQoJaXNfdW5pcXVlGAEgASgIIkkKEUdldE9yZ0J5SURSZXF1ZXN0EjQKAmlkGAEgASgJQiiSQRtKEyI2OTYyOTAyMzkwNjQ4ODMzNCJ4yAGAAQH6QgdyBRABGMgBIjYKEkdldE9yZ0J5SURSZXNwb25zZRIgCgNvcmcYASABKAsyEy56aXRhZGVsLm9yZy52MS5PcmcivwEKD0xpc3RPcmdzUmVxdWVzdBIkCgVxdWVyeRgBIAEoCzIVLnppdGFkZWwudjEuTGlzdFF1ZXJ5EjQKDnNvcnRpbmdfY29sdW1uGAIgASgOMhwueml0YWRlbC5vcmcudjEuT3JnRmllbGROYW1lEikKB3F1ZXJpZXMYAyADKAsyGC56aXRhZGVsLm9yZy52MS5PcmdRdWVyeTolkkEiCiAyFlNlYXJjaCBxdWVyeSBmb3IgbGlzdHPSAQVxdWVyeSKXAQoQTGlzdE9yZ3NSZXNwb25zZRIoCgdkZXRhaWxzGAEgASgLMhcueml0YWRlbC52MS5MaXN0RGV0YWlscxI0Cg5zb3J0aW5nX2NvbHVtbhgCIAEoDjIcLnppdGFkZWwub3JnLnYxLk9yZ0ZpZWxkTmFtZRIjCgZyZXN1bHQYAyADKAsyEy56aXRhZGVsLm9yZy52MS5Pcmci0Q0KD1NldFVwT3JnUmVxdWVzdBI8CgNvcmcYASABKAsyJS56aXRhZGVsLmFkbWluLnYxLlNldFVwT3JnUmVxdWVzdC5PcmdCCPpCBYoBAhABEjgKBWh1bWFuGAIgASgLMicueml0YWRlbC5hZG1pbi52MS5TZXRVcE9yZ1JlcXVlc3QuSHVtYW5IABINCgVyb2xlcxgDIAMoCRrXAQoDT3JnEiwKBG5hbWUYASABKAlCHpJBEUoJIlpJVEFERUwieMgBgAEB+kIHcgUQARjIARKTAQoGZG9tYWluGAIgASgJQoIBkkF3MmFaSVRBREVMIGdlbmVyYXRlcyBhIGRvbWFpbiAoPG9yZy1uYW1lPi56aXRhZGVsLmNoKSBmb3IgYW4gb3JnYW5pemF0aW9uLCB0aGUgZmllbGQgaXMgbm90IHJlcXVpcmVkSg8ieml0YWRlbC5jbG91ZCJ4yAH6QgVyAxjIAToMkkEJCgfSAQRuYW1lGoYKCgVIdW1hbhI2Cgl1c2VyX25hbWUYASABKAlCI5JBFkoOImdpZ2ktZ2lyYWZmZSJ4yAGAAQH6QgdyBRABGMgBEkoKB3Byb2ZpbGUYAiABKAsyLy56aXRhZGVsLmFkbWluLnYxLlNldFVwT3JnUmVxdWVzdC5IdW1hbi5Qcm9maWxlQgj6QgWKAQIQARJGCgVlbWFpbBgDIAEoCzItLnppdGFkZWwuYWRtaW4udjEuU2V0VXBPcmdSZXF1ZXN0Lkh1bWFuLkVtYWlsQgj6QgWKAQIQARI8CgVwaG9uZRgEIAEoCzItLnppdGFkZWwuYWRtaW4udjEuU2V0VXBPcmdSZXF1ZXN0Lkh1bWFuLlBob25lEk0KCHBhc3N3b3JkGAUgASgJQjuSQTgyIHRoZSBpbml0aWFsIHBhc3N3b3JkIG9mIHRoZSB1c2VyShQibXlfNTNjcjN0LVA0JCR3MHJkIhrkAwoHUHJvZmlsZRIvCgpmaXJzdF9uYW1lGAEgASgJQhuSQQ5KBiJHaWdpInjIAYABAfpCB3IFEAEYyAESMQoJbGFzdF9uYW1lGAIgASgJQh6SQRFKCSJHaXJhZmZlInjIAYABAfpCB3IFEAEYyAESMQoJbmlja19uYW1lGAMgASgJQh6SQRNKDiJnaWdpLWdpcmFmZmUieMgB+kIFcgMYyAESjwEKDGRpc3BsYXlfbmFtZRgEIAEoCUJ5kkFuMllhIHVzZXIgY2FuIHNldCB0aGUgZGlzcGxheSBuYW1lIGlmIG5vdGhpbmcgaXMgc2V0IFpJVEFERUwgY29tcHV0ZXMgImZpcnN0X25hbWUgbGFzdF9uYW1lIkoOIkdpZ2kgR2lyYWZmZSJ4yAH6QgVyAxjIARJnChJwcmVmZXJyZWRfbGFuZ3VhZ2UYBSABKAlCS5JBQTI3bGFuZ3VhZ2UgdGFnIGFuYWxvZyBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMzA2NkoEImVuIngK+kIEcgIYChInCgZnZW5kZXIYBiABKA4yFy56aXRhZGVsLnVzZXIudjEuR2VuZGVyOh6SQRsKGdIBCmZpcnN0X25hbWXSAQlsYXN0X25hbWUaugEKBUVtYWlsEoYBCgVlbWFpbBgBIAEoCUJ3kkFtMlRlbWFpbCBhZGRyZXNzIG9mIHRoZSB1c2VyLiAoc3BlYzogaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzI4MjIjc2VjdGlvbi0zLjQuMSlKEiJnaWdpQHppdGFkZWwuY29tIoABAfpCBHICYAESGQoRaXNfZW1haWxfdmVyaWZpZWQYAiABKAg6DZJBCgoI0gEFZW1haWwazwEKBVBob25lEpsBCgVwaG9uZRgBIAEoCUKLAZJBfDJhbW9iaWxlIHBob25lIG51bWJlciBvZiB0aGUgdXNlci4gKHVzZSBnbG9iYWwgcGF0dGVybiBvZiBzcGVjIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMzOTY2KUoSIis0MSA3MSAwMDAgMDAgMDAieDKAAQH6QglyBxABGDI6ASsSGQoRaXNfcGhvbmVfdmVyaWZpZWQYAiABKAg6DZJBCgoI0gEFcGhvbmU6LpJBKwop0gEJdXNlcl9uYW1l0gEHcHJvZmlsZdIBBWVtYWls0gEIcGFzc3dvcmQ6R5JBRApCMjNSZXF1ZXN0IHRvIHNldCB1cCBhbiBvcmdhbml6YXRpb24uIFVzZXIgaXMgcmVxdWlyZWTSAQNvcmfSAQR1c2VyQgsKBHVzZXISA/hCASJfChBTZXRVcE9yZ1Jlc3BvbnNlEioKB2RldGFpbHMYASABKAsyGS56aXRhZGVsLnYxLk9iamVjdERldGFpbHMSDgoGb3JnX2lkGAIgASgJEg8KB3VzZXJfaWQYAyABKAkiXAoQUmVtb3ZlT3JnUmVxdWVzdBI4CgZvcmdfaWQYASABKAlCKJJBG0oTIjY5NjI5MDIzOTA2NDg4MzM0InjIAYABAfpCB3IFEAEYyAE6DpJBCwoJ0gEGb3JnX2lkIj8KEVJlbW92ZU9yZ1Jlc3BvbnNlEioKB2RldGFpbHMYASABKAsyGS56aXRhZGVsLnYxLk9iamVjdERldGFpbHMiSQoRR2V0SURQQnlJRFJlcXVlc3QSNAoCaWQYASABKAlCKJJBG0oTIjY5MjM0MjMwMTkzODcyOTU1InjIAYABAfpCB3IFEAEYyAEiNgoSR2V0SURQQnlJRFJlc3BvbnNlEiAKA2lkcBgBIAEoCzITLnppdGFkZWwuaWRwLnYxLklEUCKaAQoPTGlzdElEUHNSZXF1ZXN0EiQKBXF1ZXJ5GAEgASgLMhUueml0YWRlbC52MS5MaXN0UXVlcnkSNAoOc29ydGluZ19jb2x1bW4YAiABKA4yHC56aXRhZGVsLmlkcC52MS5JRFBGaWVsZE5hbWUSKwoHcXVlcmllcxgDIAMoCzIaLnppdGFkZWwuYWRtaW4udjEuSURQUXVlcnkifwoISURQUXVlcnkSMgoMaWRwX2lkX3F1ZXJ5GAEgASgLMhoueml0YWRlbC5pZHAudjEuSURQSURRdWVyeUgAEjYKDmlkcF9uYW1lX3F1ZXJ5GAIgASgLMhwueml0YWRlbC5pZHAudjEuSURQTmFtZVF1ZXJ5SABCBwoFcXVlcnkilwEKEExpc3RJRFBzUmVzcG9uc2USKAoHZGV0YWlscxgBIAEoCzIXLnppdGFkZWwudjEuTGlzdERldGFpbHMSNAoOc29ydGluZ19jb2x1bW4YAiABKA4yHC56aXRhZGVsLmlkcC52MS5JRFBGaWVsZE5hbWUSIwoGcmVzdWx0GAMgAygLMhMueml0YWRlbC5pZHAudjEuSURQIs8HChFBZGRPSURDSURQUmVxdWVzdBIrCgRuYW1lGAEgASgJQh2SQRBKCCJnb29nbGUieMgBgAEB+kIHcgUQARjIARKLAQoMc3R5bGluZ190eXBlGAIgASgOMh4ueml0YWRlbC5pZHAudjEuSURQU3R5bGluZ1R5cGVCVZJBSjJIc29tZSBpZGVudGl0eSBwcm92aWRlcnMgc3BlY2lmeSB0aGUgc3R5bGluZyBvZiB0aGUgYnV0dG9uIHRvIHRoZWlyIGxvZ2lu+kIFggECEAESVAoJY2xpZW50X2lkGAMgASgJQkGSQTQyLGNsaWVudCBpZCBnZW5lcmF0ZWQgYnkgdGhlIGlkZW50aXR5IHByb3ZpZGVyeMgBgAEB+kIHcgUQARjIARJcCg1jbGllbnRfc2VjcmV0GAQgASgJQkWSQTgyMGNsaWVudCBzZWNyZXQgZ2VuZXJhdGVkIGJ5IHRoZSBpZGVudGl0eSBwcm92aWRlcnjIAYABAfpCB3IFEAEYyAESaQoGaXNzdWVyGAUgASgJQlmSQUwyKHRoZSBvaWRjIGlzc3VlciBvZiB0aGUgaWRlbnRpdHkgcHJvdmlkZXJKHSJodHRwczovL2FjY291bnRzLmdvb2dsZS5jb20ieMgB+kIHcgUQARjIARKAAQoGc2NvcGVzGAYgAygJQnCSQW0yS3RoZSBzY29wZXMgcmVxdWVzdGVkIGJ5IFpJVEFERUwgZHVyaW5nIHRoZSByZXF1ZXN0IG9uIHRoZSBpZGVudGl0eSBwcm92aWRlckoeWyJvcGVuaWQiLCAicHJvZmlsZSIsICJlbWFpbCJdEo0BChRkaXNwbGF5X25hbWVfbWFwcGluZxgHIAEoDjIgLnppdGFkZWwuaWRwLnYxLk9JRENNYXBwaW5nRmllbGRCTZJBQjJAZGVmaW5pdGlvbiB3aGljaCBmaWVsZCBpcyBtYXBwZWQgdG8gdGhlIGRpc3BsYXkgbmFtZSBvZiB0aGUgdXNlcvpCBYIBAhABEoIBChB1c2VybmFtZV9tYXBwaW5nGAggASgOMiAueml0YWRlbC5pZHAudjEuT0lEQ01hcHBpbmdGaWVsZEJGkkE7MjlkZWZpbml0aW9uIHdoaWNoIGZpZWxkIGlzIG1hcHBlZCB0byB0aGUgZW1haWwgb2YgdGhlIHVzZXL6QgWCAQIQARIVCg1hdXRvX3JlZ2lzdGVyGAkgASgIOjGSQS4KLNIBBG5hbWXSAQljbGllbnRfaWTSAQ1jbGllbnRfc2VjcmV00gEGaXNzdWVyImoKEkFkZE9JRENJRFBSZXNwb25zZRIqCgdkZXRhaWxzGAEgASgLMhkueml0YWRlbC52MS5PYmplY3REZXRhaWxzEigKBmlkcF9pZBgCIAEoCUIYkkEVShMiNTM4MjkwMjY4MDY0ODk0NTUiIpsGChBBZGRKV1RJRFBSZXF1ZXN0Ei8KBG5hbWUYASABKAlCIZJBEEoIImdvb2dsZSJ4yAGAAQHiQQEC+kIHcgUQARjIARKLAQoMc3R5bGluZ190eXBlGAIgASgOMh4ueml0YWRlbC5pZHAudjEuSURQU3R5bGluZ1R5cGVCVZJBSjJIc29tZSBpZGVudGl0eSBwcm92aWRlcnMgc3BlY2lmeSB0aGUgc3R5bGluZyBvZiB0aGUgYnV0dG9uIHRvIHRoZWlyIGxvZ2lu+kIFggECEAESeQoMand0X2VuZHBvaW50GAMgASgJQmOSQVIyK3RoZSBlbmRwb2ludCB3aGVyZSB0aGUgand0IGNhbiBiZSBleHRyYWN0ZWRKHSJodHRwczovL2N1c3RvbS5jb20vYXV0aC9qd3QieMgBgAEB4kEBAvpCB3IFEAEYyAESbgoGaXNzdWVyGAQgASgJQl6SQU0yJnRoZSBpc3N1ZXIgb2YgdGhlIGp3dCAoZm9yIHZhbGlkYXRpb24pSh0iaHR0cHM6Ly9hY2NvdW50cy5jdXN0b20uY29tInjIAYABAeJBAQL6QgdyBRABGMgBEpQBCg1rZXlzX2VuZHBvaW50GAUgASgJQn2SQWwyQHRoZSBlbmRwb2ludCB0byB0aGUga2V5IChKV0spIHdoaWNoIGlzIHVzZWQgdG8gc2lnbiB0aGUgSldUIHdpdGhKIiJodHRwczovL2FjY291bnRzLmN1c3RvbS5jb20va2V5cyJ4yAGAAQHiQQEC+kIHcgUQARjIARKHAQoLaGVhZGVyX25hbWUYBiABKAlCcpJBYTJJdGhlIG5hbWUgb2YgdGhlIGhlYWRlciB3aGVyZSB0aGUgSldUIGlzIHNlbnQgaW4sIGRlZmF1bHQgaXMgYXV0aG9yaXphdGlvbkoOIngtYXV0aC10b2tlbiJ4yAGAAQHiQQEC+kIHcgUQARjIARIVCg1hdXRvX3JlZ2lzdGVyGAcgASgIOiWSQSIKINIBBG5hbWXSAQZpc3N1ZXLSAQ1rZXlzX2VuZHBvaW50ImkKEUFkZEpXVElEUFJlc3BvbnNlEioKB2RldGFpbHMYASABKAsyGS56aXRhZGVsLnYxLk9iamVjdERldGFpbHMSKAoGaWRwX2lkGAIgASgJQhiSQRVKEyI2OTIzNDIzMDE5Mzg3Mjk1NSIisQIKEFVwZGF0ZUlEUFJlcXVlc3QSGgoGaWRwX2lkGAEgASgJQgr6QgdyBRABGMgBEisKBG5hbWUYAiABKAlCHZJBEEoIImdvb2dsZSJ4yAGAAQH6QgdyBRABGMgBEosBCgxzdHlsaW5nX3R5cGUYAyABKA4yHi56aXRhZGVsLmlkcC52MS5JRFBTdHlsaW5nVHlwZUJVkkFKMkhzb21lIGlkZW50aXR5IHByb3ZpZGVycyBzcGVjaWZ5IHRoZSBzdHlsaW5nIG9mIHRoZSBidXR0b24gdG8gdGhlaXIgbG9naW76QgWCAQIQARIVCg1hdXRvX3JlZ2lzdGVyGAQgASgIOi+SQSwKKjIYVXBkYXRlcyBmaWVsZHMgb2YgYW4gSURQ0gEGaWRwX2lk0gEEbmFtZSI/ChFVcGRhdGVJRFBSZXNwb25zZRIqCgdkZXRhaWxzGAEgASgLMhkueml0YWRlbC52MS5PYmplY3REZXRhaWxzImAKFERlYWN0aXZhdGVJRFBSZXF1ZXN0EjgKBmlkcF9pZBgBIAEoCUIokkEbShMiNjk2MjkwMjM5MDY0ODgzMzQieMgBgAEB+kIHcgUQARjIAToOkkELCgnSAQZpZHBfaWQiQwoVRGVhY3RpdmF0ZUlEUFJlc3BvbnNlEioKB2RldGFpbHMYASABKAsyGS56aXRhZGVsLnYxLk9iamVjdERldGFpbHMiYAoUUmVhY3RpdmF0ZUlEUFJlcXVlc3QSOAoGaWRwX2lkGAEgASgJQiiSQRtKEyI2OTYyOTAyMzkwNjQ4ODMzNCJ4yAGAAQH6QgdyBRABGMgBOg6SQQsKCdIBBmlkcF9pZCJDChVSZWFjdGl2YXRlSURQUmVzcG9uc2USKgoHZGV0YWlscxgBIAEoCzIZLnppdGFkZWwudjEuT2JqZWN0RGV0YWlscyJcChBSZW1vdmVJRFBSZXF1ZXN0EjgKBmlkcF9pZBgBIAEoCUIokkEbShMiNjk2MjkwMjM5MDY0ODgzMzQieMgBgAEB+kIHcgUQARjIAToOkkELCgnSAQZpZHBfaWQiPwoRUmVtb3ZlSURQUmVzcG9uc2USKgoHZGV0YWlscxgBIAEoCzIZLnppdGFkZWwudjEuT2JqZWN0RGV0YWlscyLYBgoaVXBkYXRlSURQT0lEQ0NvbmZpZ1JlcXVlc3QSOAoGaWRwX2lkGAEgASgJQiiSQRtKEyI2OTYyOTAyMzkwNjQ4ODMzNCJ4yAGAAQH6QgdyBRABGMgBEmwKBmlzc3VlchgCIAEoCUJckkFPMih0aGUgb2lkYyBpc3N1ZXIgb2YgdGhlIGlkZW50aXR5IHByb3ZpZGVySh0iaHR0cHM6Ly9hY2NvdW50cy5nb29nbGUuY29tInjIAYABAfpCB3IFEAEYyAESVAoJY2xpZW50X2lkGAMgASgJQkGSQTQyLGNsaWVudCBpZCBnZW5lcmF0ZWQgYnkgdGhlIGlkZW50aXR5IHByb3ZpZGVyeMgBgAEB+kIHcgUQARjIARJ/Cg1jbGllbnRfc2VjcmV0GAQgASgJQmiSQV0yWGNsaWVudCBzZWNyZXQgZ2VuZXJhdGVkIGJ5IHRoZSBpZGVudGl0eSBwcm92aWRlci4gSWYgZW1wdHkgdGhlIHNlY3JldCBpcyBub3Qgb3ZlcndyaXR0ZW54yAH6QgVyAxjIARKAAQoGc2NvcGVzGAUgAygJQnCSQW0yS3RoZSBzY29wZXMgcmVxdWVzdGVkIGJ5IFpJVEFERUwgZHVyaW5nIHRoZSByZXF1ZXN0IG9uIHRoZSBpZGVudGl0eSBwcm92aWRlckoeWyJvcGVuaWQiLCAicHJvZmlsZSIsICJlbWFpbCJdEo0BChRkaXNwbGF5X25hbWVfbWFwcGluZxgGIAEoDjIgLnppdGFkZWwuaWRwLnYxLk9JRENNYXBwaW5nRmllbGRCTZJBQjJAZGVmaW5pdGlvbiB3aGljaCBmaWVsZCBpcyBtYXBwZWQgdG8gdGhlIGRpc3BsYXkgbmFtZSBvZiB0aGUgdXNlcvpCBYIBAhABEoIBChB1c2VybmFtZV9tYXBwaW5nGAcgASgOMiAueml0YWRlbC5pZHAudjEuT0lEQ01hcHBpbmdGaWVsZEJGkkE7MjlkZWZpbml0aW9uIHdoaWNoIGZpZWxkIGlzIG1hcHBlZCB0byB0aGUgZW1haWwgb2YgdGhlIHVzZXL6QgWCAQIQATojkkEgCh7SAQZpZHBfaWTSAQZpc3N1ZXLSAQljbGllbnRfaWQiSQobVXBkYXRlSURQT0lEQ0NvbmZpZ1Jlc3BvbnNlEioKB2RldGFpbHMYASABKAsyGS56aXRhZGVsLnYxLk9iamVjdERldGFpbHMilAUKGVVwZGF0ZUlEUEpXVENvbmZpZ1JlcXVlc3QSOAoGaWRwX2lkGAEgASgJQiiSQRtKEyI2OTYyOTAyMzkwNjQ4ODMzNCJ4yAGAAQH6QgdyBRABGMgBEnUKDGp3dF9lbmRwb2ludBgCIAEoCUJfkkFSMit0aGUgZW5kcG9pbnQgd2hlcmUgdGhlIGp3dCBjYW4gYmUgZXh0cmFjdGVkSh0iaHR0cHM6Ly9jdXN0b20uY29tL2F1dGgvand0InjIAYABAfpCB3IFEAEYyAESagoGaXNzdWVyGAMgASgJQlqSQU0yJnRoZSBpc3N1ZXIgb2YgdGhlIGp3dCAoZm9yIHZhbGlkYXRpb24pSh0iaHR0cHM6Ly9hY2NvdW50cy5jdXN0b20uY29tInjIAYABAfpCB3IFEAEYyAESkAEKDWtleXNfZW5kcG9pbnQYBCABKAlCeZJBbDJAdGhlIGVuZHBvaW50IHRvIHRoZSBrZXkgKEpXSykgd2hpY2ggaXMgdXNlZCB0byBzaWduIHRoZSBKV1Qgd2l0aEoiImh0dHBzOi8vYWNjb3VudHMuY3VzdG9tLmNvbS9rZXlzInjIAYABAfpCB3IFEAEYyAESgAEKC2hlYWRlcl9uYW1lGAUgASgJQmuSQV4ySXRoZSBuYW1lIG9mIHRoZSBoZWFkZXIgd2hlcmUgdGhlIEpXVCBpcyBzZW50IGluLCBkZWZhdWx0IGlzIGF1dGhvcml6YXRpb25KDiJ4LWF1dGgtdG9rZW4ieMgB+kIHcgUQARjIATpEkkFBCj/SAQZpZHBfaWTSAQxqd3RfZW5kcG9pbnTSAQZpc3N1ZXLSAQ1rZXlzX2VuZHBvaW500gELaGVhZGVyX25hbWUiSAoaVXBkYXRlSURQSldUQ29uZmlnUmVzcG9uc2USKgoHZGV0YWlscxgBIAEoCzIZLnppdGFkZWwudjEuT2JqZWN0RGV0YWlscyJuChRMaXN0UHJvdmlkZXJzUmVxdWVzdBIkCgVxdWVyeRgBIAEoCzIVLnppdGFkZWwudjEuTGlzdFF1ZXJ5EjAKB3F1ZXJpZXMYAiADKAsyHy56aXRhZGVsLmFkbWluLnYxLlByb3ZpZGVyUXVlcnkihAEKDVByb3ZpZGVyUXVlcnkSMgoMaWRwX2lkX3F1ZXJ5GAEgASgLMhoueml0YWRlbC5pZHAudjEuSURQSURRdWVyeUgAEjYKDmlkcF9uYW1lX3F1ZXJ5GAIgASgLMhwueml0YWRlbC5pZHAudjEuSURQTmFtZVF1ZXJ5SABCBwoFcXVlcnkiawoVTGlzdFByb3ZpZGVyc1Jlc3BvbnNlEigKB2RldGFpbHMYASABKAsyFy56aXRhZGVsLnYxLkxpc3REZXRhaWxzEigKBnJlc3VsdBgCIAMoCzIYLnppdGFkZWwuaWRwLnYxLlByb3ZpZGVyIjAKFkdldFByb3ZpZGVyQnlJRFJlcXVlc3QSFgoCaWQYASABKAlCCvpCB3IFEAEYyAEiQAoXR2V0UHJvdmlkZXJCeUlEUmVzcG9uc2USJQoDaWRwGAEgASgLMhgueml0YWRlbC5pZHAudjEuUHJvdmlkZXIijQgKHkFkZEdlbmVyaWNPQXV0aFByb3ZpZGVyUmVxdWVzdBIqCgRuYW1lGAEgASgJQhySQQ9KDSJNeSBQcm92aWRlciL6QgdyBRABGMgBElsKCWNsaWVudF9pZBgCIAEoCUJIkkE7MixjbGllbnQgaWQgZ2VuZXJhdGVkIGJ5IHRoZSBpZGVudGl0eSBwcm92aWRlckoLImNsaWVudC1pZCL6QgdyBRABGMgBEmcKDWNsaWVudF9zZWNyZXQYAyABKAlCUJJBQzIwQ2xpZW50IHNlY3JldCBnZW5lcmF0ZWQgYnkgdGhlIGlkZW50aXR5IHByb3ZpZGVySg8iY2xpZW50LXNlY3JldCL6QgdyBRABGOgHEpcBChZhdXRob3JpemF0aW9uX2VuZHBvaW50GAQgASgJQneSQWoyOFRoZSBlbmRwb2ludCB3aGVyZSBaSVRBREVMIHNlbmQgdGhlIHVzZXIgdG8gYXV0aGVudGljYXRlSi4iaHR0cHM6Ly9hY2NvdW50cy5nb29nbGUuY29tL28vb2F1dGgyL3YyL2F1dGgi+kIHcgUQARjIARJ6Cg50b2tlbl9lbmRwb2ludBgFIAEoCUJikkFVMixUaGUgZW5kcG9pbnQgd2hlcmUgWklUQURFTCBjYW4gZ2V0IHRoZSB0b2tlbkolImh0dHBzOi8vb2F1dGgyLmdvb2dsZWFwaXMuY29tL3Rva2VuIvpCB3IFEAEYyAESkQEKDXVzZXJfZW5kcG9pbnQYBiABKAlCepJBbTI3VGhlIGVuZHBvaW50IHdoZXJlIFpJVEFERUwgY2FuIGdldCB0aGUgdXNlciBpbmZvcm1hdGlvbkoyImh0dHBzOi8vb3BlbmlkY29ubmVjdC5nb29nbGVhcGlzLmNvbS92MS91c2VyaW5mbyL6QgdyBRABGMgBEpEBCgZzY29wZXMYByADKAlCgAGSQW0yS1RoZSBzY29wZXMgcmVxdWVzdGVkIGJ5IFpJVEFERUwgZHVyaW5nIHRoZSByZXF1ZXN0IG9uIHRoZSBpZGVudGl0eSBwcm92aWRlckoeWyJvcGVuaWQiLCAicHJvZmlsZSIsICJlbWFpbCJd+kINkgEKEBQiBnIEEAEYZBJ2CgxpZF9hdHRyaWJ1dGUYCCABKAlCYJJBUzJGSWRlbnRpZnlpbmcgYXR0cmlidXRlIG9mIHRoZSB1c2VyIGluIHRoZSByZXNwb25zZSBvZiB0aGUgdXNlcl9lbmRwb2ludEoJInVzZXJfaWQi+kIHcgUQARjIARIxChBwcm92aWRlcl9vcHRpb25zGAkgASgLMhcueml0YWRlbC5pZHAudjEuT3B0aW9ucxIQCgh1c2VfcGtjZRgKIAEoCCJZCh9BZGRHZW5lcmljT0F1dGhQcm92aWRlclJlc3BvbnNlEioKB2RldGFpbHMYASABKAsyGS56aXRhZGVsLnYxLk9iamVjdERldGFpbHMSCgoCaWQYAiABKAkipAgKIVVwZGF0ZUdlbmVyaWNPQXV0aFByb3ZpZGVyUmVxdWVzdBIWCgJpZBgBIAEoCUIK+kIHcgUQARjIARIqCgRuYW1lGAIgASgJQhySQQ9KDSJNeSBQcm92aWRlciL6QgdyBRABGMgBElsKCWNsaWVudF9pZBgDIAEoCUJIkkE7MixDbGllbnQgaWQgZ2VuZXJhdGVkIGJ5IHRoZSBpZGVudGl0eSBwcm92aWRlckoLImNsaWVudC1pZCL6QgdyBRABGMgBEmMKDWNsaWVudF9zZWNyZXQYBCABKAlCTJJBQTIuQ2xpZW50IHNlY3JldCB3aWxsIG9ubHkgYmUgdXBkYXRlZCBpZiBwcm92aWRlZEoPImNsaWVudC1zZWNyZXQi+kIFcgMY6AcSlwEKFmF1dGhvcml6YXRpb25fZW5kcG9pbnQYBSABKAlCd5JBajI4VGhlIGVuZHBvaW50IHdoZXJlIFpJVEFERUwgc2VuZCB0aGUgdXNlciB0byBhdXRoZW50aWNhdGVKLiJodHRwczovL2FjY291bnRzLmdvb2dsZS5jb20vby9vYXV0aDIvdjIvYXV0aCL6QgdyBRABGMgBEnoKDnRva2VuX2VuZHBvaW50GAYgASgJQmKSQVUyLFRoZSBlbmRwb2ludCB3aGVyZSBaSVRBREVMIGNhbiBnZXQgdGhlIHRva2VuSiUiaHR0cHM6Ly9vYXV0aDIuZ29vZ2xlYXBpcy5jb20vdG9rZW4i+kIHcgUQARjIARKRAQoNdXNlcl9lbmRwb2ludBgHIAEoCUJ6kkFtMjdUaGUgZW5kcG9pbnQgd2hlcmUgWklUQURFTCBjYW4gZ2V0IHRoZSB1c2VyIGluZm9ybWF0aW9uSjIiaHR0cHM6Ly9vcGVuaWRjb25uZWN0Lmdvb2dsZWFwaXMuY29tL3YxL3VzZXJpbmZvIvpCB3IFEAEYyAESkQEKBnNjb3BlcxgIIAMoCUKAAZJBbTJLVGhlIHNjb3BlcyByZXF1ZXN0ZWQgYnkgWklUQURFTCBkdXJpbmcgdGhlIHJlcXVlc3Qgb24gdGhlIGlkZW50aXR5IHByb3ZpZGVySh5bIm9wZW5pZCIsICJwcm9maWxlIiwgImVtYWlsIl36Qg2SAQoQFCIGcgQQARhkEnYKDGlkX2F0dHJpYnV0ZRgJIAEoCUJgkkFTMkZJZGVudGlmeWluZyBhdHRyaWJ1dGUgb2YgdGhlIHVzZXIgaW4gdGhlIHJlc3BvbnNlIG9mIHRoZSB1c2VyX2VuZHBvaW50SgkidXNlcl9pZCL6QgdyBRABGMgBEjEKEHByb3ZpZGVyX29wdGlvbnMYCiABKAsyFy56aXRhZGVsLmlkcC52MS5PcHRpb25zEhAKCHVzZV9wa2NlGAsgASgIIlAKIlVwZGF0ZUdlbmVyaWNPQXV0aFByb3ZpZGVyUmVzcG9uc2USKgoHZGV0YWlscxgBIAEoCzIZLnppdGFkZWwudjEuT2JqZWN0RGV0YWlscyLdBAodQWRkR2VuZXJpY09JRENQcm92aWRlclJlcXVlc3QSJQoEbmFtZRgBIAEoCUIXkkEKSggiR29vZ2xlIvpCB3IFEAEYyAESZwoGaXNzdWVyGAIgASgJQleSQUoyKHRoZSBPSURDIGlzc3VlciBvZiB0aGUgaWRlbnRpdHkgcHJvdmlkZXJKHiJodHRwczovL2FjY291bnRzLmdvb2dsZS5jb20vIvpCB3IFEAEYyAESWwoJY2xpZW50X2lkGAMgASgJQkiSQTsyLGNsaWVudCBpZCBnZW5lcmF0ZWQgYnkgdGhlIGlkZW50aXR5IHByb3ZpZGVySgsiY2xpZW50LWlkIvpCB3IFEAEYyAESWQoNY2xpZW50X3NlY3JldBgEIAEoCUJCkkE1MilzZWNyZXQgZ2VuZXJhdGVkIGJ5IHRoZSBpZGVudGl0eSBwcm92aWRlckoIInNlY3JldCL6QgdyBRABGOgHEpEBCgZzY29wZXMYBSADKAlCgAGSQW0yS3RoZSBzY29wZXMgcmVxdWVzdGVkIGJ5IFpJVEFERUwgZHVyaW5nIHRoZSByZXF1ZXN0IG9uIHRoZSBpZGVudGl0eSBwcm92aWRlckoeWyJvcGVuaWQiLCAicHJvZmlsZSIsICJlbWFpbCJd+kINkgEKEBQiBnIEEAEYZBIxChBwcm92aWRlcl9vcHRpb25zGAYgASgLMhcueml0YWRlbC5pZHAudjEuT3B0aW9ucxIbChNpc19pZF90b2tlbl9tYXBwaW5nGAcgASgIEhAKCHVzZV9wa2NlGAggASgIIlgKHkFkZEdlbmVyaWNPSURDUHJvdmlkZXJSZXNwb25zZRIqCgdkZXRhaWxzGAEgASgLMhkueml0YWRlbC52MS5PYmplY3REZXRhaWxzEgoKAmlkGAIgASgJIpMFCiBVcGRhdGVHZW5lcmljT0lEQ1Byb3ZpZGVyUmVxdWVzdBIuCgJpZBgBIAEoCUIikkEVShMiNjk2MjkwMjM5MDY0ODgzMzQi+kIHcgUQARjIARIlCgRuYW1lGAIgASgJQheSQQpKCCJHb29nbGUi+kIHcgUQARjIARJnCgZpc3N1ZXIYAyABKAlCV5JBSjIodGhlIE9JREMgaXNzdWVyIG9mIHRoZSBpZGVudGl0eSBwcm92aWRlckoeImh0dHBzOi8vYWNjb3VudHMuZ29vZ2xlLmNvbS8i+kIHcgUQARjIARJbCgljbGllbnRfaWQYBCABKAlCSJJBOzIsY2xpZW50IGlkIGdlbmVyYXRlZCBieSB0aGUgaWRlbnRpdHkgcHJvdmlkZXJKCyJjbGllbnQtaWQi+kIHcgUQARjIARJcCg1jbGllbnRfc2VjcmV0GAUgASgJQkWSQToyLmNsaWVudCBzZWNyZXQgd2lsbCBvbmx5IGJlIHVwZGF0ZWQgaWYgcHJvdmlkZWRKCCJzZWNyZXQi+kIFcgMY6AcSkQEKBnNjb3BlcxgGIAMoCUKAAZJBbTJLdGhlIHNjb3BlcyByZXF1ZXN0ZWQgYnkgWklUQURFTCBkdXJpbmcgdGhlIHJlcXVlc3Qgb24gdGhlIGlkZW50aXR5IHByb3ZpZGVySh5bIm9wZW5pZCIsICJwcm9maWxlIiwgImVtYWlsIl36Qg2SAQoQFCIGcgQQARhkEjEKEHByb3ZpZGVyX29wdGlvbnMYByABKAsyFy56aXRhZGVsLmlkcC52MS5PcHRpb25zEhsKE2lzX2lkX3Rva2VuX21hcHBpbmcYCCABKAgSEAoIdXNlX3BrY2UYCSABKAgiTwohVXBkYXRlR2VuZXJpY09JRENQcm92aWRlclJlc3BvbnNlEioKB2RldGFpbHMYASABKAsyGS56aXRhZGVsLnYxLk9iamVjdERldGFpbHMi2wEKIU1pZ3JhdGVHZW5lcmljT0lEQ1Byb3ZpZGVyUmVxdWVzdBIuCgJpZBgBIAEoCUIikkEVShMiNjk2MjkwMjM5MDY0ODgzMzQi+kIHcgUQARjIARI8CgVhenVyZRgCIAEoCzIrLnppdGFkZWwuYWRtaW4udjEuQWRkQXp1cmVBRFByb3ZpZGVyUmVxdWVzdEgAEjwKBmdvb2dsZRgDIAEoCzIqLnppdGFkZWwuYWRtaW4udjEuQWRkR29vZ2xlUHJvdmlkZXJSZXF1ZXN0SABCCgoIdGVtcGxhdGUiUAoiTWlncmF0ZUdlbmVyaWNPSURDUHJvdmlkZXJSZXNwb25zZRIqCgdkZXRhaWxzGAEgASgLMhkueml0YWRlbC52MS5PYmplY3REZXRhaWxzIvgBChVBZGRKV1RQcm92aWRlclJlcXVlc3QSKgoEbmFtZRgBIAEoCUIckkEPSg0iTXkgUHJvdmlkZXIi+kIHcgUQARjIARIaCgZpc3N1ZXIYAiABKAlCCvpCB3IFEAEYyAESIAoMand0X2VuZHBvaW50GAMgASgJQgr6QgdyBRABGMgBEiEKDWtleXNfZW5kcG9pbnQYBCABKAlCCvpCB3IFEAEYyAESHwoLaGVhZGVyX25hbWUYBSABKAlCCvpCB3IFEAEYyAESMQoQcHJvdmlkZXJfb3B0aW9ucxgGIAEoCzIXLnppdGFkZWwuaWRwLnYxLk9wdGlvbnMiUAoWQWRkSldUUHJvdmlkZXJSZXNwb25zZRIqCgdkZXRhaWxzGAEgASgLMhkueml0YWRlbC52MS5PYmplY3REZXRhaWxzEgoKAmlkGAIgASgJIpECChhVcGRhdGVKV1RQcm92aWRlclJlcXVlc3QSFgoCaWQYASABKAlCCvpCB3IFEAEYyAESKgoEbmFtZRgCIAEoCUIckkEPSg0iTXkgUHJvdmlkZXIi+kIHcgUQARjIARIaCgZpc3N1ZXIYAyABKAlCCvpCB3IFEAEYyAESIAoMand0X2VuZHBvaW50GAQgASgJQgr6QgdyBRABGMgBEh8KDWtleXNfZW5kcG9pbnQYBSABKAlCCPpCBXIDGMgBEh8KC2hlYWRlcl9uYW1lGAYgASgJQgr6QgdyBRABGMgBEjEKEHByb3ZpZGVyX29wdGlvbnMYByABKAsyFy56aXRhZGVsLmlkcC52MS5PcHRpb25zIkcKGVVwZGF0ZUpXVFByb3ZpZGVyUmVzcG9uc2USKgoHZGV0YWlscxgBIAEoCzIZLnppdGFkZWwudjEuT2JqZWN0RGV0YWlscyLTBgoZQWRkQXp1cmVBRFByb3ZpZGVyUmVxdWVzdBInCgRuYW1lGAEgASgJQhmSQQxKCiJBenVyZSBBRCL6QgdyBRABGMgBElIKCWNsaWVudF9pZBgCIAEoCUI/kkEyMiNjbGllbnQgaWQgZ2VuZXJhdGVkIGJ5IHRoZSBBenVyZSBBREoLImNsaWVudC1pZCL6QgdyBRABGMgBElcKDWNsaWVudF9zZWNyZXQYAyABKAlCQJJBMzInY2xpZW50IHNlY3JldCBnZW5lcmF0ZWQgYnkgdGhlIEF6dXJlIEFESggic2VjcmV0IvpCB3IFEAEYyAES0QEKBnRlbmFudBgEIAEoCzIdLnppdGFkZWwuaWRwLnYxLkF6dXJlQURUZW5hbnRCoQGSQZ0BMpoBRGVmaW5lcyB3aGF0IGtpbmQgb2YgYWNjb3VudHMgYXJlIGFsbG93ZWQgdG8gYXV0aGVudGljYXRlIChQZXJzb25hbCwgT3JnYW5pemF0aW9uYWwsIEFsbCkuIElmIG5vdCBwcm92aWRlZCB0aGUgYGNvbW1vbmAgdGVuYW50IHdpbGwgYmUgdXNlZCAoQWxsIGFjY291bnRzKRLEAQoOZW1haWxfdmVyaWZpZWQYBSABKAhCqwGSQacBMqQBQXp1cmUgQUQgZG9lc24ndCBzZW5kIGlmIHRoZSBlbWFpbCBoYXMgYmVlbiB2ZXJpZmllZC4gRW5hYmxlIHRoaXMgaWYgdGhlIHVzZXIgZW1haWwgc2hvdWxkIGFsd2F5cyBiZSBhZGRlZCB2ZXJpZmllZCBpbiBaSVRBREVMIChubyB2ZXJpZmljYXRpb24gZW1haWxzIHdpbGwgYmUgc2VudCkSkQEKBnNjb3BlcxgGIAMoCUKAAZJBbTI+dGhlIHNjb3BlcyByZXF1ZXN0ZWQgYnkgWklUQURFTCBkdXJpbmcgdGhlIHJlcXVlc3QgdG8gQXp1cmUgQURKK1sib3BlbmlkIiwgInByb2ZpbGUiLCAiZW1haWwiLCAiVXNlci5SZWFkIl36Qg2SAQoQFCIGcgQQARhkEjEKEHByb3ZpZGVyX29wdGlvbnMYByABKAsyFy56aXRhZGVsLmlkcC52MS5PcHRpb25zIlQKGkFkZEF6dXJlQURQcm92aWRlclJlc3BvbnNlEioKB2RldGFpbHMYASABKAsyGS56aXRhZGVsLnYxLk9iamVjdERldGFpbHMSCgoCaWQYAiABKAki8wYKHFVwZGF0ZUF6dXJlQURQcm92aWRlclJlcXVlc3QSFgoCaWQYASABKAlCCvpCB3IFEAEYyAESJwoEbmFtZRgCIAEoCUIZkkEMSgoiQXp1cmUgQUQi+kIHcgUQARjIARJSCgljbGllbnRfaWQYAyABKAlCP5JBMjIjQ2xpZW50IGlkIGdlbmVyYXRlZCBieSB0aGUgQXp1cmUgQURKCyJjbGllbnQtaWQi+kIHcgUQARjIARJcCg1jbGllbnRfc2VjcmV0GAQgASgJQkWSQToyLkNsaWVudF9zZWNyZXQgd2lsbCBvbmx5IGJlIHVwZGF0ZWQgaWYgcHJvdmlkZWRKCCJzZWNyZXQi+kIFcgMYyAES0QEKBnRlbmFudBgFIAEoCzIdLnppdGFkZWwuaWRwLnYxLkF6dXJlQURUZW5hbnRCoQGSQZ0BMpoBRGVmaW5lcyB3aGF0IGtpbmQgb2YgYWNjb3VudHMgYXJlIGFsbG93ZWQgdG8gYXV0aGVudGljYXRlIChQZXJzb25hbCwgT3JnYW5pemF0aW9uYWwsIEFsbCkuIElmIG5vdCBwcm92aWRlZCB0aGUgYGNvbW1vbmAgdGVuYW50IHdpbGwgYmUgdXNlZCAoQWxsIGFjY291bnRzKRLEAQoOZW1haWxfdmVyaWZpZWQYBiABKAhCqwGSQacBMqQBQXp1cmUgQUQgZG9lc24ndCBzZW5kIGlmIHRoZSBlbWFpbCBoYXMgYmVlbiB2ZXJpZmllZC4gRW5hYmxlIHRoaXMgaWYgdGhlIHVzZXIgZW1haWwgc2hvdWxkIGFsd2F5cyBiZSBhZGRlZCB2ZXJpZmllZCBpbiBaSVRBREVMIChubyB2ZXJpZmljYXRpb24gZW1haWxzIHdpbGwgYmUgc2VudCkSkQEKBnNjb3BlcxgHIAMoCUKAAZJBbTI+dGhlIHNjb3BlcyByZXF1ZXN0ZWQgYnkgWklUQURFTCBkdXJpbmcgdGhlIHJlcXVlc3QgdG8gQXp1cmUgQURKK1sib3BlbmlkIiwgInByb2ZpbGUiLCAiZW1haWwiLCAiVXNlci5SZWFkIl36Qg2SAQoQFCIGcgQQARhkEjEKEHByb3ZpZGVyX29wdGlvbnMYCCABKAsyFy56aXRhZGVsLmlkcC52MS5PcHRpb25zIksKHVVwZGF0ZUF6dXJlQURQcm92aWRlclJlc3BvbnNlEioKB2RldGFpbHMYASABKAsyGS56aXRhZGVsLnYxLk9iamVjdERldGFpbHMi0wMKGEFkZEdpdEh1YlByb3ZpZGVyUmVxdWVzdBJbCgRuYW1lGAEgASgJQk2SQUIyNkdpdEh1YiB3aWxsIGJlIHVzZWQgYXMgZGVmYXVsdCwgaWYgbm8gbmFtZSBpcyBwcm92aWRlZEoIIkdpdEh1YiL6QgVyAxjIARJMCgljbGllbnRfaWQYAiABKAlCOZJBLDIdQ2xpZW50IGlkIGdlbmVyYXRlZCBieSBHaXRIdWJKCyJjbGllbnQtaWQi+kIHcgUQARjIARJVCg1jbGllbnRfc2VjcmV0GAMgASgJQj6SQTEyJUNsaWVudCBzZWNyZXQgZ2VuZXJhdGVkIGJ5IHRoZSBHaXRIdWJKCCJzZWNyZXQi+kIHcgUQARjIARKBAQoGc2NvcGVzGAQgAygJQnGSQV4yPFRoZSBzY29wZXMgcmVxdWVzdGVkIGJ5IFpJVEFERUwgZHVyaW5nIHRoZSByZXF1ZXN0IHRvIEdpdEh1YkoeWyJvcGVuaWQiLCAicHJvZmlsZSIsICJlbWFpbCJd+kINkgEKEBQiBnIEEAEYZBIxChBwcm92aWRlcl9vcHRpb25zGAUgASgLMhcueml0YWRlbC5pZHAudjEuT3B0aW9ucyJTChlBZGRHaXRIdWJQcm92aWRlclJlc3BvbnNlEioKB2RldGFpbHMYASABKAsyGS56aXRhZGVsLnYxLk9iamVjdERldGFpbHMSCgoCaWQYAiABKAkivQMKG1VwZGF0ZUdpdEh1YlByb3ZpZGVyUmVxdWVzdBIWCgJpZBgBIAEoCUIK+kIHcgUQARjIARIjCgRuYW1lGAIgASgJQhWSQQpKCCJHaXRIdWIi+kIFcgMYyAESTAoJY2xpZW50X2lkGAMgASgJQjmSQSwyHUNsaWVudCBpZCBnZW5lcmF0ZWQgYnkgR2l0SHViSgsiY2xpZW50LWlkIvpCB3IFEAEYyAESXAoNY2xpZW50X3NlY3JldBgEIAEoCUJFkkE6Mi5DbGllbnRfc2VjcmV0IHdpbGwgb25seSBiZSB1cGRhdGVkIGlmIHByb3ZpZGVkSggic2VjcmV0IvpCBXIDGMgBEoEBCgZzY29wZXMYBSADKAlCcZJBXjI8VGhlIHNjb3BlcyByZXF1ZXN0ZWQgYnkgWklUQURFTCBkdXJpbmcgdGhlIHJlcXVlc3QgdG8gR2l0SHViSh5bIm9wZW5pZCIsICJwcm9maWxlIiwgImVtYWlsIl36Qg2SAQoQFCIGcgQQARhkEjEKEHByb3ZpZGVyX29wdGlvbnMYBiABKAsyFy56aXRhZGVsLmlkcC52MS5PcHRpb25zIkoKHFVwZGF0ZUdpdEh1YlByb3ZpZGVyUmVzcG9uc2USKgoHZGV0YWlscxgBIAEoCzIZLnppdGFkZWwudjEuT2JqZWN0RGV0YWlscyKcBAooQWRkR2l0SHViRW50ZXJwcmlzZVNlcnZlclByb3ZpZGVyUmVxdWVzdBJMCgljbGllbnRfaWQYASABKAlCOZJBLDIdQ2xpZW50IGlkIGdlbmVyYXRlZCBieSBHaXRIdWJKCyJjbGllbnQtaWQi+kIHcgUQARjIARIlCgRuYW1lGAIgASgJQheSQQpKCCJHaXRIdWIi+kIHcgUQARjIARJRCg1jbGllbnRfc2VjcmV0GAMgASgJQjqSQS0yIUNsaWVudCBzZWNyZXQgZ2VuZXJhdGVkIGJ5IEdpdEh1YkoIInNlY3JldCL6QgdyBRABGMgBEioKFmF1dGhvcml6YXRpb25fZW5kcG9pbnQYBCABKAlCCvpCB3IFEAEYyAESIgoOdG9rZW5fZW5kcG9pbnQYBSABKAlCCvpCB3IFEAEYyAESIQoNdXNlcl9lbmRwb2ludBgGIAEoCUIK+kIHcgUQARjIARKBAQoGc2NvcGVzGAcgAygJQnGSQV4yPFRoZSBzY29wZXMgcmVxdWVzdGVkIGJ5IFpJVEFERUwgZHVyaW5nIHRoZSByZXF1ZXN0IHRvIEdpdEh1YkoeWyJvcGVuaWQiLCAicHJvZmlsZSIsICJlbWFpbCJd+kINkgEKEBQiBnIEEAEYZBIxChBwcm92aWRlcl9vcHRpb25zGAggASgLMhcueml0YWRlbC5pZHAudjEuT3B0aW9ucyJjCilBZGRHaXRIdWJFbnRlcnByaXNlU2VydmVyUHJvdmlkZXJSZXNwb25zZRIqCgdkZXRhaWxzGAEgASgLMhkueml0YWRlbC52MS5PYmplY3REZXRhaWxzEgoKAmlkGAIgASgJIsIECitVcGRhdGVHaXRIdWJFbnRlcnByaXNlU2VydmVyUHJvdmlkZXJSZXF1ZXN0EhYKAmlkGAEgASgJQgr6QgdyBRABGMgBEiUKBG5hbWUYAiABKAlCF5JBCkoIIkdpdEh1YiL6QgdyBRABGMgBEkwKCWNsaWVudF9pZBgDIAEoCUI5kkEsMh1DbGllbnQgaWQgZ2VuZXJhdGVkIGJ5IEdpdEh1YkoLImNsaWVudC1pZCL6QgdyBRABGMgBElwKDWNsaWVudF9zZWNyZXQYBCABKAlCRZJBOjIuQ2xpZW50IHNlY3JldCB3aWxsIG9ubHkgYmUgdXBkYXRlZCBpZiBwcm92aWRlZEoIInNlY3JldCL6QgVyAxjIARIqChZhdXRob3JpemF0aW9uX2VuZHBvaW50GAUgASgJQgr6QgdyBRABGMgBEiIKDnRva2VuX2VuZHBvaW50GAYgASgJQgr6QgdyBRABGMgBEiEKDXVzZXJfZW5kcG9pbnQYByABKAlCCvpCB3IFEAEYyAESgQEKBnNjb3BlcxgIIAMoCUJxkkFeMjxUaGUgc2NvcGVzIHJlcXVlc3RlZCBieSBaSVRBREVMIGR1cmluZyB0aGUgcmVxdWVzdCB0byBHaXRIdWJKHlsib3BlbmlkIiwgInByb2ZpbGUiLCAiZW1haWwiXfpCDZIBChAUIgZyBBABGGQSMQoQcHJvdmlkZXJfb3B0aW9ucxgJIAEoCzIXLnppdGFkZWwuaWRwLnYxLk9wdGlvbnMiWgosVXBkYXRlR2l0SHViRW50ZXJwcmlzZVNlcnZlclByb3ZpZGVyUmVzcG9uc2USKgoHZGV0YWlscxgBIAEoCzIZLnppdGFkZWwudjEuT2JqZWN0RGV0YWlscyLPAwoYQWRkR2l0TGFiUHJvdmlkZXJSZXF1ZXN0ElsKBG5hbWUYASABKAlCTZJBQjI2R2l0TGFiIHdpbGwgYmUgdXNlZCBhcyBkZWZhdWx0LCBpZiBubyBuYW1lIGlzIHByb3ZpZGVkSggiR2l0TGFiIvpCBXIDGMgBEkwKCWNsaWVudF9pZBgCIAEoCUI5kkEsMh1DbGllbnQgaWQgZ2VuZXJhdGVkIGJ5IEdpdExhYkoLImNsaWVudC1pZCL6QgdyBRABGMgBElEKDWNsaWVudF9zZWNyZXQYAyABKAlCOpJBLTIhQ2xpZW50IHNlY3JldCBnZW5lcmF0ZWQgYnkgR2l0TGFiSggic2VjcmV0IvpCB3IFEAEYyAESgQEKBnNjb3BlcxgEIAMoCUJxkkFeMjxUaGUgc2NvcGVzIHJlcXVlc3RlZCBieSBaSVRBREVMIGR1cmluZyB0aGUgcmVxdWVzdCB0byBHaXRMYWJKHlsib3BlbmlkIiwgInByb2ZpbGUiLCAiZW1haWwiXfpCDZIBChAUIgZyBBABGGQSMQoQcHJvdmlkZXJfb3B0aW9ucxgFIAEoCzIXLnppdGFkZWwuaWRwLnYxLk9wdGlvbnMiUwoZQWRkR2l0TGFiUHJvdmlkZXJSZXNwb25zZRIqCgdkZXRhaWxzGAEgASgLMhkueml0YWRlbC52MS5PYmplY3REZXRhaWxzEgoKAmlkGAIgASgJIvUDChtVcGRhdGVHaXRMYWJQcm92aWRlclJlcXVlc3QSFgoCaWQYASABKAlCCvpCB3IFEAEYyAESWwoEbmFtZRgCIAEoCUJNkkFCMjZHaXRMYWIgd2lsbCBiZSB1c2VkIGFzIGRlZmF1bHQsIGlmIG5vIG5hbWUgaXMgcHJvdmlkZWRKCCJHaXRMYWIi+kIFcgMYyAESTAoJY2xpZW50X2lkGAMgASgJQjmSQSwyHUNsaWVudCBpZCBnZW5lcmF0ZWQgYnkgR2l0TGFiSgsiY2xpZW50LWlkIvpCB3IFEAEYyAESXAoNY2xpZW50X3NlY3JldBgEIAEoCUJFkkE6Mi5DbGllbnQgc2VjcmV0IHdpbGwgb25seSBiZSB1cGRhdGVkIGlmIHByb3ZpZGVkSggic2VjcmV0IvpCBXIDGMgBEoEBCgZzY29wZXMYBSADKAlCcZJBXjI8VGhlIHNjb3BlcyByZXF1ZXN0ZWQgYnkgWklUQURFTCBkdXJpbmcgdGhlIHJlcXVlc3QgdG8gR2l0TGFiSh5bIm9wZW5pZCIsICJwcm9maWxlIiwgImVtYWlsIl36Qg2SAQoQFCIGcgQQARhkEjEKEHByb3ZpZGVyX29wdGlvbnMYBiABKAsyFy56aXRhZGVsLmlkcC52MS5PcHRpb25zIkoKHFVwZGF0ZUdpdExhYlByb3ZpZGVyUmVzcG9uc2USKgoHZGV0YWlscxgBIAEoCzIZLnppdGFkZWwudjEuT2JqZWN0RGV0YWlscyK/AwoiQWRkR2l0TGFiU2VsZkhvc3RlZFByb3ZpZGVyUmVxdWVzdBIaCgZpc3N1ZXIYASABKAlCCvpCB3IFEAEYyAESJQoEbmFtZRgCIAEoCUIXkkEKSggiR2l0TGFiIvpCB3IFEAEYyAESTAoJY2xpZW50X2lkGAMgASgJQjmSQSwyHUNsaWVudCBpZCBnZW5lcmF0ZWQgYnkgR2l0TGFiSgsiY2xpZW50LWlkIvpCB3IFEAEYyAESUQoNY2xpZW50X3NlY3JldBgEIAEoCUI6kkEtMiFDbGllbnQgc2VjcmV0IGdlbmVyYXRlZCBieSBHaXRMYWJKCCJzZWNyZXQi+kIHcgUQARjIARKBAQoGc2NvcGVzGAUgAygJQnGSQV4yPFRoZSBzY29wZXMgcmVxdWVzdGVkIGJ5IFpJVEFERUwgZHVyaW5nIHRoZSByZXF1ZXN0IHRvIEdpdExhYkoeWyJvcGVuaWQiLCAicHJvZmlsZSIsICJlbWFpbCJd+kINkgEKEBQiBnIEEAEYZBIxChBwcm92aWRlcl9vcHRpb25zGAYgASgLMhcueml0YWRlbC5pZHAudjEuT3B0aW9ucyJdCiNBZGRHaXRMYWJTZWxmSG9zdGVkUHJvdmlkZXJSZXNwb25zZRIqCgdkZXRhaWxzGAEgASgLMhkueml0YWRlbC52MS5PYmplY3REZXRhaWxzEgoKAmlkGAIgASgJIuUDCiVVcGRhdGVHaXRMYWJTZWxmSG9zdGVkUHJvdmlkZXJSZXF1ZXN0EhYKAmlkGAEgASgJQgr6QgdyBRABGMgBEhoKBmlzc3VlchgCIAEoCUIK+kIHcgUQARjIARIlCgRuYW1lGAMgASgJQheSQQpKCCJHaXRMYWIi+kIHcgUQARjIARJMCgljbGllbnRfaWQYBCABKAlCOZJBLDIdQ2xpZW50IGlkIGdlbmVyYXRlZCBieSBHaXRMYWJKCyJjbGllbnQtaWQi+kIHcgUQARjIARJcCg1jbGllbnRfc2VjcmV0GAUgASgJQkWSQToyLkNsaWVudCBzZWNyZXQgd2lsbCBvbmx5IGJlIHVwZGF0ZWQgaWYgcHJvdmlkZWRKCCJzZWNyZXQi+kIFcgMYyAESgQEKBnNjb3BlcxgGIAMoCUJxkkFeMjxUaGUgc2NvcGVzIHJlcXVlc3RlZCBieSBaSVRBREVMIGR1cmluZyB0aGUgcmVxdWVzdCB0byBHaXRMYWJKHlsib3BlbmlkIiwgInByb2ZpbGUiLCAiZW1haWwiXfpCDZIBChAUIgZyBBABGGQSMQoQcHJvdmlkZXJfb3B0aW9ucxgHIAEoCzIXLnppdGFkZWwuaWRwLnYxLk9wdGlvbnMiVAomVXBkYXRlR2l0TGFiU2VsZkhvc3RlZFByb3ZpZGVyUmVzcG9uc2USKgoHZGV0YWlscxgBIAEoCzIZLnppdGFkZWwudjEuT2JqZWN0RGV0YWlscyLPAwoYQWRkR29vZ2xlUHJvdmlkZXJSZXF1ZXN0ElsKBG5hbWUYASABKAlCTZJBQjI2R29vZ2xlIHdpbGwgYmUgdXNlZCBhcyBkZWZhdWx0LCBpZiBubyBuYW1lIGlzIHByb3ZpZGVkSggiR29vZ2xlIvpCBXIDGMgBEkwKCWNsaWVudF9pZBgCIAEoCUI5kkEsMh1DbGllbnQgaWQgZ2VuZXJhdGVkIGJ5IEdvb2dsZUoLImNsaWVudC1pZCL6QgdyBRABGMgBElEKDWNsaWVudF9zZWNyZXQYAyABKAlCOpJBLTIhQ2xpZW50IHNlY3JldCBnZW5lcmF0ZWQgYnkgR29vZ2xlSggic2VjcmV0IvpCB3IFEAEYyAESgQEKBnNjb3BlcxgEIAMoCUJxkkFeMjxUaGUgc2NvcGVzIHJlcXVlc3RlZCBieSBaSVRBREVMIGR1cmluZyB0aGUgcmVxdWVzdCB0byBHb29nbGVKHlsib3BlbmlkIiwgInByb2ZpbGUiLCAiZW1haWwiXfpCDZIBChAUIgZyBBABGGQSMQoQcHJvdmlkZXJfb3B0aW9ucxgFIAEoCzIXLnppdGFkZWwuaWRwLnYxLk9wdGlvbnMiUwoZQWRkR29vZ2xlUHJvdmlkZXJSZXNwb25zZRIqCgdkZXRhaWxzGAEgASgLMhkueml0YWRlbC52MS5PYmplY3REZXRhaWxzEgoKAmlkGAIgASgJIr0DChtVcGRhdGVHb29nbGVQcm92aWRlclJlcXVlc3QSFgoCaWQYASABKAlCCvpCB3IFEAEYyAESIwoEbmFtZRgCIAEoCUIVkkEKSggiR29vZ2xlIvpCBXIDGMgBEkwKCWNsaWVudF9pZBgDIAEoCUI5kkEsMh1DbGllbnQgaWQgZ2VuZXJhdGVkIGJ5IEdvb2dsZUoLImNsaWVudC1pZCL6QgdyBRABGMgBElwKDWNsaWVudF9zZWNyZXQYBCABKAlCRZJBOjIuQ2xpZW50IHNlY3JldCB3aWxsIG9ubHkgYmUgdXBkYXRlZCBpZiBwcm92aWRlZEoIInNlY3JldCL6QgVyAxjIARKBAQoGc2NvcGVzGAUgAygJQnGSQV4yPFRoZSBzY29wZXMgcmVxdWVzdGVkIGJ5IFpJVEFERUwgZHVyaW5nIHRoZSByZXF1ZXN0IHRvIEdvb2dsZUoeWyJvcGVuaWQiLCAicHJvZmlsZSIsICJlbWFpbCJd+kINkgEKEBQiBnIEEAEYZBIxChBwcm92aWRlcl9vcHRpb25zGAYgASgLMhcueml0YWRlbC5pZHAudjEuT3B0aW9ucyJKChxVcGRhdGVHb29nbGVQcm92aWRlclJlc3BvbnNlEioKB2RldGFpbHMYASABKAsyGS56aXRhZGVsLnYxLk9iamVjdERldGFpbHMi8gMKFkFkZExEQVBQcm92aWRlclJlcXVlc3QSGAoEbmFtZRgBIAEoCUIK+kIHcgUQARjIARIkCgdzZXJ2ZXJzGAIgAygJQhP6QhCSAQ0IARAUIgdyBRABGMgBEhEKCXN0YXJ0X3RscxgDIAEoCBIbCgdiYXNlX2RuGAQgASgJQgr6QgdyBRABGMgBEhsKB2JpbmRfZG4YBSABKAlCCvpCB3IFEAEYyAESIQoNYmluZF9wYXNzd29yZBgGIAEoCUIK+kIHcgUQARjIARIdCgl1c2VyX2Jhc2UYByABKAlCCvpCB3IFEAEYyAESMAoTdXNlcl9vYmplY3RfY2xhc3NlcxgIIAMoCUIT+kIQkgENCAEQFCIHcgUQARjIARIpCgx1c2VyX2ZpbHRlcnMYCSADKAlCE/pCEJIBDQgBEBQiB3IFEAEYyAESKgoHdGltZW91dBgKIAEoCzIZLmdvb2dsZS5wcm90b2J1Zi5EdXJhdGlvbhIyCgphdHRyaWJ1dGVzGAsgASgLMh4ueml0YWRlbC5pZHAudjEuTERBUEF0dHJpYnV0ZXMSMQoQcHJvdmlkZXJfb3B0aW9ucxgMIAEoCzIXLnppdGFkZWwuaWRwLnYxLk9wdGlvbnMSGQoHcm9vdF9jYRgNIAEoDEII+kIFegMY4F0iUQoXQWRkTERBUFByb3ZpZGVyUmVzcG9uc2USKgoHZGV0YWlscxgBIAEoCzIZLnppdGFkZWwudjEuT2JqZWN0RGV0YWlscxIKCgJpZBgCIAEoCSKLBAoZVXBkYXRlTERBUFByb3ZpZGVyUmVxdWVzdBIWCgJpZBgBIAEoCUIK+kIHcgUQARjIARIYCgRuYW1lGAIgASgJQgr6QgdyBRABGMgBEiQKB3NlcnZlcnMYAyADKAlCE/pCEJIBDQgBEBQiB3IFEAEYyAESEQoJc3RhcnRfdGxzGAQgASgIEhsKB2Jhc2VfZG4YBSABKAlCCvpCB3IFEAEYyAESGwoHYmluZF9kbhgGIAEoCUIK+kIHcgUQARjIARIfCg1iaW5kX3Bhc3N3b3JkGAcgASgJQgj6QgVyAxjIARIdCgl1c2VyX2Jhc2UYCCABKAlCCvpCB3IFEAEYyAESMAoTdXNlcl9vYmplY3RfY2xhc3NlcxgJIAMoCUIT+kIQkgENCAEQFCIHcgUQARjIARIpCgx1c2VyX2ZpbHRlcnMYCiADKAlCE/pCEJIBDQgBEBQiB3IFEAEYyAESKgoHdGltZW91dBgLIAEoCzIZLmdvb2dsZS5wcm90b2J1Zi5EdXJhdGlvbhIyCgphdHRyaWJ1dGVzGAwgASgLMh4ueml0YWRlbC5pZHAudjEuTERBUEF0dHJpYnV0ZXMSMQoQcHJvdmlkZXJfb3B0aW9ucxgNIAEoCzIXLnppdGFkZWwuaWRwLnYxLk9wdGlvbnMSGQoHcm9vdF9jYRgOIAEoDEII+kIFegMY4F0iSAoaVXBkYXRlTERBUFByb3ZpZGVyUmVzcG9uc2USKgoHZGV0YWlscxgBIAEoCzIZLnppdGFkZWwudjEuT2JqZWN0RGV0YWlscyLWBQoXQWRkQXBwbGVQcm92aWRlclJlcXVlc3QSXAoEbmFtZRgBIAEoCUJOkkFDMjVBcHBsZSB3aWxsIGJlIHVzZWQgYXMgZGVmYXVsdCwgaWYgbm8gbmFtZSBpcyBwcm92aWRlZEoHIkFwcGxlInjIAfpCBXIDGMgBEmsKCWNsaWVudF9pZBgCIAEoCUJYkkFHMjJDbGllbnQgaWQgKEFwcCBJRCBvciBTZXJ2aWNlIElEKSBwcm92aWRlZCBieSBBcHBsZUoLImNsaWVudC1pZCJ4yAGAAQHiQQEC+kIHcgUQARjIARJdCgd0ZWFtX2lkGAMgASgJQkySQT0yKCgxMC1jaGFyYWN0ZXIpIFRlYW0gSUQgcHJvdmlkZWQgYnkgQXBwbGVKDCJBTFQwM0pWM09TIngKgAEK4kEBAvpCBXIDmAEKEmoKBmtleV9pZBgEIAEoCUJakkFLMjcoMTAtY2hhcmFjdGVyKSBJRCBvZiB0aGUgcHJpdmF0ZSBrZXkgZ2VuZXJhdGVkIGJ5IEFwcGxlSgsiT0dLREsyNUtEIngKgAEK4kEBAvpCBXIDmAEKEnoKC3ByaXZhdGVfa2V5GAUgASgMQmWSQVQyHlByaXZhdGUgS2V5IGdlbmVyYXRlZCBieSBBcHBsZUosIkxTMHRMUzFDUlVkSlRpQlFVa2xXUVZSRklFdEZXUzB0TFMwdENrMS4uLiJ4iCeAAQHiQQEC+kIHegUQARiIJxJ2CgZzY29wZXMYBiADKAlCZpJBUzI7VGhlIHNjb3BlcyByZXF1ZXN0ZWQgYnkgWklUQURFTCBkdXJpbmcgdGhlIHJlcXVlc3QgdG8gQXBwbGVKEVsibmFtZSIsICJlbWFpbCJdoAEU+kINkgEKEBQiBnIEEAEYZBIxChBwcm92aWRlcl9vcHRpb25zGAcgASgLMhcueml0YWRlbC5pZHAudjEuT3B0aW9ucyJSChhBZGRBcHBsZVByb3ZpZGVyUmVzcG9uc2USKgoHZGV0YWlscxgBIAEoCzIZLnppdGFkZWwudjEuT2JqZWN0RGV0YWlscxIKCgJpZBgCIAEoCSK/BQoaVXBkYXRlQXBwbGVQcm92aWRlclJlcXVlc3QSFgoCaWQYASABKAlCCvpCB3IFEAEYyAESJQoEbmFtZRgCIAEoCUIXkkEMSgciQXBwbGUieMgB+kIFcgMYyAESawoJY2xpZW50X2lkGAMgASgJQliSQUcyMkNsaWVudCBpZCAoQXBwIElEIG9yIFNlcnZpY2UgSUQpIHByb3ZpZGVkIGJ5IEFwcGxlSgsiY2xpZW50LWlkInjIAYABAeJBAQL6QgdyBRABGMgBEl0KB3RlYW1faWQYBCABKAlCTJJBPTIoKDEwLWNoYXJhY3RlcikgVGVhbSBJRCBwcm92aWRlZCBieSBBcHBsZUoMIkFMVDAzSlYzT1MieAqAAQriQQEC+kIFcgOYAQoSagoGa2V5X2lkGAUgASgJQlqSQUsyNygxMC1jaGFyYWN0ZXIpIElEIG9mIHRoZSBwcml2YXRlIGtleSBnZW5lcmF0ZWQgYnkgQXBwbGVKCyJPR0tESzI1S0QieAqAAQriQQEC+kIFcgOYAQoScQoLcHJpdmF0ZV9rZXkYBiABKAxCXJJBUTIeUHJpdmF0ZSBLZXkgZ2VuZXJhdGVkIGJ5IEFwcGxlSiwiTFMwdExTMUNSVWRKVGlCUVVrbFdRVlJGSUV0RldTMHRMUzB0Q2sxLi4uIniIJ/pCBXoDGIgnEoMBCgZzY29wZXMYByADKAlCc5JBYDI7VGhlIHNjb3BlcyByZXF1ZXN0ZWQgYnkgWklUQURFTCBkdXJpbmcgdGhlIHJlcXVlc3QgdG8gQXBwbGVKHlsib3BlbmlkIiwgInByb2ZpbGUiLCAiZW1haWwiXaABFPpCDZIBChAUIgZyBBABGGQSMQoQcHJvdmlkZXJfb3B0aW9ucxgIIAEoCzIXLnppdGFkZWwuaWRwLnYxLk9wdGlvbnMiSQobVXBkYXRlQXBwbGVQcm92aWRlclJlc3BvbnNlEioKB2RldGFpbHMYASABKAsyGS56aXRhZGVsLnYxLk9iamVjdERldGFpbHMilQQKFkFkZFNBTUxQcm92aWRlclJlcXVlc3QSGAoEbmFtZRgBIAEoCUIK+kIHcgUQARjIARIhCgxtZXRhZGF0YV94bWwYAiABKAxCCfpCBnoEGKDCHkgAEkUKDG1ldGFkYXRhX3VybBgDIAEoCUItkkEiSiAiaHR0cHM6Ly90ZXN0LmNvbS9zYW1sL21ldGFkYXRhIvpCBXIDGMgBSAASLAoHYmluZGluZxgEIAEoDjIbLnppdGFkZWwuaWRwLnYxLlNBTUxCaW5kaW5nEhsKE3dpdGhfc2lnbmVkX3JlcXVlc3QYBSABKAgSMQoQcHJvdmlkZXJfb3B0aW9ucxgGIAEoCzIXLnppdGFkZWwuaWRwLnYxLk9wdGlvbnMSPQoObmFtZV9pZF9mb3JtYXQYByABKA4yIC56aXRhZGVsLmlkcC52MS5TQU1MTmFtZUlERm9ybWF0SAGIAQESLQogdHJhbnNpZW50X21hcHBpbmdfYXR0cmlidXRlX25hbWUYCCABKAlIAogBARIlChhmZWRlcmF0ZWRfbG9nb3V0X2VuYWJsZWQYCSABKAhIA4gBAUIPCghtZXRhZGF0YRID+EIBQhEKD19uYW1lX2lkX2Zvcm1hdEIjCiFfdHJhbnNpZW50X21hcHBpbmdfYXR0cmlidXRlX25hbWVCGwoZX2ZlZGVyYXRlZF9sb2dvdXRfZW5hYmxlZCJRChdBZGRTQU1MUHJvdmlkZXJSZXNwb25zZRIqCgdkZXRhaWxzGAEgASgLMhkueml0YWRlbC52MS5PYmplY3REZXRhaWxzEgoKAmlkGAIgASgJIrAEChlVcGRhdGVTQU1MUHJvdmlkZXJSZXF1ZXN0EhYKAmlkGAEgASgJQgr6QgdyBRABGMgBEhgKBG5hbWUYAiABKAlCCvpCB3IFEAEYyAESIQoMbWV0YWRhdGFfeG1sGAMgASgMQgn6QgZ6BBigwh5IABJFCgxtZXRhZGF0YV91cmwYBCABKAlCLZJBIkogImh0dHBzOi8vdGVzdC5jb20vc2FtbC9tZXRhZGF0YSL6QgVyAxjIAUgAEiwKB2JpbmRpbmcYBSABKA4yGy56aXRhZGVsLmlkcC52MS5TQU1MQmluZGluZxIbChN3aXRoX3NpZ25lZF9yZXF1ZXN0GAYgASgIEjEKEHByb3ZpZGVyX29wdGlvbnMYByABKAsyFy56aXRhZGVsLmlkcC52MS5PcHRpb25zEj0KDm5hbWVfaWRfZm9ybWF0GAggASgOMiAueml0YWRlbC5pZHAudjEuU0FNTE5hbWVJREZvcm1hdEgBiAEBEi0KIHRyYW5zaWVudF9tYXBwaW5nX2F0dHJpYnV0ZV9uYW1lGAkgASgJSAKIAQESJQoYZmVkZXJhdGVkX2xvZ291dF9lbmFibGVkGAogASgISAOIAQFCDwoIbWV0YWRhdGESA/hCAUIRCg9fbmFtZV9pZF9mb3JtYXRCIwohX3RyYW5zaWVudF9tYXBwaW5nX2F0dHJpYnV0ZV9uYW1lQhsKGV9mZWRlcmF0ZWRfbG9nb3V0X2VuYWJsZWQiSAoaVXBkYXRlU0FNTFByb3ZpZGVyUmVzcG9uc2USKgoHZGV0YWlscxgBIAEoCzIZLnppdGFkZWwudjEuT2JqZWN0RGV0YWlscyJCCihSZWdlbmVyYXRlU0FNTFByb3ZpZGVyQ2VydGlmaWNhdGVSZXF1ZXN0EhYKAmlkGAEgASgJQgr6QgdyBRABGMgBIlcKKVJlZ2VuZXJhdGVTQU1MUHJvdmlkZXJDZXJ0aWZpY2F0ZVJlc3BvbnNlEioKB2RldGFpbHMYASABKAsyGS56aXRhZGVsLnYxLk9iamVjdERldGFpbHMiLwoVRGVsZXRlUHJvdmlkZXJSZXF1ZXN0EhYKAmlkGAEgASgJQgr6QgdyBRABGMgBIkQKFkRlbGV0ZVByb3ZpZGVyUmVzcG9uc2USKgoHZGV0YWlscxgBIAEoCzIZLnppdGFkZWwudjEuT2JqZWN0RGV0YWlscyIYChZHZXRPcmdJQU1Qb2xpY3lSZXF1ZXN0IkoKF0dldE9yZ0lBTVBvbGljeVJlc3BvbnNlEi8KBnBvbGljeRgBIAEoCzIfLnppdGFkZWwucG9saWN5LnYxLk9yZ0lBTVBvbGljeSI+ChlVcGRhdGVPcmdJQU1Qb2xpY3lSZXF1ZXN0EiEKGXVzZXJfbG9naW5fbXVzdF9iZV9kb21haW4YASABKAgiSAoaVXBkYXRlT3JnSUFNUG9saWN5UmVzcG9uc2USKgoHZGV0YWlscxgBIAEoCzIZLnppdGFkZWwudjEuT2JqZWN0RGV0YWlscyJoChxHZXRDdXN0b21PcmdJQU1Qb2xpY3lSZXF1ZXN0EjgKBm9yZ19pZBgBIAEoCUIokkEbShMiNjk2MjkwMjM5MDY0ODgzMzQieMgBgAEB+kIHcgUQARjIAToOkkELCgnSAQZvcmdfaWQiZAodR2V0Q3VzdG9tT3JnSUFNUG9saWN5UmVzcG9uc2USLwoGcG9saWN5GAEgASgLMh8ueml0YWRlbC5wb2xpY3kudjEuT3JnSUFNUG9saWN5EhIKCmlzX2RlZmF1bHQYAiABKAgizgEKHEFkZEN1c3RvbU9yZ0lBTVBvbGljeVJlcXVlc3QSOQoGb3JnX2lkGAEgASgJQimSQRxKFCIjNjk2MjkwMjM5MDY0ODgzMzQieMgBgAEB+kIHcgUQARjIARJjChl1c2VyX2xvZ2luX211c3RfYmVfZG9tYWluGAIgASgIQkCSQT0yO3RoZSB1c2VybmFtZSBoYXMgdG8gZW5kIHdpdGggdGhlIGRvbWFpbiBvZiBpdHMgb3JnYW5pemF0aW9uOg6SQQsKCdIBBm9yZ19pZCJLCh1BZGRDdXN0b21PcmdJQU1Qb2xpY3lSZXNwb25zZRIqCgdkZXRhaWxzGAEgASgLMhkueml0YWRlbC52MS5PYmplY3REZXRhaWxzItABCh9VcGRhdGVDdXN0b21PcmdJQU1Qb2xpY3lSZXF1ZXN0EjgKBm9yZ19pZBgBIAEoCUIokkEbShMiNjk2MjkwMjM5MDY0ODgzMzQieMgBgAEB+kIHcgUQARjIARJjChl1c2VyX2xvZ2luX211c3RfYmVfZG9tYWluGAIgASgIQkCSQT0yO3RoZSB1c2VybmFtZSBoYXMgdG8gZW5kIHdpdGggdGhlIGRvbWFpbiBvZiBpdHMgb3JnYW5pemF0aW9uOg6SQQsKCdIBBm9yZ19pZCJOCiBVcGRhdGVDdXN0b21PcmdJQU1Qb2xpY3lSZXNwb25zZRIqCgdkZXRhaWxzGAEgASgLMhkueml0YWRlbC52MS5PYmplY3REZXRhaWxzInMKJ1Jlc2V0Q3VzdG9tT3JnSUFNUG9saWN5VG9EZWZhdWx0UmVxdWVzdBI4CgZvcmdfaWQYASABKAlCKJJBG0oTIjY5NjI5MDIzOTA2NDg4MzM0InjIAYABAfpCB3IFEAEYyAE6DpJBCwoJ0gEGb3JnX2lkIlYKKFJlc2V0Q3VzdG9tT3JnSUFNUG9saWN5VG9EZWZhdWx0UmVzcG9uc2USKgoHZGV0YWlscxgBIAEoCzIZLnppdGFkZWwudjEuT2JqZWN0RGV0YWlscyIYChZHZXREb21haW5Qb2xpY3lSZXF1ZXN0IkoKF0dldERvbWFpblBvbGljeVJlc3BvbnNlEi8KBnBvbGljeRgBIAEoCzIfLnppdGFkZWwucG9saWN5LnYxLkRvbWFpblBvbGljeSKRAQoZVXBkYXRlRG9tYWluUG9saWN5UmVxdWVzdBIhChl1c2VyX2xvZ2luX211c3RfYmVfZG9tYWluGAEgASgIEhwKFHZhbGlkYXRlX29yZ19kb21haW5zGAIgASgIEjMKK3NtdHBfc2VuZGVyX2FkZHJlc3NfbWF0Y2hlc19pbnN0YW5jZV9kb21haW4YAyABKAgiSAoaVXBkYXRlRG9tYWluUG9saWN5UmVzcG9uc2USKgoHZGV0YWlscxgBIAEoCzIZLnppdGFkZWwudjEuT2JqZWN0RGV0YWlscyJpChxHZXRDdXN0b21Eb21haW5Qb2xpY3lSZXF1ZXN0EjkKBm9yZ19pZBgBIAEoCUIpkkEcShQiIzY5NjI5MDIzOTA2NDg4MzM0InjIAYABAfpCB3IFEAEYyAE6DpJBCwoJ0gEGb3JnX2lkImQKHUdldEN1c3RvbURvbWFpblBvbGljeVJlc3BvbnNlEi8KBnBvbGljeRgBIAEoCzIfLnppdGFkZWwucG9saWN5LnYxLkRvbWFpblBvbGljeRISCgppc19kZWZhdWx0GAIgASgIIuEDChxBZGRDdXN0b21Eb21haW5Qb2xpY3lSZXF1ZXN0EjkKBm9yZ19pZBgBIAEoCUIpkkEcShQiIzY5NjI5MDIzOTA2NDg4MzM0InjIAYABAfpCB3IFEAEYyAESYwoZdXNlcl9sb2dpbl9tdXN0X2JlX2RvbWFpbhgCIAEoCEJAkkE9Mjt0aGUgdXNlcm5hbWUgaGFzIHRvIGVuZCB3aXRoIHRoZSBkb21haW4gb2YgaXRzIG9yZ2FuaXphdGlvbhJ7ChR2YWxpZGF0ZV9vcmdfZG9tYWlucxgDIAEoCEJdkkFaMlhkZWZpbmVzIGlmIG9yZ2FuaXphdGlvbiBkb21haW5zIHNob3VsZCBiZSB2YWxpZGF0ZWQgb3JnIGNvdW50IGFzIHZhbGlkYXRlZCBhdXRvbWF0aWNhbGx5EpMBCitzbXRwX3NlbmRlcl9hZGRyZXNzX21hdGNoZXNfaW5zdGFuY2VfZG9tYWluGAQgASgIQl6SQVsyWWRlZmluZXMgaWYgdGhlIFNNVFAgc2VuZGVyIGFkZHJlc3MgZG9tYWluIHNob3VsZCBtYXRjaCBhbiBleGlzdGluZyBkb21haW4gb24gdGhlIGluc3RhbmNlOg6SQQsKCdIBBm9yZ19pZCJLCh1BZGRDdXN0b21Eb21haW5Qb2xpY3lSZXNwb25zZRIqCgdkZXRhaWxzGAEgASgLMhkueml0YWRlbC52MS5PYmplY3REZXRhaWxzIuMDCh9VcGRhdGVDdXN0b21Eb21haW5Qb2xpY3lSZXF1ZXN0EjgKBm9yZ19pZBgBIAEoCUIokkEbShMiNjk2MjkwMjM5MDY0ODgzMzQieMgBgAEB+kIHcgUQARjIARJjChl1c2VyX2xvZ2luX211c3RfYmVfZG9tYWluGAIgASgIQkCSQT0yO3RoZSB1c2VybmFtZSBoYXMgdG8gZW5kIHdpdGggdGhlIGRvbWFpbiBvZiBpdHMgb3JnYW5pemF0aW9uEnsKFHZhbGlkYXRlX29yZ19kb21haW5zGAMgASgIQl2SQVoyWGRlZmluZXMgaWYgb3JnYW5pemF0aW9uIGRvbWFpbnMgc2hvdWxkIGJlIHZhbGlkYXRlZCBvcmcgY291bnQgYXMgdmFsaWRhdGVkIGF1dG9tYXRpY2FsbHkSkwEKK3NtdHBfc2VuZGVyX2FkZHJlc3NfbWF0Y2hlc19pbnN0YW5jZV9kb21haW4YBCABKAhCXpJBWzJZZGVmaW5lcyBpZiB0aGUgU01UUCBzZW5kZXIgYWRkcmVzcyBkb21haW4gc2hvdWxkIG1hdGNoIGFuIGV4aXN0aW5nIGRvbWFpbiBvbiB0aGUgaW5zdGFuY2U6DpJBCwoJ0gEGb3JnX2lkIk4KIFVwZGF0ZUN1c3RvbURvbWFpblBvbGljeVJlc3BvbnNlEioKB2RldGFpbHMYASABKAsyGS56aXRhZGVsLnYxLk9iamVjdERldGFpbHMicwonUmVzZXRDdXN0b21Eb21haW5Qb2xpY3lUb0RlZmF1bHRSZXF1ZXN0EjgKBm9yZ19pZBgBIAEoCUIokkEbShMiNjk2MjkwMjM5MDY0ODgzMzQieMgBgAEB+kIHcgUQARjIAToOkkELCgnSAQZvcmdfaWQiVgooUmVzZXRDdXN0b21Eb21haW5Qb2xpY3lUb0RlZmF1bHRSZXNwb25zZRIqCgdkZXRhaWxzGAEgASgLMhkueml0YWRlbC52MS5PYmplY3REZXRhaWxzIhcKFUdldExhYmVsUG9saWN5UmVxdWVzdCJIChZHZXRMYWJlbFBvbGljeVJlc3BvbnNlEi4KBnBvbGljeRgBIAEoCzIeLnppdGFkZWwucG9saWN5LnYxLkxhYmVsUG9saWN5Ih4KHEdldFByZXZpZXdMYWJlbFBvbGljeVJlcXVlc3QiTwodR2V0UHJldmlld0xhYmVsUG9saWN5UmVzcG9uc2USLgoGcG9saWN5GAEgASgLMh4ueml0YWRlbC5wb2xpY3kudjEuTGFiZWxQb2xpY3ki6QcKGFVwZGF0ZUxhYmVsUG9saWN5UmVxdWVzdBJJCg1wcmltYXJ5X2NvbG9yGAEgASgJQjKSQSgyGXJlcHJlc2VudHMgYSBjb2xvciBzY2hlbWVKCSIjMzUzNTM1Ingy+kIEcgIYMhKRAQoWaGlkZV9sb2dpbl9uYW1lX3N1ZmZpeBgDIAEoCEJxkkFuMmxoaWRlcyB0aGUgb3JnIHN1ZmZpeCBvbiB0aGUgbG9naW4gZm9ybSBpZiB0aGUgc2NvcGUgInVybjp6aXRhZGVsOmlhbTpvcmc6ZG9tYWluOnByaW1hcnk6e2RvbWFpbm5hbWV9IiBpcyBzZXQSRQoKd2Fybl9jb2xvchgEIAEoCUIxkkEnMhhoZXggdmFsdWUgZm9yIHdhcm4gY29sb3JKCSIjQ0QzRDU2Ingy+kIEcgIYMhJRChBiYWNrZ3JvdW5kX2NvbG9yGAUgASgJQjeSQS0yHmhleCB2YWx1ZSBmb3IgYmFja2dyb3VuZCBjb2xvckoJIiNGQUZBRkEieDL6QgRyAhgyEkUKCmZvbnRfY29sb3IYBiABKAlCMZJBJzIYaGV4IHZhbHVlIGZvciBmb250IGNvbG9ySgkiIzAwMDAwMCJ4MvpCBHICGDISXwoScHJpbWFyeV9jb2xvcl9kYXJrGAcgASgJQkOSQTkyKmhleCB2YWx1ZSBmb3IgdGhlIHByaW1hcnkgY29sb3IgZGFyayB0aGVtZUoJIiNCQkJBRkEieDL6QgRyAhgyEmEKFWJhY2tncm91bmRfY29sb3JfZGFyaxgIIAEoCUJCkkE4MiloZXggdmFsdWUgZm9yIGJhY2tncm91bmQgY29sb3IgZGFyayB0aGVtZUoJIiMxMTE4MjcieDL6QgRyAhgyElgKD3dhcm5fY29sb3JfZGFyaxgJIAEoCUI/kkE1MiZoZXggdmFsdWUgZm9yIHdhcm5pbmcgY29sb3IgZGFyayB0aGVtZUoJIiNGRjNCNUIieDL6QgRyAhgyElUKD2ZvbnRfY29sb3JfZGFyaxgKIAEoCUI8kkEyMiNoZXggdmFsdWUgZm9yIGZvbnQgY29sb3IgZGFyayB0aGVtZUoJIiNGRkZGRkYieDL6QgRyAhgyEhkKEWRpc2FibGVfd2F0ZXJtYXJrGAsgASgIEn0KCnRoZW1lX21vZGUYDCABKA4yHC56aXRhZGVsLnBvbGljeS52MS5UaGVtZU1vZGVCS5JBSDJGc2V0dGluZyBpZiB0aGVyZSBzaG91bGQgYmUgYSByZXN0cmljdGlvbiBvbiB3aGljaCB0aGVtZXMgYXJlIGF2YWlsYWJsZSJHChlVcGRhdGVMYWJlbFBvbGljeVJlc3BvbnNlEioKB2RldGFpbHMYASABKAsyGS56aXRhZGVsLnYxLk9iamVjdERldGFpbHMiHAoaQWN0aXZhdGVMYWJlbFBvbGljeVJlcXVlc3QiSQobQWN0aXZhdGVMYWJlbFBvbGljeVJlc3BvbnNlEioKB2RldGFpbHMYASABKAsyGS56aXRhZGVsLnYxLk9iamVjdERldGFpbHMiHgocUmVtb3ZlTGFiZWxQb2xpY3lMb2dvUmVxdWVzdCJLCh1SZW1vdmVMYWJlbFBvbGljeUxvZ29SZXNwb25zZRIqCgdkZXRhaWxzGAEgASgLMhkueml0YWRlbC52MS5PYmplY3REZXRhaWxzIiIKIFJlbW92ZUxhYmVsUG9saWN5TG9nb0RhcmtSZXF1ZXN0Ik8KIVJlbW92ZUxhYmVsUG9saWN5TG9nb0RhcmtSZXNwb25zZRIqCgdkZXRhaWxzGAEgASgLMhkueml0YWRlbC52MS5PYmplY3REZXRhaWxzIh4KHFJlbW92ZUxhYmVsUG9saWN5SWNvblJlcXVlc3QiSwodUmVtb3ZlTGFiZWxQb2xpY3lJY29uUmVzcG9uc2USKgoHZGV0YWlscxgBIAEoCzIZLnppdGFkZWwudjEuT2JqZWN0RGV0YWlscyIiCiBSZW1vdmVMYWJlbFBvbGljeUljb25EYXJrUmVxdWVzdCJPCiFSZW1vdmVMYWJlbFBvbGljeUljb25EYXJrUmVzcG9uc2USKgoHZGV0YWlscxgBIAEoCzIZLnppdGFkZWwudjEuT2JqZWN0RGV0YWlscyIeChxSZW1vdmVMYWJlbFBvbGljeUZvbnRSZXF1ZXN0IksKHVJlbW92ZUxhYmVsUG9saWN5Rm9udFJlc3BvbnNlEioKB2RldGFpbHMYASABKAsyGS56aXRhZGVsLnYxLk9iamVjdERldGFpbHMiFwoVR2V0TG9naW5Qb2xpY3lSZXF1ZXN0IkgKFkdldExvZ2luUG9saWN5UmVzcG9uc2USLgoGcG9saWN5GAEgASgLMh4ueml0YWRlbC5wb2xpY3kudjEuTG9naW5Qb2xpY3kiqQ8KGFVwZGF0ZUxvZ2luUG9saWN5UmVxdWVzdBJnChdhbGxvd191c2VybmFtZV9wYXNzd29yZBgBIAEoCEJGkkFDMkFkZWZpbmVzIGlmIGEgdXNlciBpcyBhbGxvd2VkIHRvIGxvZyBpbiB3aXRoIHVzZXJuYW1lIGFuZCBwYXNzd29yZBJjCg5hbGxvd19yZWdpc3RlchgCIAEoCEJLkkFIMkZkZWZpbmVzIGlmIGEgcGVyc29uIGlzIGFsbG93ZWQgdG8gcmVnaXN0ZXIgYSB1c2VyIG9uIHRoaXMgb3JnYW5pemF0aW9uEnIKEmFsbG93X2V4dGVybmFsX2lkcBgDIAEoCEJWkkFTMlFkZWZpbmVzIGlmIGEgdXNlciBpcyBhbGxvd2VkIHRvIGFkZCBhIGRlZmluZWQgaWRlbnRpdHkgcHJvdmlkZXIuIEUuZy4gR29vZ2xlIGF1dGgSSwoJZm9yY2VfbWZhGAQgASgIQjiSQTUyM2RlZmluZXMgaWYgYSB1c2VyIE1VU1QgdXNlIGEgbXVsdGktZmFjdG9yIHRvIGxvZyBpbhJ5ChFwYXNzd29yZGxlc3NfdHlwZRgFIAEoDjIjLnppdGFkZWwucG9saWN5LnYxLlBhc3N3b3JkbGVzc1R5cGVCOZJBLjIsZGVmaW5lcyBpZiBwYXNzd29yZGxlc3MgaXMgYWxsb3dlZCBmb3IgdXNlcnP6QgWCAQIQARJkChNoaWRlX3Bhc3N3b3JkX3Jlc2V0GAYgASgIQkeSQUQyQmRlZmluZXMgaWYgcGFzc3dvcmQgcmVzZXQgbGluayBzaG91bGQgYmUgc2hvd24gaW4gdGhlIGxvZ2luIHNjcmVlbhKTAQoYaWdub3JlX3Vua25vd25fdXNlcm5hbWVzGAcgASgIQnGSQW4ybGRlZmluZXMgaWYgdW5rbm93biB1c2VybmFtZSBvbiBsb2dpbiBzY3JlZW4gZGlyZWN0bHkgcmV0dXJucyBhbiBlcnJvciBvciBhbHdheXMgZGlzcGxheXMgdGhlIHBhc3N3b3JkIHNjcmVlbhKMAQoUZGVmYXVsdF9yZWRpcmVjdF91cmkYCCABKAlCbpJBazJpZGVmaW5lcyB3aGVyZSB0aGUgdXNlciB3aWxsIGJlIHJlZGlyZWN0ZWQgdG8gaWYgdGhlIGxvZ2luIGlzIHN0YXJ0ZWQgd2l0aG91dCBhcHAgY29udGV4dCAoZS5nLiBmcm9tIG1haWwpEjoKF3Bhc3N3b3JkX2NoZWNrX2xpZmV0aW1lGAkgASgLMhkuZ29vZ2xlLnByb3RvYnVmLkR1cmF0aW9uEkAKHWV4dGVybmFsX2xvZ2luX2NoZWNrX2xpZmV0aW1lGAogASgLMhkuZ29vZ2xlLnByb3RvYnVmLkR1cmF0aW9uEjkKFm1mYV9pbml0X3NraXBfbGlmZXRpbWUYCyABKAsyGS5nb29nbGUucHJvdG9idWYuRHVyYXRpb24SPwocc2Vjb25kX2ZhY3Rvcl9jaGVja19saWZldGltZRgMIAEoCzIZLmdvb2dsZS5wcm90b2J1Zi5EdXJhdGlvbhI+ChttdWx0aV9mYWN0b3JfY2hlY2tfbGlmZXRpbWUYDSABKAsyGS5nb29nbGUucHJvdG9idWYuRHVyYXRpb24S8AEKFmFsbG93X2RvbWFpbl9kaXNjb3ZlcnkYDiABKAhCzwGSQcsBMsgBSWYgc2V0IHRvIHRydWUsIHRoZSBzdWZmaXggKEBkb21haW4uY29tKSBvZiBhbiB1bmtub3duIHVzZXJuYW1lIGlucHV0IG9uIHRoZSBsb2dpbiBzY3JlZW4gd2lsbCBiZSBtYXRjaGVkIGFnYWluc3QgdGhlIG9yZyBkb21haW5zIGFuZCB3aWxsIHJlZGlyZWN0IHRvIHRoZSByZWdpc3RyYXRpb24gb2YgdGhhdCBvcmdhbml6YXRpb24gb24gc3VjY2Vzcy4SjQEKGGRpc2FibGVfbG9naW5fd2l0aF9lbWFpbBgPIAEoCEJrkkFoMmZkZWZpbmVzIGlmIHRoZSB1c2VyIGNhbiBhZGRpdGlvbmFsbHkgKHRvIHRoZSBsb2dpbiBuYW1lKSBiZSBpZGVudGlmaWVkIGJ5IHRoZWlyIHZlcmlmaWVkIGVtYWlsIGFkZHJlc3MSjAEKGGRpc2FibGVfbG9naW5fd2l0aF9waG9uZRgQIAEoCEJqkkFnMmVkZWZpbmVzIGlmIHRoZSB1c2VyIGNhbiBhZGRpdGlvbmFsbHkgKHRvIHRoZSBsb2dpbiBuYW1lKSBiZSBpZGVudGlmaWVkIGJ5IHRoZWlyIHZlcmlmaWVkIHBob25lIG51bWJlchKrAQoUZm9yY2VfbWZhX2xvY2FsX29ubHkYESABKAhCjAGSQYgBMoUBaWYgYWN0aXZhdGVkLCBvbmx5IGxvY2FsIGF1dGhlbnRpY2F0ZWQgdXNlcnMgYXJlIGZvcmNlZCB0byB1c2UgTUZBLiBBdXRoZW50aWNhdGlvbiB0aHJvdWdoIElEUHMgd29uJ3QgcHJvbXB0IGEgTUZBIHN0ZXAgaW4gdGhlIGxvZ2luLiJHChlVcGRhdGVMb2dpblBvbGljeVJlc3BvbnNlEioKB2RldGFpbHMYASABKAsyGS56aXRhZGVsLnYxLk9iamVjdERldGFpbHMiQgoaTGlzdExvZ2luUG9saWN5SURQc1JlcXVlc3QSJAoFcXVlcnkYASABKAsyFS56aXRhZGVsLnYxLkxpc3RRdWVyeSJ7ChtMaXN0TG9naW5Qb2xpY3lJRFBzUmVzcG9uc2USKAoHZGV0YWlscxgBIAEoCzIXLnppdGFkZWwudjEuTGlzdERldGFpbHMSMgoGcmVzdWx0GAIgAygLMiIueml0YWRlbC5pZHAudjEuSURQTG9naW5Qb2xpY3lMaW5rIpIBChpBZGRJRFBUb0xvZ2luUG9saWN5UmVxdWVzdBJkCgZpZHBfaWQYASABKAlCVJJBQzImSWQgb2YgdGhlIHByZWRlZmluZWQgaWRwIGNvbmZpZ3VyYXRpb25KEyI2OTYyOTAyMzkwNjQ4ODMzNCJ4yAGAAQHiQQEC+kIHcgUQARjIAToOkkELCgnSAQZvcmdfaWQiSQobQWRkSURQVG9Mb2dpblBvbGljeVJlc3BvbnNlEioKB2RldGFpbHMYASABKAsyGS56aXRhZGVsLnYxLk9iamVjdERldGFpbHMiawofUmVtb3ZlSURQRnJvbUxvZ2luUG9saWN5UmVxdWVzdBI4CgZpZHBfaWQYASABKAlCKJJBG0oTIjY5NjI5MDIzOTA2NDg4MzM0InjIAYABAfpCB3IFEAEYyAE6DpJBCwoJ0gEGaWRwX2lkIk4KIFJlbW92ZUlEUEZyb21Mb2dpblBvbGljeVJlc3BvbnNlEioKB2RldGFpbHMYASABKAsyGS56aXRhZGVsLnYxLk9iamVjdERldGFpbHMiJQojTGlzdExvZ2luUG9saWN5U2Vjb25kRmFjdG9yc1JlcXVlc3QihQEKJExpc3RMb2dpblBvbGljeVNlY29uZEZhY3RvcnNSZXNwb25zZRIoCgdkZXRhaWxzGAEgASgLMhcueml0YWRlbC52MS5MaXN0RGV0YWlscxIzCgZyZXN1bHQYAiADKA4yIy56aXRhZGVsLnBvbGljeS52MS5TZWNvbmRGYWN0b3JUeXBlInIKI0FkZFNlY29uZEZhY3RvclRvTG9naW5Qb2xpY3lSZXF1ZXN0Ej0KBHR5cGUYASABKA4yIy56aXRhZGVsLnBvbGljeS52MS5TZWNvbmRGYWN0b3JUeXBlQgr6QgeCAQQQASAAOgySQQkKB9IBBHR5cGUiUgokQWRkU2Vjb25kRmFjdG9yVG9Mb2dpblBvbGljeVJlc3BvbnNlEioKB2RldGFpbHMYASABKAsyGS56aXRhZGVsLnYxLk9iamVjdERldGFpbHMidwooUmVtb3ZlU2Vjb25kRmFjdG9yRnJvbUxvZ2luUG9saWN5UmVxdWVzdBI9CgR0eXBlGAEgASgOMiMueml0YWRlbC5wb2xpY3kudjEuU2Vjb25kRmFjdG9yVHlwZUIK+kIHggEEEAEgADoMkkEJCgfSAQR0eXBlIlcKKVJlbW92ZVNlY29uZEZhY3RvckZyb21Mb2dpblBvbGljeVJlc3BvbnNlEioKB2RldGFpbHMYASABKAsyGS56aXRhZGVsLnYxLk9iamVjdERldGFpbHMiJAoiTGlzdExvZ2luUG9saWN5TXVsdGlGYWN0b3JzUmVxdWVzdCKDAQojTGlzdExvZ2luUG9saWN5TXVsdGlGYWN0b3JzUmVzcG9uc2USKAoHZGV0YWlscxgBIAEoCzIXLnppdGFkZWwudjEuTGlzdERldGFpbHMSMgoGcmVzdWx0GAIgAygOMiIueml0YWRlbC5wb2xpY3kudjEuTXVsdGlGYWN0b3JUeXBlInAKIkFkZE11bHRpRmFjdG9yVG9Mb2dpblBvbGljeVJlcXVlc3QSPAoEdHlwZRgBIAEoDjIiLnppdGFkZWwucG9saWN5LnYxLk11bHRpRmFjdG9yVHlwZUIK+kIHggEEEAEgADoMkkEJCgfSAQR0eXBlIlEKI0FkZE11bHRpRmFjdG9yVG9Mb2dpblBvbGljeVJlc3BvbnNlEioKB2RldGFpbHMYASABKAsyGS56aXRhZGVsLnYxLk9iamVjdERldGFpbHMidQonUmVtb3ZlTXVsdGlGYWN0b3JGcm9tTG9naW5Qb2xpY3lSZXF1ZXN0EjwKBHR5cGUYASABKA4yIi56aXRhZGVsLnBvbGljeS52MS5NdWx0aUZhY3RvclR5cGVCCvpCB4IBBBABIAA6DJJBCQoH0gEEdHlwZSJWCihSZW1vdmVNdWx0aUZhY3RvckZyb21Mb2dpblBvbGljeVJlc3BvbnNlEioKB2RldGFpbHMYASABKAsyGS56aXRhZGVsLnYxLk9iamVjdERldGFpbHMiJAoiR2V0UGFzc3dvcmRDb21wbGV4aXR5UG9saWN5UmVxdWVzdCJiCiNHZXRQYXNzd29yZENvbXBsZXhpdHlQb2xpY3lSZXNwb25zZRI7CgZwb2xpY3kYASABKAsyKy56aXRhZGVsLnBvbGljeS52MS5QYXNzd29yZENvbXBsZXhpdHlQb2xpY3kiiwMKJVVwZGF0ZVBhc3N3b3JkQ29tcGxleGl0eVBvbGljeVJlcXVlc3QSHAoKbWluX2xlbmd0aBgBIAEoDUIIkkEFSgMiOCISVQoNaGFzX3VwcGVyY2FzZRgCIAEoCEI+kkE7MjlEZWZpbmVzIGlmIHRoZSBwYXNzd29yZCBNVVNUIGNvbnRhaW4gYW4gdXBwZXIgY2FzZSBsZXR0ZXISUwoNaGFzX2xvd2VyY2FzZRgDIAEoCEI8kkE5MjdEZWZpbmVzIGlmIHRoZSBwYXNzd29yZCBNVVNUIGNvbnRhaW4gYSBsb3dlcmNhc2UgbGV0dGVyEkYKCmhhc19udW1iZXIYBCABKAhCMpJBLzItRGVmaW5lcyBpZiB0aGUgcGFzc3dvcmQgTVVTVCBjb250YWluIGEgbnVtYmVyElAKCmhhc19zeW1ib2wYBSABKAhCPJJBOTI3RGVmaW5lcyBpZiB0aGUgcGFzc3dvcmQgTVVTVCBjb250YWluIGEgc3ltYm9sLiBFLmcuICIkIiJUCiZVcGRhdGVQYXNzd29yZENvbXBsZXhpdHlQb2xpY3lSZXNwb25zZRIqCgdkZXRhaWxzGAEgASgLMhkueml0YWRlbC52MS5PYmplY3REZXRhaWxzIh0KG0dldFBhc3N3b3JkQWdlUG9saWN5UmVxdWVzdCJUChxHZXRQYXNzd29yZEFnZVBvbGljeVJlc3BvbnNlEjQKBnBvbGljeRgBIAEoCzIkLnppdGFkZWwucG9saWN5LnYxLlBhc3N3b3JkQWdlUG9saWN5IlAKHlVwZGF0ZVBhc3N3b3JkQWdlUG9saWN5UmVxdWVzdBIUCgxtYXhfYWdlX2RheXMYASABKA0SGAoQZXhwaXJlX3dhcm5fZGF5cxgCIAEoDSJNCh9VcGRhdGVQYXNzd29yZEFnZVBvbGljeVJlc3BvbnNlEioKB2RldGFpbHMYASABKAsyGS56aXRhZGVsLnYxLk9iamVjdERldGFpbHMiGQoXR2V0TG9ja291dFBvbGljeVJlcXVlc3QiTAoYR2V0TG9ja291dFBvbGljeVJlc3BvbnNlEjAKBnBvbGljeRgBIAEoCzIgLnppdGFkZWwucG9saWN5LnYxLkxvY2tvdXRQb2xpY3ki2gMKGlVwZGF0ZUxvY2tvdXRQb2xpY3lSZXF1ZXN0EsYBChVtYXhfcGFzc3dvcmRfYXR0ZW1wdHMYASABKA1CpgGSQaIBMpkBTWF4aW11bSBwYXNzd29yZCBjaGVjayBhdHRlbXB0cyBiZWZvcmUgdGhlIGFjY291bnQgZ2V0cyBsb2NrZWQuIEF0dGVtcHRzIGFyZSByZXNldCBhcyBzb29uIGFzIHRoZSBwYXNzd29yZCBpcyBlbnRlcmVkIGNvcnJlY3RseSBvciB0aGUgcGFzc3dvcmQgaXMgcmVzZXQuSgQiMTAiEvIBChBtYXhfb3RwX2F0dGVtcHRzGAIgASgNQtcBkkHTATLKAU1heGltdW0gZmFpbGVkIGF0dGVtcHRzIGZvciBhIHNpbmdsZSBPVFAgdHlwZSAoVE9UUCwgU01TLCBFbWFpbCkgYmVmb3JlIHRoZSBhY2NvdW50IGdldHMgbG9ja2VkLiBBdHRlbXB0cyBhcmUgcmVzZXQgYXMgc29vbiBhcyB0aGUgT1RQIGlzIGVudGVyZWQgY29ycmVjdGx5LiBJZiBzZXQgdG8gMCB0aGUgYWNjb3VudCB3aWxsIG5ldmVyIGJlIGxvY2tlZC5KBCIxMCIiSQobVXBkYXRlTG9ja291dFBvbGljeVJlc3BvbnNlEioKB2RldGFpbHMYASABKAsyGS56aXRhZGVsLnYxLk9iamVjdERldGFpbHMiGQoXR2V0UHJpdmFjeVBvbGljeVJlcXVlc3QiTAoYR2V0UHJpdmFjeVBvbGljeVJlc3BvbnNlEjAKBnBvbGljeRgBIAEoCzIgLnppdGFkZWwucG9saWN5LnYxLlByaXZhY3lQb2xpY3kihgUKGlVwZGF0ZVByaXZhY3lQb2xpY3lSZXF1ZXN0EkgKCHRvc19saW5rGAEgASgJQjaSQTNKMSJodHRwczovL3ppdGFkZWwuY29tL2RvY3MvbGVnYWwvdGVybXMtb2Ytc2VydmljZSISSgoMcHJpdmFjeV9saW5rGAIgASgJQjSSQTFKLyJodHRwczovL3ppdGFkZWwuY29tL2RvY3MvbGVnYWwvcHJpdmFjeS1wb2xpY3kiEkcKCWhlbHBfbGluaxgDIAEoCUI0kkExSi8iaHR0cHM6Ly96aXRhZGVsLmNvbS9kb2NzL21hbnVhbHMvaW50cm9kdWN0aW9uIhJgCg1zdXBwb3J0X2VtYWlsGAQgASgJQkmSQTkyHWhlbHAgLyBzdXBwb3J0IGVtYWlsIGFkZHJlc3MuShgic3VwcG9ydC1lbWFpbEB0ZXN0LmNvbSL6QgpyCBjAAtABAWABEjIKCWRvY3NfbGluaxgFIAEoCUIfkkEcShoiaHR0cHM6Ly96aXRhZGVsLmNvbS9kb2NzIhJ/CgtjdXN0b21fbGluaxgGIAEoCUJqkkFnMkxMaW5rIHRvIGFuIGV4dGVybmFsIHJlc291cmNlIHRoYXQgd2lsbCBiZSBhdmFpbGFibGUgdG8gdXNlcnMgaW4gdGhlIGNvbnNvbGUuShciaHR0cHM6Ly9leHRlcm5hbC5saW5rIhJyChBjdXN0b21fbGlua190ZXh0GAcgASgJQliSQVUyR1RoZSBidXR0b24gdGV4dCB0aGF0IHdvdWxkIGJlIHNob3duIGluIGNvbnNvbGUgcG9pbnRpbmcgdG8gY3VzdG9tIGxpbmsuSgoiRXh0ZXJuYWwiIkkKG1VwZGF0ZVByaXZhY3lQb2xpY3lSZXNwb25zZRIqCgdkZXRhaWxzGAEgASgLMhkueml0YWRlbC52MS5PYmplY3REZXRhaWxzIpgBChxBZGROb3RpZmljYXRpb25Qb2xpY3lSZXF1ZXN0EngKD3Bhc3N3b3JkX2NoYW5nZRgBIAEoCEJfkkFcMlpJZiBzZXQgdG8gdHJ1ZSB0aGUgdXNlcnMgd2lsbCBnZXQgYSBub3RpZmljYXRpb24gd2hlbmV2ZXIgdGhlaXIgcGFzc3dvcmQgaGFzIGJlZW4gY2hhbmdlZC4iSwodQWRkTm90aWZpY2F0aW9uUG9saWN5UmVzcG9uc2USKgoHZGV0YWlscxgBIAEoCzIZLnppdGFkZWwudjEuT2JqZWN0RGV0YWlscyIeChxHZXROb3RpZmljYXRpb25Qb2xpY3lSZXF1ZXN0IlYKHUdldE5vdGlmaWNhdGlvblBvbGljeVJlc3BvbnNlEjUKBnBvbGljeRgBIAEoCzIlLnppdGFkZWwucG9saWN5LnYxLk5vdGlmaWNhdGlvblBvbGljeSKbAQofVXBkYXRlTm90aWZpY2F0aW9uUG9saWN5UmVxdWVzdBJ4Cg9wYXNzd29yZF9jaGFuZ2UYASABKAhCX5JBXDJaSWYgc2V0IHRvIHRydWUgdGhlIHVzZXJzIHdpbGwgZ2V0IGEgbm90aWZpY2F0aW9uIHdoZW5ldmVyIHRoZWlyIHBhc3N3b3JkIGhhcyBiZWVuIGNoYW5nZWQuIk4KIFVwZGF0ZU5vdGlmaWNhdGlvblBvbGljeVJlc3BvbnNlEioKB2RldGFpbHMYASABKAsyGS56aXRhZGVsLnYxLk9iamVjdERldGFpbHMiQAogR2V0RGVmYXVsdEluaXRNZXNzYWdlVGV4dFJlcXVlc3QSHAoIbGFuZ3VhZ2UYASABKAlCCvpCB3IFEAEYyAEiXAohR2V0RGVmYXVsdEluaXRNZXNzYWdlVGV4dFJlc3BvbnNlEjcKC2N1c3RvbV90ZXh0GAEgASgLMiIueml0YWRlbC50ZXh0LnYxLk1lc3NhZ2VDdXN0b21UZXh0Ij8KH0dldEN1c3RvbUluaXRNZXNzYWdlVGV4dFJlcXVlc3QSHAoIbGFuZ3VhZ2UYASABKAlCCvpCB3IFEAEYyAEiWwogR2V0Q3VzdG9tSW5pdE1lc3NhZ2VUZXh0UmVzcG9uc2USNwoLY3VzdG9tX3RleHQYASABKAsyIi56aXRhZGVsLnRleHQudjEuTWVzc2FnZUN1c3RvbVRleHQipAUKIFNldERlZmF1bHRJbml0TWVzc2FnZVRleHRSZXF1ZXN0Ei8KCGxhbmd1YWdlGAEgASgJQh2SQQxKBCJkZSJ4yAGAAQHiQQEC+kIHcgUQARjIARI6CgV0aXRsZRgCIAEoCUIrkkEgShsiWklUQURFTCAtIEluaXRpYWxpemUgVXNlciJ49AP6QgVyAyjQDxI1CgpwcmVfaGVhZGVyGAMgASgJQiGSQRZKESJJbml0aWFsaXplIFVzZXIiePQD+kIFcgMo0A8SMgoHc3ViamVjdBgEIAEoCUIhkkEWShEiSW5pdGlhbGl6ZSBVc2VyInj0A/pCBXIDKNAPEkcKCGdyZWV0aW5nGAUgASgJQjWSQSpKJSJIZWxsbyB7ey5GaXJzdE5hbWV9fSB7ey5MYXN0TmFtZX19LCJ46Af6QgVyAyigHxKBAgoEdGV4dBgGIAEoCULyAZJB5QFK3wEiVGhpcyB1c2VyIHdhcyBjcmVhdGVkIGluIFppdGFkZWwuIFVzZSB0aGUgdXNlcm5hbWUge3suUHJlZmVycmVkTG9naW5OYW1lfX0gdG8gbG9nIGluLiBQbGVhc2UgY2xpY2sgdGhlIGJ1dHRvbiBiZWxvdyB0byBmaW5pc2ggdGhlIGluaXRpYWxpemF0aW9uIHByb2Nlc3MuIChDb2RlIHt7LkNvZGV9fSkgSWYgeW91IGRpZG4ndCBhc2sgZm9yIHRoaXMgbWFpbCwgcGxlYXNlIGlnbm9yZSBpdC4ieJBO+kIGcgQowLgCEjwKC2J1dHRvbl90ZXh0GAcgASgJQieSQRxKFyJGaW5pc2ggaW5pdGlhbGl6YXRpb24ieOgH+kIFcgMooB8SHQoLZm9vdGVyX3RleHQYCCABKAlCCPpCBXIDKMA+Ik8KIVNldERlZmF1bHRJbml0TWVzc2FnZVRleHRSZXNwb25zZRIqCgdkZXRhaWxzGAEgASgLMhkueml0YWRlbC52MS5PYmplY3REZXRhaWxzIkoKKlJlc2V0Q3VzdG9tSW5pdE1lc3NhZ2VUZXh0VG9EZWZhdWx0UmVxdWVzdBIcCghsYW5ndWFnZRgBIAEoCUIK+kIHcgUQARjIASJZCitSZXNldEN1c3RvbUluaXRNZXNzYWdlVGV4dFRvRGVmYXVsdFJlc3BvbnNlEioKB2RldGFpbHMYASABKAsyGS56aXRhZGVsLnYxLk9iamVjdERldGFpbHMiSQopR2V0RGVmYXVsdFBhc3N3b3JkUmVzZXRNZXNzYWdlVGV4dFJlcXVlc3QSHAoIbGFuZ3VhZ2UYASABKAlCCvpCB3IFEAEYyAEiZQoqR2V0RGVmYXVsdFBhc3N3b3JkUmVzZXRNZXNzYWdlVGV4dFJlc3BvbnNlEjcKC2N1c3RvbV90ZXh0GAEgASgLMiIueml0YWRlbC50ZXh0LnYxLk1lc3NhZ2VDdXN0b21UZXh0IkgKKEdldEN1c3RvbVBhc3N3b3JkUmVzZXRNZXNzYWdlVGV4dFJlcXVlc3QSHAoIbGFuZ3VhZ2UYASABKAlCCvpCB3IFEAEYyAEiZAopR2V0Q3VzdG9tUGFzc3dvcmRSZXNldE1lc3NhZ2VUZXh0UmVzcG9uc2USNwoLY3VzdG9tX3RleHQYASABKAsyIi56aXRhZGVsLnRleHQudjEuTWVzc2FnZUN1c3RvbVRleHQi4wQKKVNldERlZmF1bHRQYXNzd29yZFJlc2V0TWVzc2FnZVRleHRSZXF1ZXN0Ei8KCGxhbmd1YWdlGAEgASgJQh2SQQxKBCJkZSJ4yAGAAQHiQQEC+kIHcgUQARjIARI5CgV0aXRsZRgCIAEoCUIqkkEfShoiWklUQURFTCAtIFJlc2V0IFBhc3N3b3JkInj0A/pCBXIDKNAPEjQKCnByZV9oZWFkZXIYAyABKAlCIJJBFUoQIlJlc2V0IFBhc3N3b3JkInj0A/pCBXIDKNAPEjEKB3N1YmplY3QYBCABKAlCIJJBFUoQIlJlc2V0IFBhc3N3b3JkInj0A/pCBXIDKNAPEkcKCGdyZWV0aW5nGAUgASgJQjWSQSpKJSJIZWxsbyB7ey5GaXJzdE5hbWV9fSB7ey5MYXN0TmFtZX19LCJ46Af6QgVyAyigHxLBAQoEdGV4dBgGIAEoCUKyAZJBpQFKnwEiV2UgcmVjZWl2ZWQgYSBwYXNzd29yZCByZXNldCByZXF1ZXN0LiBQbGVhc2UgdXNlIHRoZSBidXR0b24gYmVsb3cgdG8gcmVzZXQgeW91ciBwYXNzd29yZC4gKENvZGUge3suQ29kZX19KSBJZiB5b3UgZGlkbid0IGFzayBmb3IgdGhpcyBtYWlsLCBwbGVhc2UgaWdub3JlIGl0LiJ4kE76QgZyBCjAuAISNQoLYnV0dG9uX3RleHQYByABKAlCIJJBFUoQIlJlc2V0IFBhc3N3b3JkInj0A/pCBXIDKKAfEh0KC2Zvb3Rlcl90ZXh0GAggASgJQgj6QgVyAyjAPiJYCipTZXREZWZhdWx0UGFzc3dvcmRSZXNldE1lc3NhZ2VUZXh0UmVzcG9uc2USKgoHZGV0YWlscxgBIAEoCzIZLnppdGFkZWwudjEuT2JqZWN0RGV0YWlscyJTCjNSZXNldEN1c3RvbVBhc3N3b3JkUmVzZXRNZXNzYWdlVGV4dFRvRGVmYXVsdFJlcXVlc3QSHAoIbGFuZ3VhZ2UYASABKAlCCvpCB3IFEAEYyAEiYgo0UmVzZXRDdXN0b21QYXNzd29yZFJlc2V0TWVzc2FnZVRleHRUb0RlZmF1bHRSZXNwb25zZRIqCgdkZXRhaWxzGAEgASgLMhkueml0YWRlbC52MS5PYmplY3REZXRhaWxzIkcKJ0dldERlZmF1bHRWZXJpZnlFbWFpbE1lc3NhZ2VUZXh0UmVxdWVzdBIcCghsYW5ndWFnZRgBIAEoCUIK+kIHcgUQARjIASJjCihHZXREZWZhdWx0VmVyaWZ5RW1haWxNZXNzYWdlVGV4dFJlc3BvbnNlEjcKC2N1c3RvbV90ZXh0GAEgASgLMiIueml0YWRlbC50ZXh0LnYxLk1lc3NhZ2VDdXN0b21UZXh0IkYKJkdldEN1c3RvbVZlcmlmeUVtYWlsTWVzc2FnZVRleHRSZXF1ZXN0EhwKCGxhbmd1YWdlGAEgASgJQgr6QgdyBRABGMgBImIKJ0dldEN1c3RvbVZlcmlmeUVtYWlsTWVzc2FnZVRleHRSZXNwb25zZRI3CgtjdXN0b21fdGV4dBgBIAEoCzIiLnppdGFkZWwudGV4dC52MS5NZXNzYWdlQ3VzdG9tVGV4dCLTBAonU2V0RGVmYXVsdFZlcmlmeUVtYWlsTWVzc2FnZVRleHRSZXF1ZXN0Ei8KCGxhbmd1YWdlGAEgASgJQh2SQQxKBCJkZSJ4yAGAAQHiQQEC+kIHcgUQARjIARI3CgV0aXRsZRgCIAEoCUIokkEdShgiWklUQURFTCAtIFZlcmlmeSBFbWFpbCJ49AP6QgVyAyjQDxIyCgpwcmVfaGVhZGVyGAMgASgJQh6SQRNKDiJWZXJpZnkgRW1haWwiePQD+kIFcgMo0A8SLwoHc3ViamVjdBgEIAEoCUIekkETSg4iVmVyaWZ5IEVtYWlsInj0A/pCBXIDKNAPEkcKCGdyZWV0aW5nGAUgASgJQjWSQSpKJSJIZWxsbyB7ey5GaXJzdE5hbWV9fSB7ey5MYXN0TmFtZX19LCJ46Af6QgVyAyigHxK7AQoEdGV4dBgGIAEoCUKsAZJBnwFKmQEiQSBuZXcgZW1haWwgaGFzIGJlZW4gYWRkZWQuIFBsZWFzZSB1c2UgdGhlIGJ1dHRvbiBiZWxvdyB0byB2ZXJpZnkgeW91ciBlbWFpbC4gKENvZGUge3suQ29kZX19KSBJZiB5b3UgZGlkbid0IGFkZCBhIG5ldyBlbWFpbCwgcGxlYXNlIGlnbm9yZSB0aGlzIGVtYWlsLiJ4kE76QgZyBCjAuAISMwoLYnV0dG9uX3RleHQYByABKAlCHpJBE0oOIlZlcmlmeSBFbWFpbCJ46Af6QgVyAyigHxIdCgtmb290ZXJfdGV4dBgIIAEoCUII+kIFcgMowD4iVgooU2V0RGVmYXVsdFZlcmlmeUVtYWlsTWVzc2FnZVRleHRSZXNwb25zZRIqCgdkZXRhaWxzGAEgASgLMhkueml0YWRlbC52MS5PYmplY3REZXRhaWxzIlEKMVJlc2V0Q3VzdG9tVmVyaWZ5RW1haWxNZXNzYWdlVGV4dFRvRGVmYXVsdFJlcXVlc3QSHAoIbGFuZ3VhZ2UYASABKAlCCvpCB3IFEAEYyAEiYAoyUmVzZXRDdXN0b21WZXJpZnlFbWFpbE1lc3NhZ2VUZXh0VG9EZWZhdWx0UmVzcG9uc2USKgoHZGV0YWlscxgBIAEoCzIZLnppdGFkZWwudjEuT2JqZWN0RGV0YWlscyJHCidHZXREZWZhdWx0VmVyaWZ5UGhvbmVNZXNzYWdlVGV4dFJlcXVlc3QSHAoIbGFuZ3VhZ2UYASABKAlCCvpCB3IFEAEYyAEiYwooR2V0RGVmYXVsdFZlcmlmeVBob25lTWVzc2FnZVRleHRSZXNwb25zZRI3CgtjdXN0b21fdGV4dBgBIAEoCzIiLnppdGFkZWwudGV4dC52MS5NZXNzYWdlQ3VzdG9tVGV4dCJGCiZHZXRDdXN0b21WZXJpZnlQaG9uZU1lc3NhZ2VUZXh0UmVxdWVzdBIcCghsYW5ndWFnZRgBIAEoCUIK+kIHcgUQARjIASJiCidHZXRDdXN0b21WZXJpZnlQaG9uZU1lc3NhZ2VUZXh0UmVzcG9uc2USNwoLY3VzdG9tX3RleHQYASABKAsyIi56aXRhZGVsLnRleHQudjEuTWVzc2FnZUN1c3RvbVRleHQijwQKJ1NldERlZmF1bHRWZXJpZnlQaG9uZU1lc3NhZ2VUZXh0UmVxdWVzdBIvCghsYW5ndWFnZRgBIAEoCUIdkkEMSgQiZGUieMgBgAEB4kEBAvpCB3IFEAEYyAESNwoFdGl0bGUYAiABKAlCKJJBHUoYIlpJVEFERUwgLSBWZXJpZnkgUGhvbmUiePQD+kIFcgMo0A8SMgoKcHJlX2hlYWRlchgDIAEoCUIekkETSg4iVmVyaWZ5IFBob25lInj0A/pCBXIDKNAPEi8KB3N1YmplY3QYBCABKAlCHpJBE0oOIlZlcmlmeSBQaG9uZSJ49AP6QgVyAyjQDxJHCghncmVldGluZxgFIAEoCUI1kkEqSiUiSGVsbG8ge3suRmlyc3ROYW1lfX0ge3suTGFzdE5hbWV9fSwieOgH+kIFcgMooB8SeAoEdGV4dBgGIAEoCUJqkkFfSloiQSBuZXcgcGhvbmUgbnVtYmVyIGhhcyBiZWVuIGFkZGVkLiBQbGVhc2UgdXNlIHRoZSBmb2xsb3dpbmcgY29kZSB0byB2ZXJpZnkgaXQge3suQ29kZX19LiJ4oAb6QgVyAxigBhIzCgtidXR0b25fdGV4dBgHIAEoCUIekkETSg4iVmVyaWZ5IFBob25lInjoB/pCBXIDKKAfEh0KC2Zvb3Rlcl90ZXh0GAggASgJQgj6QgVyAyjAPiJWCihTZXREZWZhdWx0VmVyaWZ5UGhvbmVNZXNzYWdlVGV4dFJlc3BvbnNlEioKB2RldGFpbHMYASABKAsyGS56aXRhZGVsLnYxLk9iamVjdERldGFpbHMiUQoxUmVzZXRDdXN0b21WZXJpZnlQaG9uZU1lc3NhZ2VUZXh0VG9EZWZhdWx0UmVxdWVzdBIcCghsYW5ndWFnZRgBIAEoCUIK+kIHcgUQARjIASJgCjJSZXNldEN1c3RvbVZlcmlmeVBob25lTWVzc2FnZVRleHRUb0RlZmF1bHRSZXNwb25zZRIqCgdkZXRhaWxzGAEgASgLMhkueml0YWRlbC52MS5PYmplY3REZXRhaWxzIkcKJ0dldEN1c3RvbVZlcmlmeVNNU09UUE1lc3NhZ2VUZXh0UmVxdWVzdBIcCghsYW5ndWFnZRgBIAEoCUIK+kIHcgUQARjIASJjCihHZXRDdXN0b21WZXJpZnlTTVNPVFBNZXNzYWdlVGV4dFJlc3BvbnNlEjcKC2N1c3RvbV90ZXh0GAEgASgLMiIueml0YWRlbC50ZXh0LnYxLk1lc3NhZ2VDdXN0b21UZXh0IkgKKEdldERlZmF1bHRWZXJpZnlTTVNPVFBNZXNzYWdlVGV4dFJlcXVlc3QSHAoIbGFuZ3VhZ2UYASABKAlCCvpCB3IFEAEYyAEiZAopR2V0RGVmYXVsdFZlcmlmeVNNU09UUE1lc3NhZ2VUZXh0UmVzcG9uc2USNwoLY3VzdG9tX3RleHQYASABKAsyIi56aXRhZGVsLnRleHQudjEuTWVzc2FnZUN1c3RvbVRleHQirgIKKFNldERlZmF1bHRWZXJpZnlTTVNPVFBNZXNzYWdlVGV4dFJlcXVlc3QSKQoIbGFuZ3VhZ2UYASABKAlCF5JBBkoEImRlIuJBAQL6QgdyBRABGMgBEtYBCgR0ZXh0GAIgASgJQscBkkG7AUq1ASJQbGVhc2UgdmlzaXQge3sgLlZlcmlmeVVSTCB9fSBvciBjb3B5IHRoZSBvbmUtdGltZSBwYXNzd29yZCB7ey5PVFB9fSBhbmQgcGFzdGUgaXQgdG8gdG8gdGhlIGF1dGhlbnRpY2F0aW9uIHNjcmVlbiBpbiBvcmRlciB0byBhdXRoZW50aWNhdGUgYXQgWklUQURFTCB3aXRoaW4gdGhlIG5leHQgZml2ZSBtaW51dGVzLiJ4oAb6QgVyAxigBiJXCilTZXREZWZhdWx0VmVyaWZ5U01TT1RQTWVzc2FnZVRleHRSZXNwb25zZRIqCgdkZXRhaWxzGAEgASgLMhkueml0YWRlbC52MS5PYmplY3REZXRhaWxzIlIKMlJlc2V0Q3VzdG9tVmVyaWZ5U01TT1RQTWVzc2FnZVRleHRUb0RlZmF1bHRSZXF1ZXN0EhwKCGxhbmd1YWdlGAEgASgJQgr6QgdyBRABGMgBImEKM1Jlc2V0Q3VzdG9tVmVyaWZ5U01TT1RQTWVzc2FnZVRleHRUb0RlZmF1bHRSZXNwb25zZRIqCgdkZXRhaWxzGAEgASgLMhkueml0YWRlbC52MS5PYmplY3REZXRhaWxzIkkKKUdldEN1c3RvbVZlcmlmeUVtYWlsT1RQTWVzc2FnZVRleHRSZXF1ZXN0EhwKCGxhbmd1YWdlGAEgASgJQgr6QgdyBRABGMgBImUKKkdldEN1c3RvbVZlcmlmeUVtYWlsT1RQTWVzc2FnZVRleHRSZXNwb25zZRI3CgtjdXN0b21fdGV4dBgBIAEoCzIiLnppdGFkZWwudGV4dC52MS5NZXNzYWdlQ3VzdG9tVGV4dCJKCipHZXREZWZhdWx0VmVyaWZ5RW1haWxPVFBNZXNzYWdlVGV4dFJlcXVlc3QSHAoIbGFuZ3VhZ2UYASABKAlCCvpCB3IFEAEYyAEiZgorR2V0RGVmYXVsdFZlcmlmeUVtYWlsT1RQTWVzc2FnZVRleHRSZXNwb25zZRI3CgtjdXN0b21fdGV4dBgBIAEoCzIiLnppdGFkZWwudGV4dC52MS5NZXNzYWdlQ3VzdG9tVGV4dCKTBQoqU2V0RGVmYXVsdFZlcmlmeUVtYWlsT1RQTWVzc2FnZVRleHRSZXF1ZXN0EikKCGxhbmd1YWdlGAEgASgJQheSQQZKBCJkZSLiQQEC+kIHcgUQARjIARI8CgV0aXRsZRgCIAEoCUItkkEiSh0iWklUQURFTCAtIE9uZS10aW1lIFBhc3N3b3JkInj0A/pCBXIDKNAPEj8KCnByZV9oZWFkZXIYAyABKAlCK5JBIEobIlZlcmlmeSBPbmUtdGltZSBQYXNzd29yZCAiePQD+kIFcgMo0A8SOwoHc3ViamVjdBgEIAEoCUIqkkEfShoiVmVyaWZ5IE9uZS10aW1lIFBhc3N3b3JkInj0A/pCBXIDKNAPEkcKCGdyZWV0aW5nGAUgASgJQjWSQSpKJSJIZWxsbyB7ey5GaXJzdE5hbWV9fSB7ey5MYXN0TmFtZX19LCJ46Af6QgVyAyigHxLgAQoEdGV4dBgGIAEoCULRAZJBxAFKvgEiUGxlYXNlIHVzZSB0aGUgXCJBdXRoZW50aWNhdGVcIiBidXR0b24gb3IgY29weSB0aGUgb25lLXRpbWUgcGFzc3dvcmQge3suT1RQfX0gYW5kIHBhc3RlIGl0IHRvIHRvIHRoZSBhdXRoZW50aWNhdGlvbiBzY3JlZW4gaW4gb3JkZXIgdG8gYXV0aGVudGljYXRlIGF0IFpJVEFERUwgd2l0aGluIHRoZSBuZXh0IGZpdmUgbWludXRlcy4ieJBO+kIGcgQowLgCEjMKC2J1dHRvbl90ZXh0GAcgASgJQh6SQRNKDiJBdXRoZW50aWNhdGUiePQD+kIFcgMooB8SHQoLZm9vdGVyX3RleHQYCCABKAlCCPpCBXIDKMA+IlkKK1NldERlZmF1bHRWZXJpZnlFbWFpbE9UUE1lc3NhZ2VUZXh0UmVzcG9uc2USKgoHZGV0YWlscxgBIAEoCzIZLnppdGFkZWwudjEuT2JqZWN0RGV0YWlscyJUCjRSZXNldEN1c3RvbVZlcmlmeUVtYWlsT1RQTWVzc2FnZVRleHRUb0RlZmF1bHRSZXF1ZXN0EhwKCGxhbmd1YWdlGAEgASgJQgr6QgdyBRABGMgBImMKNVJlc2V0Q3VzdG9tVmVyaWZ5RW1haWxPVFBNZXNzYWdlVGV4dFRvRGVmYXVsdFJlc3BvbnNlEioKB2RldGFpbHMYASABKAsyGS56aXRhZGVsLnYxLk9iamVjdERldGFpbHMiSQopR2V0RGVmYXVsdERvbWFpbkNsYWltZWRNZXNzYWdlVGV4dFJlcXVlc3QSHAoIbGFuZ3VhZ2UYASABKAlCCvpCB3IFEAEYyAEiZQoqR2V0RGVmYXVsdERvbWFpbkNsYWltZWRNZXNzYWdlVGV4dFJlc3BvbnNlEjcKC2N1c3RvbV90ZXh0GAEgASgLMiIueml0YWRlbC50ZXh0LnYxLk1lc3NhZ2VDdXN0b21UZXh0IkgKKEdldEN1c3RvbURvbWFpbkNsYWltZWRNZXNzYWdlVGV4dFJlcXVlc3QSHAoIbGFuZ3VhZ2UYASABKAlCCvpCB3IFEAEYyAEiZAopR2V0Q3VzdG9tRG9tYWluQ2xhaW1lZE1lc3NhZ2VUZXh0UmVzcG9uc2USNwoLY3VzdG9tX3RleHQYASABKAsyIi56aXRhZGVsLnRleHQudjEuTWVzc2FnZUN1c3RvbVRleHQi2gUKKVNldERlZmF1bHREb21haW5DbGFpbWVkTWVzc2FnZVRleHRSZXF1ZXN0Ei8KCGxhbmd1YWdlGAEgASgJQh2SQQxKBCJkZSJ4yAGAAQHiQQEC+kIHcgUQARjIARJCCgV0aXRsZRgCIAEoCUIzkkEoSiMiWklUQURFTCAtIERvbWFpbiBoYXMgYmVlbiBjbGFpbWVkInj0A/pCBXIDKNAPEj0KCnByZV9oZWFkZXIYAyABKAlCKZJBHkoZIkNoYW5nZSBlbWFpbCAvIHVzZXJuYW1lInj0A/pCBXIDKNAPEjoKB3N1YmplY3QYBCABKAlCKZJBHkoZIkRvbWFpbiBoYXMgYmVlbiBjbGFpbWVkInj0A/pCBXIDKNAPEkcKCGdyZWV0aW5nGAUgASgJQjWSQSpKJSJIZWxsbyB7ey5GaXJzdE5hbWV9fSB7ey5MYXN0TmFtZX19LCJ46Af6QgVyAyigHxKmAgoEdGV4dBgGIAEoCUKXApJBigJKhAIiVGhlIGRvbWFpbiB7ey5Eb21haW59fSBoYXMgYmVlbiBjbGFpbWVkIGJ5IGFuIG9yZ2FuaXphdGlvbi4gWW91ciBjdXJyZW50IHVzZXIge3suVXNlck5hbWV9fSBpcyBub3QgcGFydCBvZiB0aGlzIG9yZ2FuaXphdGlvbi4gVGhlcmVmb3JlIHlvdSdsbCBoYXZlIHRvIGNoYW5nZSB5b3VyIGVtYWlsIHdoZW4geW91IGxvZyBpbi4gV2UgaGF2ZSBjcmVhdGVkIGEgdGVtcG9yYXJ5IHVzZXJuYW1lICh7ey5UZW1wVXNlcm5hbWV9fSkgZm9yIHRoaXMgbG9naW4uIniQTvpCBnIEKMC4AhIsCgtidXR0b25fdGV4dBgHIAEoCUIXkkEMSgciTG9naW4ieOgH+kIFcgMooB8SHQoLZm9vdGVyX3RleHQYCCABKAlCCPpCBXIDKMA+IlgKKlNldERlZmF1bHREb21haW5DbGFpbWVkTWVzc2FnZVRleHRSZXNwb25zZRIqCgdkZXRhaWxzGAEgASgLMhkueml0YWRlbC52MS5PYmplY3REZXRhaWxzIlMKM1Jlc2V0Q3VzdG9tRG9tYWluQ2xhaW1lZE1lc3NhZ2VUZXh0VG9EZWZhdWx0UmVxdWVzdBIcCghsYW5ndWFnZRgBIAEoCUIK+kIHcgUQARjIASJiCjRSZXNldEN1c3RvbURvbWFpbkNsYWltZWRNZXNzYWdlVGV4dFRvRGVmYXVsdFJlc3BvbnNlEioKB2RldGFpbHMYASABKAsyGS56aXRhZGVsLnYxLk9iamVjdERldGFpbHMiSgoqR2V0RGVmYXVsdFBhc3N3b3JkQ2hhbmdlTWVzc2FnZVRleHRSZXF1ZXN0EhwKCGxhbmd1YWdlGAEgASgJQgr6QgdyBRABGMgBImYKK0dldERlZmF1bHRQYXNzd29yZENoYW5nZU1lc3NhZ2VUZXh0UmVzcG9uc2USNwoLY3VzdG9tX3RleHQYASABKAsyIi56aXRhZGVsLnRleHQudjEuTWVzc2FnZUN1c3RvbVRleHQiSQopR2V0Q3VzdG9tUGFzc3dvcmRDaGFuZ2VNZXNzYWdlVGV4dFJlcXVlc3QSHAoIbGFuZ3VhZ2UYASABKAlCCvpCB3IFEAEYyAEiZQoqR2V0Q3VzdG9tUGFzc3dvcmRDaGFuZ2VNZXNzYWdlVGV4dFJlc3BvbnNlEjcKC2N1c3RvbV90ZXh0GAEgASgLMiIueml0YWRlbC50ZXh0LnYxLk1lc3NhZ2VDdXN0b21UZXh0IuAECipTZXREZWZhdWx0UGFzc3dvcmRDaGFuZ2VNZXNzYWdlVGV4dFJlcXVlc3QSLwoIbGFuZ3VhZ2UYASABKAlCHZJBDEoEImRlInjIAYABAeJBAQL6QgdyBRABGMgBEksKBXRpdGxlGAIgASgJQjySQTFKLCJaSVRBREVMIC0gUGFzc3dvcmQgb2YgdGhlIHVzZXIgaGFzIGNoYW5nZWQiePQD+kIFcgMo0A8SNgoKcHJlX2hlYWRlchgDIAEoCUIikkEXShIiUGFzc3dvcmQgQ2hhbmdlZCJ49AP6QgVyAyjQDxI/CgdzdWJqZWN0GAQgASgJQi6SQSNKHiJQYXNzd29yZCBvZiB1c2VyIGhhcyBjaGFuZ2VkInj0A/pCBXIDKNAPEkcKCGdyZWV0aW5nGAUgASgJQjWSQSpKJSJIZWxsbyB7ey5GaXJzdE5hbWV9fSB7ey5MYXN0TmFtZX19LCJ46Af6QgVyAyigHxKkAQoEdGV4dBgGIAEoCUKVAZJBiAFKggEiVGhlIHBhc3N3b3JkIG9mIHlvdXIgdXNlciBoYXMgY2hhbmdlZCwgaWYgdGhpcyBjaGFuZ2Ugd2FzIG5vdCBkb25lIGJ5IHlvdSwgcGxlYXNlIGJlIGFkdmlzZWQgdG8gaW1tZWRpYXRlbHkgcmVzZXQgeW91ciBwYXNzd29yZC4ieJBO+kIGcgQowLgCEiwKC2J1dHRvbl90ZXh0GAcgASgJQheSQQxKByJMb2dpbiJ46Af6QgVyAyigHxIdCgtmb290ZXJfdGV4dBgIIAEoCUII+kIFcgMYwD4iWQorU2V0RGVmYXVsdFBhc3N3b3JkQ2hhbmdlTWVzc2FnZVRleHRSZXNwb25zZRIqCgdkZXRhaWxzGAEgASgLMhkueml0YWRlbC52MS5PYmplY3REZXRhaWxzIlQKNFJlc2V0Q3VzdG9tUGFzc3dvcmRDaGFuZ2VNZXNzYWdlVGV4dFRvRGVmYXVsdFJlcXVlc3QSHAoIbGFuZ3VhZ2UYASABKAlCCvpCB3IFEAEYyAEiYwo1UmVzZXRDdXN0b21QYXNzd29yZENoYW5nZU1lc3NhZ2VUZXh0VG9EZWZhdWx0UmVzcG9uc2USKgoHZGV0YWlscxgBIAEoCzIZLnppdGFkZWwudjEuT2JqZWN0RGV0YWlscyJGCiZHZXREZWZhdWx0SW52aXRlVXNlck1lc3NhZ2VUZXh0UmVxdWVzdBIcCghsYW5ndWFnZRgBIAEoCUIK+kIHcgUQARjIASJiCidHZXREZWZhdWx0SW52aXRlVXNlck1lc3NhZ2VUZXh0UmVzcG9uc2USNwoLY3VzdG9tX3RleHQYASABKAsyIi56aXRhZGVsLnRleHQudjEuTWVzc2FnZUN1c3RvbVRleHQiRQolR2V0Q3VzdG9tSW52aXRlVXNlck1lc3NhZ2VUZXh0UmVxdWVzdBIcCghsYW5ndWFnZRgBIAEoCUIK+kIHcgUQARjIASJhCiZHZXRDdXN0b21JbnZpdGVVc2VyTWVzc2FnZVRleHRSZXNwb25zZRI3CgtjdXN0b21fdGV4dBgBIAEoCzIiLnppdGFkZWwudGV4dC52MS5NZXNzYWdlQ3VzdG9tVGV4dCKKBQomU2V0RGVmYXVsdEludml0ZVVzZXJNZXNzYWdlVGV4dFJlcXVlc3QSLwoIbGFuZ3VhZ2UYASABKAlCHZJBDEoEImRlInjIAYABAeJBAQL6QgdyBRABGMgBEkMKBXRpdGxlGAIgASgJQjSSQSlKJCJJbnZpdGF0aW9uIHRvIHt7LkFwcGxpY2F0aW9uTmFtZX19Inj0A/pCBXIDKNAPEkgKCnByZV9oZWFkZXIYAyABKAlCNJJBKUokIkludml0YXRpb24gdG8ge3suQXBwbGljYXRpb25OYW1lfX0iePQD+kIFcgMo0A8SRQoHc3ViamVjdBgEIAEoCUI0kkEpSiQiSW52aXRhdGlvbiB0byB7ey5BcHBsaWNhdGlvbk5hbWV9fSJ49AP6QgVyAyjQDxI7CghncmVldGluZxgFIAEoCUIpkkEeShkiSGVsbG8ge3suRGlzcGxheU5hbWV9fSwieOgH+kIFcgMooB8SxgEKBHRleHQYBiABKAlCtwGSQaoBSqQBIllvdXIgdXNlciBoYXMgYmVlbiBpbnZpdGVkIHRvIHt7LkFwcGxpY2F0aW9uTmFtZX19LiBQbGVhc2UgY2xpY2sgdGhlIGJ1dHRvbiBiZWxvdyB0byBmaW5pc2ggdGhlIGludml0ZSBwcm9jZXNzLiBJZiB5b3UgZGlkbid0IGFzayBmb3IgdGhpcyBtYWlsLCBwbGVhc2UgaWdub3JlIGl0LiJ4kE76QgZyBCjAuAISNAoLYnV0dG9uX3RleHQYByABKAlCH5JBFEoPIkFjY2VwdCBpbnZpdGUieOgH+kIFcgMooB8SHQoLZm9vdGVyX3RleHQYCCABKAlCCPpCBXIDGMA+IlUKJ1NldERlZmF1bHRJbnZpdGVVc2VyTWVzc2FnZVRleHRSZXNwb25zZRIqCgdkZXRhaWxzGAEgASgLMhkueml0YWRlbC52MS5PYmplY3REZXRhaWxzIlAKMFJlc2V0Q3VzdG9tSW52aXRlVXNlck1lc3NhZ2VUZXh0VG9EZWZhdWx0UmVxdWVzdBIcCghsYW5ndWFnZRgBIAEoCUIK+kIHcgUQARjIASJfCjFSZXNldEN1c3RvbUludml0ZVVzZXJNZXNzYWdlVGV4dFRvRGVmYXVsdFJlc3BvbnNlEioKB2RldGFpbHMYASABKAsyGS56aXRhZGVsLnYxLk9iamVjdERldGFpbHMiVAo0R2V0RGVmYXVsdFBhc3N3b3JkbGVzc1JlZ2lzdHJhdGlvbk1lc3NhZ2VUZXh0UmVxdWVzdBIcCghsYW5ndWFnZRgBIAEoCUIK+kIHcgUQARjIASJwCjVHZXREZWZhdWx0UGFzc3dvcmRsZXNzUmVnaXN0cmF0aW9uTWVzc2FnZVRleHRSZXNwb25zZRI3CgtjdXN0b21fdGV4dBgBIAEoCzIiLnppdGFkZWwudGV4dC52MS5NZXNzYWdlQ3VzdG9tVGV4dCJTCjNHZXRDdXN0b21QYXNzd29yZGxlc3NSZWdpc3RyYXRpb25NZXNzYWdlVGV4dFJlcXVlc3QSHAoIbGFuZ3VhZ2UYASABKAlCCvpCB3IFEAEYyAEibwo0R2V0Q3VzdG9tUGFzc3dvcmRsZXNzUmVnaXN0cmF0aW9uTWVzc2FnZVRleHRSZXNwb25zZRI3CgtjdXN0b21fdGV4dBgBIAEoCzIiLnppdGFkZWwudGV4dC52MS5NZXNzYWdlQ3VzdG9tVGV4dCL9BAo0U2V0RGVmYXVsdFBhc3N3b3JkbGVzc1JlZ2lzdHJhdGlvbk1lc3NhZ2VUZXh0UmVxdWVzdBIvCghsYW5ndWFnZRgBIAEoCUIdkkEMSgQiZGUieMgBgAEB4kEBAvpCB3IFEAEYyAESQQoFdGl0bGUYAiABKAlCMpJBJ0oiIlpJVEFERUwgLSBBZGQgUGFzc3dvcmRsZXNzIExvZ2luInj0A/pCBXIDKNAPEjwKCnByZV9oZWFkZXIYAyABKAlCKJJBHUoYIkFkZCBQYXNzd29yZGxlc3MgTG9naW4iePQD+kIFcgMo0A8SOQoHc3ViamVjdBgEIAEoCUIokkEdShgiQWRkIFBhc3N3b3JkbGVzcyBMb2dpbiJ49AP6QgVyAyjQDxJHCghncmVldGluZxgFIAEoCUI1kkEqSiUiSGVsbG8ge3suRmlyc3ROYW1lfX0ge3suTGFzdE5hbWV9fSwiePQD+kIFcgMooB8SsAEKBHRleHQYBiABKAlCoQGSQZQBSo4BIldlIHJlY2VpdmVkIGEgcmVxdWVzdCB0byBhZGQgYSB0b2tlbiBmb3IgcGFzc3dvcmRsZXNzIGxvZ2luLiBQbGVhc2UgdXNlIHRoZSBidXR0b24gYmVsb3cgdG8gYWRkIHlvdXIgdG9rZW4gb3IgZGV2aWNlIGZvciBwYXNzd29yZGxlc3MgbG9naW4uIniQTvpCBnIEKMC4AhI9CgtidXR0b25fdGV4dBgHIAEoCUIokkEdShgiQWRkIFBhc3N3b3JkbGVzcyBMb2dpbiJ46Af6QgVyAyigHxIdCgtmb290ZXJfdGV4dBgIIAEoCUII+kIFcgMowD4iYwo1U2V0RGVmYXVsdFBhc3N3b3JkbGVzc1JlZ2lzdHJhdGlvbk1lc3NhZ2VUZXh0UmVzcG9uc2USKgoHZGV0YWlscxgBIAEoCzIZLnppdGFkZWwudjEuT2JqZWN0RGV0YWlscyJeCj5SZXNldEN1c3RvbVBhc3N3b3JkbGVzc1JlZ2lzdHJhdGlvbk1lc3NhZ2VUZXh0VG9EZWZhdWx0UmVxdWVzdBIcCghsYW5ndWFnZRgBIAEoCUIK+kIHcgUQARjIASJtCj9SZXNldEN1c3RvbVBhc3N3b3JkbGVzc1JlZ2lzdHJhdGlvbk1lc3NhZ2VUZXh0VG9EZWZhdWx0UmVzcG9uc2USKgoHZGV0YWlscxgBIAEoCzIZLnppdGFkZWwudjEuT2JqZWN0RGV0YWlscyI7ChtHZXREZWZhdWx0TG9naW5UZXh0c1JlcXVlc3QSHAoIbGFuZ3VhZ2UYASABKAlCCvpCB3IFEAEYyAEiVQocR2V0RGVmYXVsdExvZ2luVGV4dHNSZXNwb25zZRI1CgtjdXN0b21fdGV4dBgBIAEoCzIgLnppdGFkZWwudGV4dC52MS5Mb2dpbkN1c3RvbVRleHQiOgoaR2V0Q3VzdG9tTG9naW5UZXh0c1JlcXVlc3QSHAoIbGFuZ3VhZ2UYASABKAlCCvpCB3IFEAEYyAEiVAobR2V0Q3VzdG9tTG9naW5UZXh0c1Jlc3BvbnNlEjUKC2N1c3RvbV90ZXh0GAEgASgLMiAueml0YWRlbC50ZXh0LnYxLkxvZ2luQ3VzdG9tVGV4dCKHFQoaU2V0Q3VzdG9tTG9naW5UZXh0c1JlcXVlc3QSJQoIbGFuZ3VhZ2UYASABKAlCE5JBBkoEImRlIvpCB3IFEAEYyAESRQoTc2VsZWN0X2FjY291bnRfdGV4dBgCIAEoCzIoLnppdGFkZWwudGV4dC52MS5TZWxlY3RBY2NvdW50U2NyZWVuVGV4dBI0Cgpsb2dpbl90ZXh0GAMgASgLMiAueml0YWRlbC50ZXh0LnYxLkxvZ2luU2NyZWVuVGV4dBI6Cg1wYXNzd29yZF90ZXh0GAQgASgLMiMueml0YWRlbC50ZXh0LnYxLlBhc3N3b3JkU2NyZWVuVGV4dBJHChR1c2VybmFtZV9jaGFuZ2VfdGV4dBgFIAEoCzIpLnppdGFkZWwudGV4dC52MS5Vc2VybmFtZUNoYW5nZVNjcmVlblRleHQSUAoZdXNlcm5hbWVfY2hhbmdlX2RvbmVfdGV4dBgGIAEoCzItLnppdGFkZWwudGV4dC52MS5Vc2VybmFtZUNoYW5nZURvbmVTY3JlZW5UZXh0EkMKEmluaXRfcGFzc3dvcmRfdGV4dBgHIAEoCzInLnppdGFkZWwudGV4dC52MS5Jbml0UGFzc3dvcmRTY3JlZW5UZXh0EkwKF2luaXRfcGFzc3dvcmRfZG9uZV90ZXh0GAggASgLMisueml0YWRlbC50ZXh0LnYxLkluaXRQYXNzd29yZERvbmVTY3JlZW5UZXh0Ek0KF2VtYWlsX3ZlcmlmaWNhdGlvbl90ZXh0GAkgASgLMiwueml0YWRlbC50ZXh0LnYxLkVtYWlsVmVyaWZpY2F0aW9uU2NyZWVuVGV4dBJWChxlbWFpbF92ZXJpZmljYXRpb25fZG9uZV90ZXh0GAogASgLMjAueml0YWRlbC50ZXh0LnYxLkVtYWlsVmVyaWZpY2F0aW9uRG9uZVNjcmVlblRleHQSRwoUaW5pdGlhbGl6ZV91c2VyX3RleHQYCyABKAsyKS56aXRhZGVsLnRleHQudjEuSW5pdGlhbGl6ZVVzZXJTY3JlZW5UZXh0EksKFGluaXRpYWxpemVfZG9uZV90ZXh0GAwgASgLMi0ueml0YWRlbC50ZXh0LnYxLkluaXRpYWxpemVVc2VyRG9uZVNjcmVlblRleHQSRgoUaW5pdF9tZmFfcHJvbXB0X3RleHQYDSABKAsyKC56aXRhZGVsLnRleHQudjEuSW5pdE1GQVByb21wdFNjcmVlblRleHQSQAoRaW5pdF9tZmFfb3RwX3RleHQYDiABKAsyJS56aXRhZGVsLnRleHQudjEuSW5pdE1GQU9UUFNjcmVlblRleHQSQAoRaW5pdF9tZmFfdTJmX3RleHQYDyABKAsyJS56aXRhZGVsLnRleHQudjEuSW5pdE1GQVUyRlNjcmVlblRleHQSQgoSaW5pdF9tZmFfZG9uZV90ZXh0GBAgASgLMiYueml0YWRlbC50ZXh0LnYxLkluaXRNRkFEb25lU2NyZWVuVGV4dBI9ChJtZmFfcHJvdmlkZXJzX3RleHQYESABKAsyIS56aXRhZGVsLnRleHQudjEuTUZBUHJvdmlkZXJzVGV4dBJEChN2ZXJpZnlfbWZhX290cF90ZXh0GBIgASgLMicueml0YWRlbC50ZXh0LnYxLlZlcmlmeU1GQU9UUFNjcmVlblRleHQSRAoTdmVyaWZ5X21mYV91MmZfdGV4dBgTIAEoCzInLnppdGFkZWwudGV4dC52MS5WZXJpZnlNRkFVMkZTY3JlZW5UZXh0EkIKEXBhc3N3b3JkbGVzc190ZXh0GBQgASgLMicueml0YWRlbC50ZXh0LnYxLlBhc3N3b3JkbGVzc1NjcmVlblRleHQSRwoUcGFzc3dvcmRfY2hhbmdlX3RleHQYFSABKAsyKS56aXRhZGVsLnRleHQudjEuUGFzc3dvcmRDaGFuZ2VTY3JlZW5UZXh0ElAKGXBhc3N3b3JkX2NoYW5nZV9kb25lX3RleHQYFiABKAsyLS56aXRhZGVsLnRleHQudjEuUGFzc3dvcmRDaGFuZ2VEb25lU2NyZWVuVGV4dBJOChhwYXNzd29yZF9yZXNldF9kb25lX3RleHQYFyABKAsyLC56aXRhZGVsLnRleHQudjEuUGFzc3dvcmRSZXNldERvbmVTY3JlZW5UZXh0Ek8KGHJlZ2lzdHJhdGlvbl9vcHRpb25fdGV4dBgYIAEoCzItLnppdGFkZWwudGV4dC52MS5SZWdpc3RyYXRpb25PcHRpb25TY3JlZW5UZXh0EksKFnJlZ2lzdHJhdGlvbl91c2VyX3RleHQYGSABKAsyKy56aXRhZGVsLnRleHQudjEuUmVnaXN0cmF0aW9uVXNlclNjcmVlblRleHQSSQoVcmVnaXN0cmF0aW9uX29yZ190ZXh0GBogASgLMioueml0YWRlbC50ZXh0LnYxLlJlZ2lzdHJhdGlvbk9yZ1NjcmVlblRleHQSSgoWbGlua2luZ191c2VyX2RvbmVfdGV4dBgbIAEoCzIqLnppdGFkZWwudGV4dC52MS5MaW5raW5nVXNlckRvbmVTY3JlZW5UZXh0ElUKHGV4dGVybmFsX3VzZXJfbm90X2ZvdW5kX3RleHQYHCABKAsyLy56aXRhZGVsLnRleHQudjEuRXh0ZXJuYWxVc2VyTm90Rm91bmRTY3JlZW5UZXh0EkMKEnN1Y2Nlc3NfbG9naW5fdGV4dBgdIAEoCzInLnppdGFkZWwudGV4dC52MS5TdWNjZXNzTG9naW5TY3JlZW5UZXh0EjoKC2xvZ291dF90ZXh0GB4gASgLMiUueml0YWRlbC50ZXh0LnYxLkxvZ291dERvbmVTY3JlZW5UZXh0EjAKC2Zvb3Rlcl90ZXh0GB8gASgLMhsueml0YWRlbC50ZXh0LnYxLkZvb3RlclRleHQSTwoYcGFzc3dvcmRsZXNzX3Byb21wdF90ZXh0GCAgASgLMi0ueml0YWRlbC50ZXh0LnYxLlBhc3N3b3JkbGVzc1Byb21wdFNjcmVlblRleHQSWwoecGFzc3dvcmRsZXNzX3JlZ2lzdHJhdGlvbl90ZXh0GCEgASgLMjMueml0YWRlbC50ZXh0LnYxLlBhc3N3b3JkbGVzc1JlZ2lzdHJhdGlvblNjcmVlblRleHQSZAojcGFzc3dvcmRsZXNzX3JlZ2lzdHJhdGlvbl9kb25lX3RleHQYIiABKAsyNy56aXRhZGVsLnRleHQudjEuUGFzc3dvcmRsZXNzUmVnaXN0cmF0aW9uRG9uZVNjcmVlblRleHQSbQooZXh0ZXJuYWxfcmVnaXN0cmF0aW9uX3VzZXJfb3ZlcnZpZXdfdGV4dBgjIAEoCzI7LnppdGFkZWwudGV4dC52MS5FeHRlcm5hbFJlZ2lzdHJhdGlvblVzZXJPdmVydmlld1NjcmVlblRleHQSUgoYbGlua2luZ191c2VyX3Byb21wdF90ZXh0GCQgASgLMiwueml0YWRlbC50ZXh0LnYxLkxpbmtpbmdVc2VyUHJvbXB0U2NyZWVuVGV4dEICGAEiSQobU2V0Q3VzdG9tTG9naW5UZXh0c1Jlc3BvbnNlEioKB2RldGFpbHMYASABKAsyGS56aXRhZGVsLnYxLk9iamVjdERldGFpbHMiRQolUmVzZXRDdXN0b21Mb2dpblRleHRzVG9EZWZhdWx0UmVxdWVzdBIcCghsYW5ndWFnZRgBIAEoCUIK+kIHcgUQARjIASJUCiZSZXNldEN1c3RvbUxvZ2luVGV4dHNUb0RlZmF1bHRSZXNwb25zZRIqCgdkZXRhaWxzGAEgASgLMhkueml0YWRlbC52MS5PYmplY3REZXRhaWxzIr0BChNBZGRJQU1NZW1iZXJSZXF1ZXN0EjkKB3VzZXJfaWQYASABKAlCKJJBG0oTIjY5NjI5MDIzOTA2NDg4MzM0InjIAYABAfpCB3IFEAEYyAESWgoFcm9sZXMYAiADKAlCS5JBSDI3SWYgbm8gcm9sZXMgYXJlIHByb3ZpZGVkIHRoZSB1c2VyIHdvbid0IGhhdmUgYW55IHJpZ2h0c0oNWyJJQU1fT1dORVIiXToPkkEMCgrSAQd1c2VyX2lkIkIKFEFkZElBTU1lbWJlclJlc3BvbnNlEioKB2RldGFpbHMYASABKAsyGS56aXRhZGVsLnYxLk9iamVjdERldGFpbHMiwAEKFlVwZGF0ZUlBTU1lbWJlclJlcXVlc3QSOQoHdXNlcl9pZBgBIAEoCUIokkEbShMiNjk2MjkwMjM5MDY0ODgzMzQieMgBgAEB+kIHcgUQARjIARJaCgVyb2xlcxgCIAMoCUJLkkFIMjdJZiBubyByb2xlcyBhcmUgcHJvdmlkZWQgdGhlIHVzZXIgd29uJ3QgaGF2ZSBhbnkgcmlnaHRzSg1bIklBTV9PV05FUiJdOg+SQQwKCtIBB3VzZXJfaWQiRQoXVXBkYXRlSUFNTWVtYmVyUmVzcG9uc2USKgoHZGV0YWlscxgBIAEoCzIZLnppdGFkZWwudjEuT2JqZWN0RGV0YWlscyJkChZSZW1vdmVJQU1NZW1iZXJSZXF1ZXN0EjkKB3VzZXJfaWQYASABKAlCKJJBG0oTIjY5NjI5MDIzOTA2NDg4MzM0InjIAYABAfpCB3IFEAEYyAE6D5JBDAoK0gEHdXNlcl9pZCJFChdSZW1vdmVJQU1NZW1iZXJSZXNwb25zZRIqCgdkZXRhaWxzGAEgASgLMhkueml0YWRlbC52MS5PYmplY3REZXRhaWxzIhsKGUxpc3RJQU1NZW1iZXJSb2xlc1JlcXVlc3QiaQoaTGlzdElBTU1lbWJlclJvbGVzUmVzcG9uc2USKAoHZGV0YWlscxgBIAEoCzIXLnppdGFkZWwudjEuTGlzdERldGFpbHMSIQoFcm9sZXMYAiADKAlCEpJBD0oNWyJJQU1fT1dORVIiXSKwAQoVTGlzdElBTU1lbWJlcnNSZXF1ZXN0EiQKBXF1ZXJ5GAEgASgLMhUueml0YWRlbC52MS5MaXN0UXVlcnkSLwoHcXVlcmllcxgCIAMoCzIeLnppdGFkZWwubWVtYmVyLnYxLlNlYXJjaFF1ZXJ5EkAKDnNvcnRpbmdfY29sdW1uGAMgASgOMigueml0YWRlbC5tZW1iZXIudjEuTWVtYmVyRmllbGRDb2x1bW5OYW1lIm0KFkxpc3RJQU1NZW1iZXJzUmVzcG9uc2USKAoHZGV0YWlscxgBIAEoCzIXLnppdGFkZWwudjEuTGlzdERldGFpbHMSKQoGcmVzdWx0GAIgAygLMhkueml0YWRlbC5tZW1iZXIudjEuTWVtYmVyIhIKEExpc3RWaWV3c1JlcXVlc3QiOwoRTGlzdFZpZXdzUmVzcG9uc2USJgoGcmVzdWx0GAEgAygLMhYueml0YWRlbC5hZG1pbi52MS5WaWV3IhkKF0xpc3RGYWlsZWRFdmVudHNSZXF1ZXN0IkkKGExpc3RGYWlsZWRFdmVudHNSZXNwb25zZRItCgZyZXN1bHQYASADKAsyHS56aXRhZGVsLmFkbWluLnYxLkZhaWxlZEV2ZW50It0BChhSZW1vdmVGYWlsZWRFdmVudFJlcXVlc3QSMQoIZGF0YWJhc2UYASABKAlCH5JBEkoKImFkbWluYXBpInjIAYABAfpCB3IFEAEYyAESNQoJdmlld19uYW1lGAIgASgJQiKSQRVKDSJpYW1fbWVtYmVycyJ4yAGAAQH6QgdyBRABGMgBEicKD2ZhaWxlZF9zZXF1ZW5jZRgDIAEoBEIOkkELSgkiOTgyMzc1OCI6LpJBKwop0gEIZGF0YWJhc2XSAQl2aWV3X25hbWXSAQ9mYWlsZWRfc2VxdWVuY2UiGwoZUmVtb3ZlRmFpbGVkRXZlbnRSZXNwb25zZSLfAgoEVmlldxIhCghkYXRhYmFzZRgBIAEoCUIPkkEMSgoiYWRtaW5hcGkiEiUKCXZpZXdfbmFtZRgCIAEoCUISkkEPSg0iaWFtX21lbWJlcnMiEioKEnByb2Nlc3NlZF9zZXF1ZW5jZRgDIAEoBEIOkkELSgkiOTgyMzc1OCISeQoPZXZlbnRfdGltZXN0YW1wGAQgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcEJEkkFBMiBUaGUgdGltZXN0YW1wIHRoZSBldmVudCBvY2N1cnJlZEodIjIwMTktMDQtMDFUMDg6NDU6MDAuMDAwMDAwWiISZgobbGFzdF9zdWNjZXNzZnVsX3Nwb29sZXJfcnVuGAUgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcEIlkkEiMiBUaGUgdGltZXN0YW1wIHRoZSBldmVudCBvY2N1cnJlZCLGAgoLRmFpbGVkRXZlbnQSIQoIZGF0YWJhc2UYASABKAlCD5JBDEoKImFkbWluYXBpIhIlCgl2aWV3X25hbWUYAiABKAlCEpJBD0oNImlhbV9tZW1iZXJzIhInCg9mYWlsZWRfc2VxdWVuY2UYAyABKARCDpJBC0oJIjk4MjM3NTkiEh8KDWZhaWx1cmVfY291bnQYBCABKARCCJJBBUoDIjUiEkQKDWVycm9yX21lc3NhZ2UYBSABKAlCLZJBKkooIklEPUVYQU1QLUlEM0VSIE1lc3NhZ2U9RXhhbXBsZSBtZXNzYWdlIhJdCgtsYXN0X2ZhaWxlZBgGIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBCLJJBKTInVGhlIHRpbWVzdGFtcCB0aGUgZmFpbHVyZSBsYXN0IG9jY3VycmVkIqgGChFJbXBvcnREYXRhUmVxdWVzdBI0CglkYXRhX29yZ3MYASABKAsyHy56aXRhZGVsLmFkbWluLnYxLkltcG9ydERhdGFPcmdIABIzCgtkYXRhX29yZ3N2MRgCIAEoCzIcLnppdGFkZWwudjEudjEuSW1wb3J0RGF0YU9yZ0gAEkkKD2RhdGFfb3Jnc19sb2NhbBgDIAEoCzIuLnppdGFkZWwuYWRtaW4udjEuSW1wb3J0RGF0YVJlcXVlc3QuTG9jYWxJbnB1dEgAEksKEWRhdGFfb3Jnc3YxX2xvY2FsGAQgASgLMi4ueml0YWRlbC5hZG1pbi52MS5JbXBvcnREYXRhUmVxdWVzdC5Mb2NhbElucHV0SAASQwoMZGF0YV9vcmdzX3MzGAUgASgLMisueml0YWRlbC5hZG1pbi52MS5JbXBvcnREYXRhUmVxdWVzdC5TM0lucHV0SAASRQoOZGF0YV9vcmdzdjFfczMYBiABKAsyKy56aXRhZGVsLmFkbWluLnYxLkltcG9ydERhdGFSZXF1ZXN0LlMzSW5wdXRIABJFCg1kYXRhX29yZ3NfZ2NzGAcgASgLMiwueml0YWRlbC5hZG1pbi52MS5JbXBvcnREYXRhUmVxdWVzdC5HQ1NJbnB1dEgAEkcKD2RhdGFfb3Jnc3YxX2djcxgIIAEoCzIsLnppdGFkZWwuYWRtaW4udjEuSW1wb3J0RGF0YVJlcXVlc3QuR0NTSW5wdXRIABIPCgd0aW1lb3V0GAkgASgJGhoKCkxvY2FsSW5wdXQSDAoEcGF0aBgBIAEoCRp4CgdTM0lucHV0EgwKBHBhdGgYASABKAkSEAoIZW5kcG9pbnQYAiABKAkSFQoNYWNjZXNzX2tleV9pZBgDIAEoCRIZChFzZWNyZXRfYWNjZXNzX2tleRgEIAEoCRILCgNzc2wYBSABKAgSDgoGYnVja2V0GAYgASgJGkUKCEdDU0lucHV0Eg4KBmJ1Y2tldBgBIAEoCRIbChNzZXJ2aWNlYWNjb3VudF9qc29uGAIgASgJEgwKBHBhdGgYAyABKAlCBgoEZGF0YSI4Cg1JbXBvcnREYXRhT3JnEicKBG9yZ3MYASADKAsyGS56aXRhZGVsLmFkbWluLnYxLkRhdGFPcmci+xQKB0RhdGFPcmcSDgoGb3JnX2lkGAEgASgJEjEKA29yZxgDIAEoCzIkLnppdGFkZWwubWFuYWdlbWVudC52MS5BZGRPcmdSZXF1ZXN0EkUKDWRvbWFpbl9wb2xpY3kYBCABKAsyLi56aXRhZGVsLmFkbWluLnYxLkFkZEN1c3RvbURvbWFpblBvbGljeVJlcXVlc3QSSAoMbGFiZWxfcG9saWN5GAUgASgLMjIueml0YWRlbC5tYW5hZ2VtZW50LnYxLkFkZEN1c3RvbUxhYmVsUG9saWN5UmVxdWVzdBJMCg5sb2Nrb3V0X3BvbGljeRgGIAEoCzI0LnppdGFkZWwubWFuYWdlbWVudC52MS5BZGRDdXN0b21Mb2Nrb3V0UG9saWN5UmVxdWVzdBJICgxsb2dpbl9wb2xpY3kYByABKAsyMi56aXRhZGVsLm1hbmFnZW1lbnQudjEuQWRkQ3VzdG9tTG9naW5Qb2xpY3lSZXF1ZXN0EmMKGnBhc3N3b3JkX2NvbXBsZXhpdHlfcG9saWN5GAggASgLMj8ueml0YWRlbC5tYW5hZ2VtZW50LnYxLkFkZEN1c3RvbVBhc3N3b3JkQ29tcGxleGl0eVBvbGljeVJlcXVlc3QSTAoOcHJpdmFjeV9wb2xpY3kYCSABKAsyNC56aXRhZGVsLm1hbmFnZW1lbnQudjEuQWRkQ3VzdG9tUHJpdmFjeVBvbGljeVJlcXVlc3QSLAoIcHJvamVjdHMYCiADKAsyGi56aXRhZGVsLnYxLnYxLkRhdGFQcm9qZWN0EkMKDXByb2plY3Rfcm9sZXMYCyADKAsyLC56aXRhZGVsLm1hbmFnZW1lbnQudjEuQWRkUHJvamVjdFJvbGVSZXF1ZXN0EjMKCGFwaV9hcHBzGAwgAygLMiEueml0YWRlbC52MS52MS5EYXRhQVBJQXBwbGljYXRpb24SNQoJb2lkY19hcHBzGA0gAygLMiIueml0YWRlbC52MS52MS5EYXRhT0lEQ0FwcGxpY2F0aW9uEjEKC2h1bWFuX3VzZXJzGA4gAygLMhwueml0YWRlbC52MS52MS5EYXRhSHVtYW5Vc2VyEjUKDW1hY2hpbmVfdXNlcnMYDyADKAsyHi56aXRhZGVsLnYxLnYxLkRhdGFNYWNoaW5lVXNlchJICg90cmlnZ2VyX2FjdGlvbnMYECADKAsyLy56aXRhZGVsLm1hbmFnZW1lbnQudjEuU2V0VHJpZ2dlckFjdGlvbnNSZXF1ZXN0EioKB2FjdGlvbnMYESADKAsyGS56aXRhZGVsLnYxLnYxLkRhdGFBY3Rpb24SNwoOcHJvamVjdF9ncmFudHMYEiADKAsyHy56aXRhZGVsLnYxLnYxLkRhdGFQcm9qZWN0R3JhbnQSPwoLdXNlcl9ncmFudHMYEyADKAsyKi56aXRhZGVsLm1hbmFnZW1lbnQudjEuQWRkVXNlckdyYW50UmVxdWVzdBI/CgtvcmdfbWVtYmVycxgUIAMoCzIqLnppdGFkZWwubWFuYWdlbWVudC52MS5BZGRPcmdNZW1iZXJSZXF1ZXN0EkcKD3Byb2plY3RfbWVtYmVycxgVIAMoCzIuLnppdGFkZWwubWFuYWdlbWVudC52MS5BZGRQcm9qZWN0TWVtYmVyUmVxdWVzdBJSChVwcm9qZWN0X2dyYW50X21lbWJlcnMYFiADKAsyMy56aXRhZGVsLm1hbmFnZW1lbnQudjEuQWRkUHJvamVjdEdyYW50TWVtYmVyUmVxdWVzdBJECg11c2VyX21ldGFkYXRhGBcgAygLMi0ueml0YWRlbC5tYW5hZ2VtZW50LnYxLlNldFVzZXJNZXRhZGF0YVJlcXVlc3QSRgoLbG9naW5fdGV4dHMYGCADKAsyMS56aXRhZGVsLm1hbmFnZW1lbnQudjEuU2V0Q3VzdG9tTG9naW5UZXh0c1JlcXVlc3QSTQoNaW5pdF9tZXNzYWdlcxgZIAMoCzI2LnppdGFkZWwubWFuYWdlbWVudC52MS5TZXRDdXN0b21Jbml0TWVzc2FnZVRleHRSZXF1ZXN0EmAKF3Bhc3N3b3JkX3Jlc2V0X21lc3NhZ2VzGBogAygLMj8ueml0YWRlbC5tYW5hZ2VtZW50LnYxLlNldEN1c3RvbVBhc3N3b3JkUmVzZXRNZXNzYWdlVGV4dFJlcXVlc3QSXAoVdmVyaWZ5X2VtYWlsX21lc3NhZ2VzGBsgAygLMj0ueml0YWRlbC5tYW5hZ2VtZW50LnYxLlNldEN1c3RvbVZlcmlmeUVtYWlsTWVzc2FnZVRleHRSZXF1ZXN0ElwKFXZlcmlmeV9waG9uZV9tZXNzYWdlcxgcIAMoCzI9LnppdGFkZWwubWFuYWdlbWVudC52MS5TZXRDdXN0b21WZXJpZnlQaG9uZU1lc3NhZ2VUZXh0UmVxdWVzdBJgChdkb21haW5fY2xhaW1lZF9tZXNzYWdlcxgdIAMoCzI/LnppdGFkZWwubWFuYWdlbWVudC52MS5TZXRDdXN0b21Eb21haW5DbGFpbWVkTWVzc2FnZVRleHRSZXF1ZXN0EnYKInBhc3N3b3JkbGVzc19yZWdpc3RyYXRpb25fbWVzc2FnZXMYHiADKAsySi56aXRhZGVsLm1hbmFnZW1lbnQudjEuU2V0Q3VzdG9tUGFzc3dvcmRsZXNzUmVnaXN0cmF0aW9uTWVzc2FnZVRleHRSZXF1ZXN0Ei0KCW9pZGNfaWRwcxgfIAMoCzIaLnppdGFkZWwudjEudjEuRGF0YU9JRENJRFASKwoIand0X2lkcHMYICADKAsyGS56aXRhZGVsLnYxLnYxLkRhdGFKV1RJRFASLwoKdXNlcl9saW5rcxghIAMoCzIbLnppdGFkZWwuaWRwLnYxLklEUFVzZXJMaW5rEicKB2RvbWFpbnMYIiADKAsyFi56aXRhZGVsLm9yZy52MS5Eb21haW4SKwoIYXBwX2tleXMYIyADKAsyGS56aXRhZGVsLnYxLnYxLkRhdGFBcHBLZXkSMwoMbWFjaGluZV9rZXlzGCQgAygLMh0ueml0YWRlbC52MS52MS5EYXRhTWFjaGluZUtleRJfChd2ZXJpZnlfc21zX290cF9tZXNzYWdlcxglIAMoCzI+LnppdGFkZWwubWFuYWdlbWVudC52MS5TZXRDdXN0b21WZXJpZnlTTVNPVFBNZXNzYWdlVGV4dFJlcXVlc3QSYwoZdmVyaWZ5X2VtYWlsX290cF9tZXNzYWdlcxgmIAMoCzJALnppdGFkZWwubWFuYWdlbWVudC52MS5TZXRDdXN0b21WZXJpZnlFbWFpbE9UUE1lc3NhZ2VUZXh0UmVxdWVzdBJaChRpbnZpdGVfdXNlcl9tZXNzYWdlcxgnIAMoCzI8LnppdGFkZWwubWFuYWdlbWVudC52MS5TZXRDdXN0b21JbnZpdGVVc2VyTWVzc2FnZVRleHRSZXF1ZXN0EisKCW9yZ19zdGF0ZRgoIAEoDjIYLnppdGFkZWwub3JnLnYxLk9yZ1N0YXRlIn0KEkltcG9ydERhdGFSZXNwb25zZRIxCgZlcnJvcnMYASADKAsyIS56aXRhZGVsLmFkbWluLnYxLkltcG9ydERhdGFFcnJvchI0CgdzdWNjZXNzGAIgASgLMiMueml0YWRlbC5hZG1pbi52MS5JbXBvcnREYXRhU3VjY2VzcyI8Cg9JbXBvcnREYXRhRXJyb3ISDAoEdHlwZRgBIAEoCRIKCgJpZBgCIAEoCRIPCgdtZXNzYWdlGAMgASgJIkkKEUltcG9ydERhdGFTdWNjZXNzEjQKBG9yZ3MYASADKAsyJi56aXRhZGVsLmFkbWluLnYxLkltcG9ydERhdGFTdWNjZXNzT3JnIsoGChRJbXBvcnREYXRhU3VjY2Vzc09yZxIOCgZvcmdfaWQYASABKAkSEwoLcHJvamVjdF9pZHMYAiADKAkSFQoNcHJvamVjdF9yb2xlcxgDIAMoCRIUCgxvaWRjX2FwcF9pZHMYBCADKAkSEwoLYXBpX2FwcF9pZHMYBSADKAkSFgoOaHVtYW5fdXNlcl9pZHMYBiADKAkSGAoQbWFjaGluZV91c2VyX2lkcxgHIAMoCRISCgphY3Rpb25faWRzGAggAygJEkgKD3RyaWdnZXJfYWN0aW9ucxgJIAMoCzIvLnppdGFkZWwubWFuYWdlbWVudC52MS5TZXRUcmlnZ2VyQWN0aW9uc1JlcXVlc3QSRwoOcHJvamVjdF9ncmFudHMYCiADKAsyLy56aXRhZGVsLmFkbWluLnYxLkltcG9ydERhdGFTdWNjZXNzUHJvamVjdEdyYW50EkEKC3VzZXJfZ3JhbnRzGAsgAygLMiwueml0YWRlbC5hZG1pbi52MS5JbXBvcnREYXRhU3VjY2Vzc1VzZXJHcmFudBITCgtvcmdfbWVtYmVycxgMIAMoCRJJCg9wcm9qZWN0X21lbWJlcnMYDSADKAsyMC56aXRhZGVsLmFkbWluLnYxLkltcG9ydERhdGFTdWNjZXNzUHJvamVjdE1lbWJlchJUChVwcm9qZWN0X2dyYW50X21lbWJlcnMYDiADKAsyNS56aXRhZGVsLmFkbWluLnYxLkltcG9ydERhdGFTdWNjZXNzUHJvamVjdEdyYW50TWVtYmVyEhEKCW9pZGNfaXBkcxgPIAMoCRIQCghqd3RfaWRwcxgQIAMoCRIRCglpZHBfbGlua3MYESADKAkSQAoKdXNlcl9saW5rcxgSIAMoCzIsLnppdGFkZWwuYWRtaW4udjEuSW1wb3J0RGF0YVN1Y2Nlc3NVc2VyTGlua3MSRgoNdXNlcl9tZXRhZGF0YRgTIAMoCzIvLnppdGFkZWwuYWRtaW4udjEuSW1wb3J0RGF0YVN1Y2Nlc3NVc2VyTWV0YWRhdGESDwoHZG9tYWlucxgUIAMoCRIQCghhcHBfa2V5cxgVIAMoCRIUCgxtYWNoaW5lX2tleXMYFiADKAkiVQodSW1wb3J0RGF0YVN1Y2Nlc3NQcm9qZWN0R3JhbnQSEAoIZ3JhbnRfaWQYASABKAkSEgoKcHJvamVjdF9pZBgCIAEoCRIOCgZvcmdfaWQYAyABKAkiQQoaSW1wb3J0RGF0YVN1Y2Nlc3NVc2VyR3JhbnQSEgoKcHJvamVjdF9pZBgBIAEoCRIPCgd1c2VyX2lkGAIgASgJIkUKHkltcG9ydERhdGFTdWNjZXNzUHJvamVjdE1lbWJlchISCgpwcm9qZWN0X2lkGAEgASgJEg8KB3VzZXJfaWQYAiABKAkiXAojSW1wb3J0RGF0YVN1Y2Nlc3NQcm9qZWN0R3JhbnRNZW1iZXISEgoKcHJvamVjdF9pZBgBIAEoCRIQCghncmFudF9pZBgCIAEoCRIPCgd1c2VyX2lkGAMgASgJIm0KGkltcG9ydERhdGFTdWNjZXNzVXNlckxpbmtzEg8KB3VzZXJfaWQYASABKAkSGAoQZXh0ZXJuYWxfdXNlcl9pZBgCIAEoCRIUCgxkaXNwbGF5X25hbWUYAyABKAkSDgoGaWRwX2lkGAQgASgJIj0KHUltcG9ydERhdGFTdWNjZXNzVXNlck1ldGFkYXRhEg8KB3VzZXJfaWQYASABKAkSCwoDa2V5GAIgASgJIsQdChFFeHBvcnREYXRhUmVxdWVzdBJBCgdvcmdfaWRzGAEgAygJQjCSQS1KK1siMTE5MzQ1OTM4NDUxNzg2NzkwIiwgIjc2NjkzODc1NTc0NTUzOTI2Il0SGAoQZXhjbHVkZWRfb3JnX2lkcxgCIAMoCRIWCg53aXRoX3Bhc3N3b3JkcxgDIAEoCBIQCgh3aXRoX290cBgEIAEoCBIXCg9yZXNwb25zZV9vdXRwdXQYBSABKAgSRQoMbG9jYWxfb3V0cHV0GAYgASgLMi8ueml0YWRlbC5hZG1pbi52MS5FeHBvcnREYXRhUmVxdWVzdC5Mb2NhbE91dHB1dBI/CglzM19vdXRwdXQYByABKAsyLC56aXRhZGVsLmFkbWluLnYxLkV4cG9ydERhdGFSZXF1ZXN0LlMzT3V0cHV0EkEKCmdjc19vdXRwdXQYCCABKAsyLS56aXRhZGVsLmFkbWluLnYxLkV4cG9ydERhdGFSZXF1ZXN0LkdDU091dHB1dBIbCgd0aW1lb3V0GAkgASgJQgqSQQdKBSIzMG0iGhsKC0xvY2FsT3V0cHV0EgwKBHBhdGgYASABKAkaeQoIUzNPdXRwdXQSDAoEcGF0aBgBIAEoCRIQCghlbmRwb2ludBgCIAEoCRIVCg1hY2Nlc3Nfa2V5X2lkGAMgASgJEhkKEXNlY3JldF9hY2Nlc3Nfa2V5GAQgASgJEgsKA3NzbBgFIAEoCBIOCgZidWNrZXQYBiABKAkajhkKCUdDU091dHB1dBIqCgZidWNrZXQYASABKAlCGpJBF0oVInppdGFkZWwtdGVzdC1idWNrZXQiEqoYChNzZXJ2aWNlYWNjb3VudF9qc29uGAIgASgJQowYkkGIGEqFGCJld29nSUNKMGVYRlVKRWZqanVlOVdGSmlzaGllV05qYjNWdWRDSXNDaUFnSW5CeWIycGxZM1JmYVdRaU9pQWlZMkZ2Y3kweU5EQTRNRGtpTEFvZ0lDSndjbWwyWVhSbFgydGxlVjlwWkNJNklDSmpNbUZsWVdRd1pqWXdPRGs1TUdVNE56TTBOamxsWVRoaVlXWmxNamRoWkdRMllUQXlNelkySWl3S0lDQWljSEpwZG1GMFpWOXJaWGtpT2lBaUxTMHRMUzFDUlVkSlRpQlFVa2xXUVZSRklFdEZXUzB0SkZPZ2o4SmVKRk5PRUZHUWtGRVFVNUNaMnR4YUd0cFJ6bDNNRUpCVVVWR1FVRlRRMEpMWjNkbloxTnJRV2RGUVVGdlNVSkJVVU5aY0hscU1EQnFNblJDUlRoT1hHNU5Zbk5SU1VrM2RraHVkRzVvVVcxUVdUaERjV1p5VHpkdVpYVjFjSFJ1ZW1waE5HeEphMHBMZURObWNGWkZSREpVV1hKeVNXVWZoNUpmc29peG1YRzQyTVRsVGVUVkxNV0ZZWTA1WGFteDBaMVV5TVZWdmJqSkxaemRCYmk5QlZXSmtSRGR2VVV4YVdFUjFNVTByVjA5blYwTm5kVWxLWjBaQ05qaFZhRU5uWEc1YWNIQnRSMUZhZVROdk5ESmFZVkZDVGtkVlJscHJSMVo2VW5OdFUyNHpha2RXWm1OYVUyMDJZV0pDVG05eGFpdHVjRlZ3TWpKcmFEZGtkdXJUSkZJU0U1NUhWWFpCVldzMGNXRXJNWGRuUjFCbE5sTkVUM1E0TlVRNFdGWktWM1VyYmxjMmNUTndRamgwV2xsQ01uSldNbHBFY0dFd0sxTm5VekJCWVdjelNYaDFYRzVDT1ZwWmRtMTRjVlpxWWpSWVEyaDBhME5EVGpSb1MyNUdTMU41SzA5S2RuSkJjalppU1RaRGVrMHJSelZZUVcxSFdVeEhWR3hwUlVNd1ZVbENWWFZsWEc0NFUybGxiSFZWY2tGblRVSkJRVVZEWjJkRlFVZzBiMVlyTjAwclpTOU9VMk1yY25NNU9VZExVbkI0V2t0a1VFTllSMXBxVW1KaGF6UjFVVzVqUXk5WlhHNUJlWEZ2UzNSTWRuVkhlVXNyVjBodWFFSjNWVlZwTVhnMlRVTTJTR3RIYzNsS0wydFZORXB6TDNRNVdqaG9MMDFyY2xCMUwzTkpaR05CWkZSblptWndYRzVxWjJJNFkxTnFZMjlzVldOdWRqQnZaR2tyUkRZclJVUlRkQ3RPVmtOS2RXWm1Na1U1UVdoRGJsWlJaazVPZWl0TVEwOU1jR0pvZUZnMFdpOXJRVXgwWEc1UWVISTBURzV5ZDJWRVVXeEVjRkJ0ZFhoaWJHcG9lbEpIYkVoYVZGZDFZVlJLU1U5TGIyOVVTekJYTjIxT0sybHFVWHA0YzFwTVlWRnNRamt5YW5obFhHNVZNM0JHTUZreksybElSVzQyU3pCVmIyUlJPSEIwYjJkbGQzTmpNakZZVFRaR2JrVlRNVkI0T0ZCVVdUTkhXbVZuWkVkNGVVNXJWbFZ3ZGtsRVprUmpYRzVSVjNsQmQyTnlTMjh6ZW5oNVZVTTRWa1pyUkZaalppdExTR001VTNOT1NrOVFXVkpsWWtRNVVsRkxRbWRSUkZGallUVldUV1l5Ymt4MFdrTnBjMk0yWEc1c2VFeG5OekF2TnpWVWVrTjFSMlV2WjBKUlZHa3JVR2syTDFsSVdYVmlWR2RQY0Vrd05rTjNUbmROT1VsVk9FSXpkMnBqV0hObmRHazNRbVZxUm1oeFhHNVBVRlJpU1M4ekwwdzJVM0JNZDJkMGQxUm1TRGh3WWxGYVVWQkNXVk0yVG1remNsVjRPV3BvYTNRM1J6UkdlRGhIVG5oTmFuUnNaakZqSzNaRWJFNHJYRzQxZDJwMmR5dExUMlJ5WW5GNFRqazBhMlZzYXpGRVRpOU9kMHRDWjFGRE4yVjJXWEZHWjNRd01XVktPVmcxTlRkTVVVcDZhakJxY21ZdllrMWlZaXMyWEc1UFdrcEhVMk5YWTFSMk4zb3hXRWRzUlRGRVptcFhlRGRrUTB0UE5HNUNibkEzVEhCRE9GaENaVUkyYTFBMmVrSlJZazl0Um1zdmJXdG5lbTFTVTJGNFhHNVNaMm8yTjNWelFVZHNVelF5Y2t0TWVVYzNZM2M0WkhwckwyOVRhV1EzY1RkR2FERXZiMmhDWm1SeFluVm1kemRWWTJGRU1tSjZlVU5wUWpSRWRtdzBYRzVtUkRKdFJpdHVOM0pSUzBKblVVTlJSbVZWUTAxNmJ6VmtTMFJpUVc0NVVrOTBhbkkzT0VWRlUwdFFSbTVvTjNCUGVXMXNhMVVyU0hKelFUQjJkVXc0WEc1V1QwdGxWVTUxUlhNMlNtcG5WVVJTT1VaQ01YUklZaTlPVFRWSWNsRXZORGRWU1d0elV6WkZWbGhUYmtaclJ6ZEVlRXd4TDJaVVQxQlBWbkJ4VkcwMlhHNHdhVEp2U2tSVlFsTk1jME5GYkd0aU1YcDFRa2RGVjJWbU0yVXJaRVpMTTB0Q1JDOVlRa3RvYXl0S1FsTnlSMGM0UzFjMk9IZDRaRFZSUzBKblVVTlJYRzVvYW5sdWRYWkRMemd6VjNsM2JtaDNZV2RWWlhkc1JYSlJhVEJzT0VkRVFteFZiaXR3ZWxsUWVHaElhVTVEVGpCYWMzbE5WMUZDVFhSMk1VRXJjWGNyWEc1TE9XWlBjMVZYVlZoQ016WTNhRGhzY0RWc2RYRnVjVlIxZG1vMGRHdDNZV3R0ZFhaNlYyZGFXSHBNTm1kYVZITkVkVzUyWnpOclNYcDNWVlJNTTJSS1hHNHdSVXAwVXpOalRWUmFSM1JTU2xZNWQxRTVkMkYyVTNRdlZVdEZZWEkzUkhNM2NuVm9SR0poZWxGTFFtZENPRVF2Ym04M05YZElTVzl6ZDNwNWJVbzNYRzQzU1ROWGVrZ3pVelJzVjJzMmJVZE1kamRsVG5SM2JGQlBXVlI2VkhoeVZGUnRWekpIUkRFeE5saFFSa1FyYlVGbmFuSXdZbE56TURkSmQyRjVheXR6WEc1WlVtdEdXbVEwZW1abmIyWnlWVTFRUzFkNldWQldTMFJQT1ZOR01sRlRVMFY2U1ZObVUzcDNTa1pDV0ZwNmQycEtlSGRuYlhJd2JEUjZhREp2WlVSVFhHNWlZWFpPWkRWdmFIWk5SMDVXWlVackt6VmtaM3BLVUVoY2JpMHRMUzB0UlU1RUlGQlNTVlpCVkVVZ1MwVlpMUzB0TFMxY2JpSXNDaUFnSW1Oc2FXVnVkRjlsYldGcGJDSTZJQ0p2Y21KdmN5MWlaVzU2UUdOaGIzTXRNalF3T0RBNUxtbGhiUzVuYzJWeWRtbGpaV0ZqWTI5MWJuUXVZMjl0SWl3S0lDQWlZMnhwWlc1MFgybGtJam9nSWpFeE16VTBPVGt3TkRNMk5qY3pNakUxTXpNMU5TSXNDaUFnSW1GMWRHaGZkWEpwSWpvZ0ltaDBkSEJ6T2k4dllXTmpiM1Z1ZEhNdVoyOXZaMnhsTG1OdmJTOXZMMjloZFhSb01pOWhkWFJvSWl3S0lDQWlkRzlyWlc1ZmRYSnBJam9nSW1oMGRIQnpPaTh2YjJGMWRHZ3lMbWR2YjJkc1pXRndhWE11WTI5dEwzUnZhMlZ1SWl3S0lDQWlZWFYwYUY5d2NtOTJhV1JsY2w5NE5UQTVYMk5sY25SZmRYSnNJam9nSW1oMGRIQnpPaTh2ZDNkM0xtZHZiMmRzWldGd2FYTXVZMjl0TDI5aGRYUm9NaTkyTVM5alpYSjBjeUlzQ2lBZ0ltTnNhV1Z1ZEY5NE5UQTVYMk5sY25SZmRYSnNJam9nSW1oMGRIQnpPaTh2ZDNkM0xtZHZiMmRzWldGd2FYTXVZMjl0TDNKdlltOTBMM1l4TDIxbGRHRmtZWFJoTDNnMU1Ea3ZiM0ppYjNNdFltVnVlaVUwTUdOaGIzTXRNalF3T0RBNUxtbGhiUzVuYzJWeWRtbGpaV0ZqWTI5MWJuUXVZMjl0SWdwOUNnPT0iEigKBHBhdGgYAyABKAlCGpJBF0oVIm15X2V4cG9ydF9maWxlLmpzb24iIj0KEkV4cG9ydERhdGFSZXNwb25zZRInCgRvcmdzGAEgAygLMhkueml0YWRlbC5hZG1pbi52MS5EYXRhT3JnIr4LChFMaXN0RXZlbnRzUmVxdWVzdBL9AQoIc2VxdWVuY2UYASABKARC6gGSQeYBMt4BU2VxdWVuY2UgcmVwcmVzZW50cyB0aGUgb3JkZXIgb2YgZXZlbnRzLiBJdCdzIGFsd2F5cyBjb3VudGluZy4gSWYgYXNjIGlzIGZhbHNlLCB0aGUgc2VxdWVuY2UgaXMgdXNlZCBhcyBsZXNzZXIgdGhhbiBmaWx0ZXIuIElmIGFzYyBpcyB0cnVlIHNlcXVlbmNlIGlzIHVzZWQgYXMgZ3JlYXRlciB0aGFuIGZpbHRlci4gSWYgdGhlIHNlcXVlbmNlIGlzIDAgdGhlIGZpZWxkIGlzIGlnbm9yZWQuSgMiMiISOgoFbGltaXQYAiABKA1CK5JBKDIiTWF4aW11bSBhbW91bnQgb2YgZXZlbnRzIHJldHVybmVkLkoCMjASNQoDYXNjGAMgASgIQiiSQSUyI2RlZmF1bHQgaXMgZGVzY2VuZGluZyBzb3J0aW5nIG9yZGVyEjoKDmVkaXRvcl91c2VyX2lkGAQgASgJQiKSQRVKEyI2OTYyOTAyMzkwNjQ4ODMzNCL6QgdyBRAAGMgBEocBCgtldmVudF90eXBlcxgFIAMoCUJykkFnMj9UaGUgdHlwZXMgYXJlIGZpbHRlcmVkIGJ5ICdvcicgYW5kIG11c3QgbWF0Y2ggdGhlIHR5cGUgZXhhY3RseS5KJFsidXNlci5odW1hbi5hZGRlZCIsICJ1c2VyLm1hY2hpbmUiXfpCBZIBAhAeEjgKDGFnZ3JlZ2F0ZV9pZBgGIAEoCUIikkEVShMiNjk2MjkwMjM5MDY0ODgzMzQi+kIHcgUQABjIARIsCg9hZ2dyZWdhdGVfdHlwZXMYByADKAlCE5JBCEoGInVzZXIi+kIFkgECEAoSOgoOcmVzb3VyY2Vfb3duZXIYCCABKAlCIpJBFUoTIjY5NjI5MDIzOTA2NDg4MzM0IvpCB3IFEAAYyAESagoNY3JlYXRpb25fZGF0ZRgJIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBCNxgBkkEyMhFVc2UgZnJvbSBpbnN0ZWFkLkodIjIwMTktMDQtMDFUMDg6NDU6MDAuMDAwMDAwWiISSAoFcmFuZ2UYCiABKAsyNy56aXRhZGVsLmFkbWluLnYxLkxpc3RFdmVudHNSZXF1ZXN0LmNyZWF0aW9uX2RhdGVfcmFuZ2VIABLUAQoEZnJvbRgLIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBCpwGSQaMBMoEBSWYgYXNjIGlzIGZhbHNlLCB0aGUgZXZlbnRzIHJldHVybmVkIGFyZSBvbGRlciB0aGFuIHRoZSBVVEMgZnJvbSBkYXRlLiBJZiBhc2MgaXMgdHJ1ZSwgdGhlIGV2ZW50cyByZXR1cm5lZCBhcmUgeW91bmdlciB0aGFuIGZyb20uSh0iMjAxOS0wNC0wMVQwODo0NTowMC4wMDAwMDBaIkgAGqYCChNjcmVhdGlvbl9kYXRlX3JhbmdlEoYBCgVzaW5jZRgBIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBCW5JBWDI3VGhlIGV2ZW50cyByZXR1cm5lZCBhcmUgeW91bmdlciB0aGFuIHRoZSBVVEMgc2luY2UgZGF0ZUodIjIwMTktMDQtMDFUMDg6NDU6MDAuMDAwMDAwWiIShQEKBXVudGlsGAIgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcEJakkFXMjZUaGUgZXZlbnRzIHJldHVybmVkIGFyZSBvbGRlciB0aGFuIHRoZSBVVEMgdW50aWwgZGF0ZS5KHSIyMDE5LTA0LTAxVDA4OjQ1OjAwLjAwMDAwMFoiQhYKFGNyZWF0aW9uX2RhdGVfZmlsdGVyIj0KEkxpc3RFdmVudHNSZXNwb25zZRInCgZldmVudHMYASADKAsyFy56aXRhZGVsLmV2ZW50LnYxLkV2ZW50IhcKFUxpc3RFdmVudFR5cGVzUmVxdWVzdCJKChZMaXN0RXZlbnRUeXBlc1Jlc3BvbnNlEjAKC2V2ZW50X3R5cGVzGAEgAygLMhsueml0YWRlbC5ldmVudC52MS5FdmVudFR5cGUiGwoZTGlzdEFnZ3JlZ2F0ZVR5cGVzUmVxdWVzdCJWChpMaXN0QWdncmVnYXRlVHlwZXNSZXNwb25zZRI4Cg9hZ2dyZWdhdGVfdHlwZXMYASADKAsyHy56aXRhZGVsLmV2ZW50LnYxLkFnZ3JlZ2F0ZVR5cGUiJwolQWN0aXZhdGVGZWF0dXJlTG9naW5EZWZhdWx0T3JnUmVxdWVzdCJUCiZBY3RpdmF0ZUZlYXR1cmVMb2dpbkRlZmF1bHRPcmdSZXNwb25zZRIqCgdkZXRhaWxzGAEgASgLMhkueml0YWRlbC52MS5PYmplY3REZXRhaWxzIrYBChVMaXN0TWlsZXN0b25lc1JlcXVlc3QSJAoFcXVlcnkYASABKAsyFS56aXRhZGVsLnYxLkxpc3RRdWVyeRJACg5zb3J0aW5nX2NvbHVtbhgCIAEoDjIoLnppdGFkZWwubWlsZXN0b25lLnYxLk1pbGVzdG9uZUZpZWxkTmFtZRI1CgdxdWVyaWVzGAMgAygLMiQueml0YWRlbC5taWxlc3RvbmUudjEuTWlsZXN0b25lUXVlcnkicwoWTGlzdE1pbGVzdG9uZXNSZXNwb25zZRIoCgdkZXRhaWxzGAEgASgLMhcueml0YWRlbC52MS5MaXN0RGV0YWlscxIvCgZyZXN1bHQYAiADKAsyHy56aXRhZGVsLm1pbGVzdG9uZS52MS5NaWxlc3RvbmUi+wMKFlNldFJlc3RyaWN0aW9uc1JlcXVlc3QS8AEKIGRpc2FsbG93X3B1YmxpY19vcmdfcmVnaXN0cmF0aW9uGAEgASgIQsABkkG8ATK5AWRlZmluZXMgaWYgWklUQURFTCBzaG91bGQgZXhwb3NlIHRoZSBlbmRwb2ludCAvdWkvbG9naW4vcmVnaXN0ZXIvb3JnLiBJZiBpdCBpcyB0cnVlLCB0aGUgb3JnIHJlZ2lzdHJhdGlvbiBlbmRwb2ludCByZXR1cm5zIHRoZSBIVFRQIHN0YXR1cyA0MDQgb24gR0VUIHJlcXVlc3RzLCBhbmQgNDA5IG9uIFBPU1QgcmVxdWVzdHMuSACIAQESsgEKEWFsbG93ZWRfbGFuZ3VhZ2VzGAIgASgLMiEueml0YWRlbC5hZG1pbi52MS5TZWxlY3RMYW5ndWFnZXNCb5JBbDJqcmVzdHJpY3RzIHRoZSBhbGxvd2VkIGxhbmd1YWdlcy4gSWYgYWxsb3dlZF9sYW5ndWFnZXMgaXMgdW5kZWZpbmVkLCB0aGUgYWxsb3dlZCBsYW5ndWFnZXMgYXJlIG5vdCBjaGFuZ2VkLkgBiAEBQiMKIV9kaXNhbGxvd19wdWJsaWNfb3JnX3JlZ2lzdHJhdGlvbkIUChJfYWxsb3dlZF9sYW5ndWFnZXMieAoPU2VsZWN0TGFuZ3VhZ2VzEmUKBGxpc3QYASADKAlCV5JBVDJSZGVmaW5lcyB3aGljaCBsYW5ndWFnZXMgdG8gc2VsZWN0LiBBbiBlbXB0eSBsaXN0IG1lYW5zIGFsbCBsYW5ndWFnZXMgYXJlIHNlbGVjdGVkLiJFChdTZXRSZXN0cmljdGlvbnNSZXNwb25zZRIqCgdkZXRhaWxzGAEgASgLMhkueml0YWRlbC52MS5PYmplY3REZXRhaWxzIhgKFkdldFJlc3RyaWN0aW9uc1JlcXVlc3QigQQKF0dldFJlc3RyaWN0aW9uc1Jlc3BvbnNlEioKB2RldGFpbHMYASABKAsyGS56aXRhZGVsLnYxLk9iamVjdERldGFpbHMS6wEKIGRpc2FsbG93X3B1YmxpY19vcmdfcmVnaXN0cmF0aW9uGAIgASgIQsABkkG8ATK5AWRlZmluZXMgaWYgWklUQURFTCBzaG91bGQgZXhwb3NlIHRoZSBlbmRwb2ludCAvdWkvbG9naW4vcmVnaXN0ZXIvb3JnLiBJZiBpdCBpcyB0cnVlLCB0aGUgb3JnIHJlZ2lzdHJhdGlvbiBlbmRwb2ludCByZXR1cm5zIHRoZSBIVFRQIHN0YXR1cyA0MDQgb24gR0VUIHJlcXVlc3RzLCBhbmQgNDA5IG9uIFBPU1QgcmVxdWVzdHMuEssBChFhbGxvd2VkX2xhbmd1YWdlcxgDIAMoCUKvAZJBqwEyqAFkZWZpbmVzIHRoZSBhbGxvd2VkIGxhbmd1YWdlcy4gSWYgYWxsb3dlZF9sYW5ndWFnZXMgaGFzIG9uZSBvciBtb3JlIGVudHJpZXMsIG9ubHkgdGhlc2UgbGFuZ3VhZ2VzIGFyZSBhbGxvd2VkLiBJZiBpdCBoYXMgbm8gZW50cmllcywgYWxsIHN1cHBvcnRlZCBsYW5ndWFnZXMgYXJlIGFsbG93ZWQy97cFCgxBZG1pblNlcnZpY2UStwIKB0hlYWx0aHoSIC56aXRhZGVsLmFkbWluLnYxLkhlYWx0aHpSZXF1ZXN0GiEueml0YWRlbC5hZG1pbi52MS5IZWFsdGh6UmVzcG9uc2Ui5gGSQdIBCgdHZW5lcmFsEgdIZWFsdGh6Gn5UaGUgaGVhbHRoIGVuZHBvaW50IGFsbG93cyBhbiBleHRlcm5hbCBzeXN0ZW0gdG8gcHJvYmUgaWYgWklUQURFTCBzeXN0ZW0gQVBJIGlzIGFsaXZlLiBSZXNwb25zZSBhcyBzb29uIGFzIFpJVEFETEUgaXMgcnVubmluZy5KGAoDMjAwEhEKD1pJVEFERUwgc3RhcnRlZEokCgdkZWZhdWx0EhkKF1pJVEFERUwgTk9UIHN0YXJ0ZWQgeWV0gtPkkwIKEggvaGVhbHRoehKfAgoVR2V0U3VwcG9ydGVkTGFuZ3VhZ2VzEi4ueml0YWRlbC5hZG1pbi52MS5HZXRTdXBwb3J0ZWRMYW5ndWFnZXNSZXF1ZXN0Gi8ueml0YWRlbC5hZG1pbi52MS5HZXRTdXBwb3J0ZWRMYW5ndWFnZXNSZXNwb25zZSKkAZJBfAoHR2VuZXJhbBITU3VwcG9ydGVkIExhbmd1YWdlcxpcVGhlIHN1cHBvcnRlZC9kZWZhdWx0IGxhbmd1YWdlcyBvZiB0aGUgc3lzdGVtIHdpbGwgYmUgcmV0dXJuZWQgYnkgdGhlIGxhbmd1YWdlIGFiYnJldmlhdGlvbi6CtRgPCg1hdXRoZW50aWNhdGVkgtPkkwIMEgovbGFuZ3VhZ2VzEq4CChNHZXRBbGxvd2VkTGFuZ3VhZ2VzEiwueml0YWRlbC5hZG1pbi52MS5HZXRBbGxvd2VkTGFuZ3VhZ2VzUmVxdWVzdBotLnppdGFkZWwuYWRtaW4udjEuR2V0QWxsb3dlZExhbmd1YWdlc1Jlc3BvbnNlIrkBkkGIAQoMUmVzdHJpY3Rpb25zEhFBbGxvd2VkIExhbmd1YWdlcxplSWYgdGhlIGxhbmd1YWdlcyBhcmUgcmVzdHJpY3RlZCwgb25seSB0aG9zZSBhcmUgcmV0dXJuZWQuIEVsc2UsIGFsbCBzdXBwb3J0ZWQgbGFuZ3VhZ2VzIGFyZSByZXR1cm5lZC6CtRgPCg1hdXRoZW50aWNhdGVkgtPkkwIUEhIvbGFuZ3VhZ2VzL2FsbG93ZWQSxQIKElNldERlZmF1bHRMYW5ndWFnZRIrLnppdGFkZWwuYWRtaW4udjEuU2V0RGVmYXVsdExhbmd1YWdlUmVxdWVzdBosLnppdGFkZWwuYWRtaW4udjEuU2V0RGVmYXVsdExhbmd1YWdlUmVzcG9uc2Ui0wGSQZsBCgdHZW5lcmFsEhVTZXQgRGVmYXVsdCBMYW5ndWFnZXMaeVNldCB0aGUgbGFuZ3VhZ2UgdGhhdCBpcyB1c2VkIGFzIGEgZmFsbGJhY2svZGVmYXVsdCBpZiB0aGUgdXNlciBoYXMgY29uZmlndXJlZCBzb21ldGhpbmcgdGhhdCBpcyBub3QgcHJvdmlkZWQgYnkgWklUQURFTC6CtRgLCglpYW0ud3JpdGWC0+STAh8aHS9sYW5ndWFnZXMvZGVmYXVsdC97bGFuZ3VhZ2V9Er0CChJHZXREZWZhdWx0TGFuZ3VhZ2USKy56aXRhZGVsLmFkbWluLnYxLkdldERlZmF1bHRMYW5ndWFnZVJlcXVlc3QaLC56aXRhZGVsLmFkbWluLnYxLkdldERlZmF1bHRMYW5ndWFnZVJlc3BvbnNlIssBkkGfAQoHR2VuZXJhbBIVR2V0IERlZmF1bHQgTGFuZ3VhZ2VzGn1SZXR1cm5zIHRoZSBsYW5ndWFnZSB0aGF0IGlzIHVzZWQgYXMgYSBmYWxsYmFjay9kZWZhdWx0IGlmIHRoZSB1c2VyIGhhcyBjb25maWd1cmVkIHNvbWV0aGluZyB0aGF0IGlzIG5vdCBwcm92aWRlZCBieSBaSVRBREVMLoK1GAoKCGlhbS5yZWFkgtPkkwIUEhIvbGFuZ3VhZ2VzL2RlZmF1bHQS/QEKDUdldE15SW5zdGFuY2USJi56aXRhZGVsLmFkbWluLnYxLkdldE15SW5zdGFuY2VSZXF1ZXN0Gicueml0YWRlbC5hZG1pbi52MS5HZXRNeUluc3RhbmNlUmVzcG9uc2UimgGSQXQKCEluc3RhbmNlEg9HZXQgTXkgSW5zdGFuY2UaV1JldHVybnMgdGhlIGRldGFpbHMgYWJvdXQgdGhlIGN1cnJlbnQgaW5zdGFuY2Ugc3VjaCBhcyB0aGUgbmFtZSwgdmVyc2lvbiwgZG9tYWlucywgZXRjLoK1GAoKCGlhbS5yZWFkgtPkkwIPEg0vaW5zdGFuY2VzL21lEr8CChNMaXN0SW5zdGFuY2VEb21haW5zEiwueml0YWRlbC5hZG1pbi52MS5MaXN0SW5zdGFuY2VEb21haW5zUmVxdWVzdBotLnppdGFkZWwuYWRtaW4udjEuTGlzdEluc3RhbmNlRG9tYWluc1Jlc3BvbnNlIsoBkkGgAQoISW5zdGFuY2USFUxpc3QgSW5zdGFuY2UgRG9tYWlucxp9UmV0dXJucyBhIGxpc3Qgb2YgZG9tYWlucyB0aGF0IGFyZSBjb25maWd1cmVkIGZvciB0aGlzIFpJVEFERUwgaW5zdGFuY2UuIFRoZXNlIGRvbWFpbnMgYXJlIHRoZSBVUkxzIHdoZXJlIFpJVEFERUwgaXMgcnVubmluZy6CtRgKCghpYW0ucmVhZILT5JMCEiIQL2RvbWFpbnMvX3NlYXJjaBLlAgoaTGlzdEluc3RhbmNlVHJ1c3RlZERvbWFpbnMSMy56aXRhZGVsLmFkbWluLnYxLkxpc3RJbnN0YW5jZVRydXN0ZWREb21haW5zUmVxdWVzdBo0LnppdGFkZWwuYWRtaW4udjEuTGlzdEluc3RhbmNlVHJ1c3RlZERvbWFpbnNSZXNwb25zZSLbAZJBqQEKCEluc3RhbmNlEh1MaXN0IEluc3RhbmNlIFRydXN0ZWQgRG9tYWlucxp+UmV0dXJucyBhIGxpc3Qgb2YgZG9tYWlucyB0aGF0IGFyZSBjb25maWd1cmVkIGZvciB0aGlzIFpJVEFERUwgaW5zdGFuY2UuIFRoZXNlIGRvbWFpbnMgYXJlIHRydXN0ZWQgdG8gYmUgdXNlZCBhcyBwdWJsaWMgaG9zdHMugrUYCgoIaWFtLnJlYWSC0+STAhoiGC90cnVzdGVkX2RvbWFpbnMvX3NlYXJjaBLcAgoYQWRkSW5zdGFuY2VUcnVzdGVkRG9tYWluEjEueml0YWRlbC5hZG1pbi52MS5BZGRJbnN0YW5jZVRydXN0ZWREb21haW5SZXF1ZXN0GjIueml0YWRlbC5hZG1pbi52MS5BZGRJbnN0YW5jZVRydXN0ZWREb21haW5SZXNwb25zZSLYAZJBqgEKCEluc3RhbmNlEh5BZGQgYW4gSW5zdGFuY2UgVHJ1c3RlZCBEb21haW4aflJldHVybnMgYSBsaXN0IG9mIGRvbWFpbnMgdGhhdCBhcmUgY29uZmlndXJlZCBmb3IgdGhpcyBaSVRBREVMIGluc3RhbmNlLiBUaGVzZSBkb21haW5zIGFyZSB0cnVzdGVkIHRvIGJlIHVzZWQgYXMgcHVibGljIGhvc3RzLoK1GAsKCWlhbS53cml0ZYLT5JMCFToBKiIQL3RydXN0ZWRfZG9tYWlucxLuAgobUmVtb3ZlSW5zdGFuY2VUcnVzdGVkRG9tYWluEjQueml0YWRlbC5hZG1pbi52MS5SZW1vdmVJbnN0YW5jZVRydXN0ZWREb21haW5SZXF1ZXN0GjUueml0YWRlbC5hZG1pbi52MS5SZW1vdmVJbnN0YW5jZVRydXN0ZWREb21haW5SZXNwb25zZSLhAZJBrQEKCEluc3RhbmNlEiFSZW1vdmUgYW4gSW5zdGFuY2UgVHJ1c3RlZCBEb21haW4aflJldHVybnMgYSBsaXN0IG9mIGRvbWFpbnMgdGhhdCBhcmUgY29uZmlndXJlZCBmb3IgdGhpcyBaSVRBREVMIGluc3RhbmNlLiBUaGVzZSBkb21haW5zIGFyZSB0cnVzdGVkIHRvIGJlIHVzZWQgYXMgcHVibGljIGhvc3RzLoK1GAsKCWlhbS53cml0ZYLT5JMCGyoZL3RydXN0ZWRfZG9tYWlucy97ZG9tYWlufRKCAwoUTGlzdFNlY3JldEdlbmVyYXRvcnMSLS56aXRhZGVsLmFkbWluLnYxLkxpc3RTZWNyZXRHZW5lcmF0b3JzUmVxdWVzdBouLnppdGFkZWwuYWRtaW4udjEuTGlzdFNlY3JldEdlbmVyYXRvcnNSZXNwb25zZSKKApJB1AEKB1NlY3JldHMSFkxpc3QgU2VjcmV0IEdlbmVyYXRvcnMasAFMaXN0cyBhbGwgdGhlIGNvbmZpZ3VyZWQgc2VjcmV0IGdlbmVyYXRvcnMuIFRoZSBnZW5lcmF0b3JzIGRlZmluZSBob3cgYSBzZWNyZXQgc2hvdWxkIGxvb2sgd2hlbiBnZW5lcmF0ZWQgaW4gWklUQURFTC4gRS5nIEVtYWlsIHZlcmlmaWNhdGlvbiBjb2RlLCBwaG9uZSB2ZXJpZmljYXRpb24gY29kZSwgZXRjLoK1GAoKCGlhbS5yZWFkgtPkkwIeOgEqIhkvc2VjcmV0Z2VuZXJhdG9ycy9fc2VhcmNoEt0CChJHZXRTZWNyZXRHZW5lcmF0b3ISKy56aXRhZGVsLmFkbWluLnYxLkdldFNlY3JldEdlbmVyYXRvclJlcXVlc3QaLC56aXRhZGVsLmFkbWluLnYxLkdldFNlY3JldEdlbmVyYXRvclJlc3BvbnNlIusBkkGvAQoHU2VjcmV0cxIUR2V0IFNlY3JldCBHZW5lcmF0b3IajQFHZXQgYSBzcGVjaWZpYyBzZWNyZXQgZ2VuZXJhdG9yIGJ5IGl0cyB0eXBlIChlLmcgUGFzc3dvcmRSZXNldENvZGUpLiBBIGdlbmVyYXRvciBkZWZpbmVzIGhvdyBhIHNlY3JldCBzaG91bGQgbG9vayB3aGVuIGdlbmVyYXRpbmcgaW4gWklUQURFTC6CtRgKCghpYW0ucmVhZILT5JMCJBIiL3NlY3JldGdlbmVyYXRvcnMve2dlbmVyYXRvcl90eXBlfRL+AgoVVXBkYXRlU2VjcmV0R2VuZXJhdG9yEi4ueml0YWRlbC5hZG1pbi52MS5VcGRhdGVTZWNyZXRHZW5lcmF0b3JSZXF1ZXN0Gi8ueml0YWRlbC5hZG1pbi52MS5VcGRhdGVTZWNyZXRHZW5lcmF0b3JSZXNwb25zZSKDApJBwwEKB1NlY3JldHMSF1VwZGF0ZSBTZWNyZXQgR2VuZXJhdG9yGp4BQ2hhbmdlIGEgc3BlY2lmaWMgc2VjcmV0IGdlbmVyYXRvciBjb25maWd1cmF0aW9uIGJ5IGl0cyB0eXBlIChlLmcgUGFzc3dvcmRSZXNldENvZGUpLiBBIGdlbmVyYXRvciBkZWZpbmVzIGhvdyBhIHNlY3JldCBzaG91bGQgbG9vayB3aGVuIGdlbmVyYXRpbmcgaW4gWklUQURFTC6CtRgLCglpYW0ud3JpdGWC0+STAic6ASoaIi9zZWNyZXRnZW5lcmF0b3JzL3tnZW5lcmF0b3JfdHlwZX0SkAEKDUdldFNNVFBDb25maWcSJi56aXRhZGVsLmFkbWluLnYxLkdldFNNVFBDb25maWdSZXF1ZXN0Gicueml0YWRlbC5hZG1pbi52MS5HZXRTTVRQQ29uZmlnUmVzcG9uc2UiLpJBEAoMU01UUCBDb25maWdzWAGCtRgKCghpYW0ucmVhZILT5JMCBxIFL3NtdHASoQEKEUdldFNNVFBDb25maWdCeUlkEioueml0YWRlbC5hZG1pbi52MS5HZXRTTVRQQ29uZmlnQnlJZFJlcXVlc3QaKy56aXRhZGVsLmFkbWluLnYxLkdldFNNVFBDb25maWdCeUlkUmVzcG9uc2UiM5JBEAoMU01UUCBDb25maWdzWAGCtRgKCghpYW0ucmVhZILT5JMCDBIKL3NtdHAve2lkfRKUAQoNQWRkU01UUENvbmZpZxImLnppdGFkZWwuYWRtaW4udjEuQWRkU01UUENvbmZpZ1JlcXVlc3QaJy56aXRhZGVsLmFkbWluLnYxLkFkZFNNVFBDb25maWdSZXNwb25zZSIykkEQCgxTTVRQIENvbmZpZ3NYAYK1GAsKCWlhbS53cml0ZYLT5JMCCjoBKiIFL3NtdHASogEKEFVwZGF0ZVNNVFBDb25maWcSKS56aXRhZGVsLmFkbWluLnYxLlVwZGF0ZVNNVFBDb25maWdSZXF1ZXN0Gioueml0YWRlbC5hZG1pbi52MS5VcGRhdGVTTVRQQ29uZmlnUmVzcG9uc2UiN5JBEAoMU01UUCBDb25maWdzWAGCtRgLCglpYW0ud3JpdGWC0+STAg86ASoaCi9zbXRwL3tpZH0SwwEKGFVwZGF0ZVNNVFBDb25maWdQYXNzd29yZBIxLnppdGFkZWwuYWRtaW4udjEuVXBkYXRlU01UUENvbmZpZ1Bhc3N3b3JkUmVxdWVzdBoyLnppdGFkZWwuYWRtaW4udjEuVXBkYXRlU01UUENvbmZpZ1Bhc3N3b3JkUmVzcG9uc2UiQJJBEAoMU01UUCBDb25maWdzWAGCtRgLCglpYW0ud3JpdGWC0+STAhg6ASoaEy9zbXRwL3tpZH0vcGFzc3dvcmQS5gEKEkFjdGl2YXRlU01UUENvbmZpZxIrLnppdGFkZWwuYWRtaW4udjEuQWN0aXZhdGVTTVRQQ29uZmlnUmVxdWVzdBosLnppdGFkZWwuYWRtaW4udjEuQWN0aXZhdGVTTVRQQ29uZmlnUmVzcG9uc2UidZJBRAoMU01UUCBDb25maWdzEhZBY3RpdmF0ZSBTTVRQIFByb3ZpZGVyGhpBY3RpdmF0ZSBhbiBTTVRQIHByb3ZpZGVyLlgBgrUYCwoJaWFtLndyaXRlgtPkkwIZOgEqIhQvc210cC97aWR9L19hY3RpdmF0ZRK6AQoURGVhY3RpdmF0ZVNNVFBDb25maWcSLS56aXRhZGVsLmFkbWluLnYxLkRlYWN0aXZhdGVTTVRQQ29uZmlnUmVxdWVzdBouLnppdGFkZWwuYWRtaW4udjEuRGVhY3RpdmF0ZVNNVFBDb25maWdSZXNwb25zZSJDkkEQCgxTTVRQIENvbmZpZ3NYAYK1GAsKCWlhbS53cml0ZYLT5JMCGzoBKiIWL3NtdHAve2lkfS9fZGVhY3RpdmF0ZRKfAQoQUmVtb3ZlU01UUENvbmZpZxIpLnppdGFkZWwuYWRtaW4udjEuUmVtb3ZlU01UUENvbmZpZ1JlcXVlc3QaKi56aXRhZGVsLmFkbWluLnYxLlJlbW92ZVNNVFBDb25maWdSZXNwb25zZSI0kkEQCgxTTVRQIENvbmZpZ3NYAYK1GAsKCWlhbS53cml0ZYLT5JMCDCoKL3NtdHAve2lkfRKuAQoSVGVzdFNNVFBDb25maWdCeUlkEisueml0YWRlbC5hZG1pbi52MS5UZXN0U01UUENvbmZpZ0J5SWRSZXF1ZXN0Giwueml0YWRlbC5hZG1pbi52MS5UZXN0U01UUENvbmZpZ0J5SWRSZXNwb25zZSI9kkEQCgxTTVRQIENvbmZpZ3NYAYK1GAsKCWlhbS53cml0ZYLT5JMCFToBKiIQL3NtdHAve2lkfS9fdGVzdBKdAQoOVGVzdFNNVFBDb25maWcSJy56aXRhZGVsLmFkbWluLnYxLlRlc3RTTVRQQ29uZmlnUmVxdWVzdBooLnppdGFkZWwuYWRtaW4udjEuVGVzdFNNVFBDb25maWdSZXNwb25zZSI4kkEQCgxTTVRQIENvbmZpZ3NYAYK1GAsKCWlhbS53cml0ZYLT5JMCEDoBKiILL3NtdHAvX3Rlc3QSoQEKD0xpc3RTTVRQQ29uZmlncxIoLnppdGFkZWwuYWRtaW4udjEuTGlzdFNNVFBDb25maWdzUmVxdWVzdBopLnppdGFkZWwuYWRtaW4udjEuTGlzdFNNVFBDb25maWdzUmVzcG9uc2UiOZJBEAoMU01UUCBDb25maWdzWAGCtRgKCghpYW0ucmVhZILT5JMCEjoBKiINL3NtdHAvX3NlYXJjaBLlAQoSTGlzdEVtYWlsUHJvdmlkZXJzEisueml0YWRlbC5hZG1pbi52MS5MaXN0RW1haWxQcm92aWRlcnNSZXF1ZXN0Giwueml0YWRlbC5hZG1pbi52MS5MaXN0RW1haWxQcm92aWRlcnNSZXNwb25zZSJ0kkFKCg5FbWFpbCBQcm92aWRlchIUTGlzdCBFbWFpbCBwcm92aWRlcnMaIlJldHVybnMgYSBsaXN0IG9mIEVtYWlsIHByb3ZpZGVycy6CtRgKCghpYW0ucmVhZILT5JMCEzoBKiIOL2VtYWlsL19zZWFyY2gSlgIKEEdldEVtYWlsUHJvdmlkZXISKS56aXRhZGVsLmFkbWluLnYxLkdldEVtYWlsUHJvdmlkZXJSZXF1ZXN0Gioueml0YWRlbC5hZG1pbi52MS5HZXRFbWFpbFByb3ZpZGVyUmVzcG9uc2UiqgGSQYoBCg5FbWFpbCBQcm92aWRlchIZR2V0IGFjdGl2ZSBFbWFpbCBwcm92aWRlchpdUmV0dXJucyB0aGUgYWN0aXZlIEVtYWlsIHByb3ZpZGVyIGZyb20gdGhlIHN5c3RlbS4gVGhpcyBpcyB1c2VkIHRvIHNlbmQgRS1NYWlscyB0byB0aGUgdXNlcnMugrUYCgoIaWFtLnJlYWSC0+STAggSBi9lbWFpbBLzAQoUR2V0RW1haWxQcm92aWRlckJ5SWQSLS56aXRhZGVsLmFkbWluLnYxLkdldEVtYWlsUHJvdmlkZXJCeUlkUmVxdWVzdBouLnppdGFkZWwuYWRtaW4udjEuR2V0RW1haWxQcm92aWRlckJ5SWRSZXNwb25zZSJ8kkFYCg5FbWFpbCBQcm92aWRlchIcR2V0IEVtYWlsIHByb3ZpZGVyIGJ5IGl0cyBpZBooR2V0IGEgc3BlY2lmaWMgRW1haWwgcHJvdmlkZXIgYnkgaXRzIElELoK1GAoKCGlhbS5yZWFkgtPkkwINEgsvZW1haWwve2lkfRL/AQoUQWRkRW1haWxQcm92aWRlclNNVFASLS56aXRhZGVsLmFkbWluLnYxLkFkZEVtYWlsUHJvdmlkZXJTTVRQUmVxdWVzdBouLnppdGFkZWwuYWRtaW4udjEuQWRkRW1haWxQcm92aWRlclNNVFBSZXNwb25zZSKHAZJBXwoORW1haWwgUHJvdmlkZXISF0FkZCBTTVRQIEVtYWlsIHByb3ZpZGVyGjRBZGQgYSBuZXcgU01UUCBFbWFpbCBwcm92aWRlciBpZiBub3RoaW5nIGlzIHNldCB5ZXQugrUYCwoJaWFtLndyaXRlgtPkkwIQOgEqIgsvZW1haWwvc210cBL+AgoXVXBkYXRlRW1haWxQcm92aWRlclNNVFASMC56aXRhZGVsLmFkbWluLnYxLlVwZGF0ZUVtYWlsUHJvdmlkZXJTTVRQUmVxdWVzdBoxLnppdGFkZWwuYWRtaW4udjEuVXBkYXRlRW1haWxQcm92aWRlclNNVFBSZXNwb25zZSL9AZJBzwEKDkVtYWlsIFByb3ZpZGVyEhpVcGRhdGUgU01UUCBFbWFpbCBwcm92aWRlchqgAVVwZGF0ZSB0aGUgU01UUCBFbWFpbCBwcm92aWRlciwgYmUgYXdhcmUgdGhhdCB0aGlzIHdpbGwgYmUgYWN0aXZhdGVkIGFzIHNvb24gYXMgaXQgaXMgc2F2ZWQuIFNvIHRoZSB1c2VycyB3aWxsIGdldCBub3RpZmljYXRpb25zIGZyb20gdGhlIG5ld2x5IGNvbmZpZ3VyZWQgU01UUC6CtRgLCglpYW0ud3JpdGWC0+STAhU6ASoaEC9lbWFpbC9zbXRwL3tpZH0S/wEKFEFkZEVtYWlsUHJvdmlkZXJIVFRQEi0ueml0YWRlbC5hZG1pbi52MS5BZGRFbWFpbFByb3ZpZGVySFRUUFJlcXVlc3QaLi56aXRhZGVsLmFkbWluLnYxLkFkZEVtYWlsUHJvdmlkZXJIVFRQUmVzcG9uc2UihwGSQV8KDkVtYWlsIFByb3ZpZGVyEhdBZGQgSFRUUCBFbWFpbCBwcm92aWRlcho0QWRkIGEgbmV3IEhUVFAgRW1haWwgcHJvdmlkZXIgaWYgbm90aGluZyBpcyBzZXQgeWV0LoK1GAsKCWlhbS53cml0ZYLT5JMCEDoBKiILL2VtYWlsL2h0dHAS/gIKF1VwZGF0ZUVtYWlsUHJvdmlkZXJIVFRQEjAueml0YWRlbC5hZG1pbi52MS5VcGRhdGVFbWFpbFByb3ZpZGVySFRUUFJlcXVlc3QaMS56aXRhZGVsLmFkbWluLnYxLlVwZGF0ZUVtYWlsUHJvdmlkZXJIVFRQUmVzcG9uc2Ui/QGSQc8BCg5FbWFpbCBQcm92aWRlchIaVXBkYXRlIEhUVFAgRW1haWwgcHJvdmlkZXIaoAFVcGRhdGUgdGhlIEhUVFAgRW1haWwgcHJvdmlkZXIsIGJlIGF3YXJlIHRoYXQgdGhpcyB3aWxsIGJlIGFjdGl2YXRlZCBhcyBzb29uIGFzIGl0IGlzIHNhdmVkLiBTbyB0aGUgdXNlcnMgd2lsbCBnZXQgbm90aWZpY2F0aW9ucyBmcm9tIHRoZSBuZXdseSBjb25maWd1cmVkIEhUVFAugrUYCwoJaWFtLndyaXRlgtPkkwIVOgEqGhAvZW1haWwvaHR0cC97aWR9Eq0DCh9VcGRhdGVFbWFpbFByb3ZpZGVyU01UUFBhc3N3b3JkEjgueml0YWRlbC5hZG1pbi52MS5VcGRhdGVFbWFpbFByb3ZpZGVyU01UUFBhc3N3b3JkUmVxdWVzdBo5LnppdGFkZWwuYWRtaW4udjEuVXBkYXRlRW1haWxQcm92aWRlclNNVFBQYXNzd29yZFJlc3BvbnNlIpQCkkHdAQoORW1haWwgUHJvdmlkZXISFFVwZGF0ZSBTTVRQIFBhc3N3b3JkGrQBVXBkYXRlIHRoZSBTTVRQIHBhc3N3b3JkIHRoYXQgaXMgdXNlZCBmb3IgdGhlIGhvc3QsIGJlIGF3YXJlIHRoYXQgdGhpcyB3aWxsIGJlIGFjdGl2YXRlZCBhcyBzb29uIGFzIGl0IGlzIHNhdmVkLiBTbyB0aGUgdXNlcnMgd2lsbCBnZXQgbm90aWZpY2F0aW9ucyBmcm9tIHRoZSBuZXdseSBjb25maWd1cmVkIFNNVFAugrUYCwoJaWFtLndyaXRlgtPkkwIeOgEqGhkvZW1haWwvc210cC97aWR9L3Bhc3N3b3JkEvIBChVBY3RpdmF0ZUVtYWlsUHJvdmlkZXISLi56aXRhZGVsLmFkbWluLnYxLkFjdGl2YXRlRW1haWxQcm92aWRlclJlcXVlc3QaLy56aXRhZGVsLmFkbWluLnYxLkFjdGl2YXRlRW1haWxQcm92aWRlclJlc3BvbnNlIniSQUYKDkVtYWlsIFByb3ZpZGVyEhdBY3RpdmF0ZSBFbWFpbCBQcm92aWRlchobQWN0aXZhdGUgYW4gRW1haWwgcHJvdmlkZXIugrUYCwoJaWFtLndyaXRlgtPkkwIaOgEqIhUvZW1haWwve2lkfS9fYWN0aXZhdGUS+AIKF0RlYWN0aXZhdGVFbWFpbFByb3ZpZGVyEjAueml0YWRlbC5hZG1pbi52MS5EZWFjdGl2YXRlRW1haWxQcm92aWRlclJlcXVlc3QaMS56aXRhZGVsLmFkbWluLnYxLkRlYWN0aXZhdGVFbWFpbFByb3ZpZGVyUmVzcG9uc2Ui9wGSQcIBCg5FbWFpbCBQcm92aWRlchIZRGVhY3RpdmF0ZSBFbWFpbCBQcm92aWRlchqUAURlYWN0aXZhdGUgYW4gRW1haWwgcHJvdmlkZXIuIEFmdGVyIGRlYWN0aXZhdGluZyB0aGUgcHJvdmlkZXIsIHRoZSB1c2VycyB3aWxsIG5vdCBiZSBhYmxlIHRvIHJlY2VpdmUgRW1haWwgbm90aWZpY2F0aW9ucyBmcm9tIHRoYXQgcHJvdmlkZXIgYW55bW9yZS6CtRgLCglpYW0ud3JpdGWC0+STAhw6ASoiFy9lbWFpbC97aWR9L19kZWFjdGl2YXRlEqQCChNSZW1vdmVFbWFpbFByb3ZpZGVyEiwueml0YWRlbC5hZG1pbi52MS5SZW1vdmVFbWFpbFByb3ZpZGVyUmVxdWVzdBotLnppdGFkZWwuYWRtaW4udjEuUmVtb3ZlRW1haWxQcm92aWRlclJlc3BvbnNlIq8BkkGJAQoORW1haWwgUHJvdmlkZXISFVJlbW92ZSBFbWFpbCBwcm92aWRlchpgUmVtb3ZlIHRoZSBFbWFpbCBwcm92aWRlciwgYmUgYXdhcmUgdGhhdCB0aGUgdXNlcnMgd2lsbCBub3QgZ2V0IGFuIEUtTWFpbCBpZiBubyBwcm92aWRlciBpcyBzZXQugrUYCwoJaWFtLndyaXRlgtPkkwINKgsvZW1haWwve2lkfRLwAgoZVGVzdEVtYWlsUHJvdmlkZXJTTVRQQnlJZBIyLnppdGFkZWwuYWRtaW4udjEuVGVzdEVtYWlsUHJvdmlkZXJTTVRQQnlJZFJlcXVlc3QaMy56aXRhZGVsLmFkbWluLnYxLlRlc3RFbWFpbFByb3ZpZGVyU01UUEJ5SWRSZXNwb25zZSLpAZJBtQEKDkVtYWlsIFByb3ZpZGVyEhhUZXN0IFNNVFAgRW1haWwgUHJvdmlkZXIaiAFUZXN0IGFuIFNNVFAgRW1haWwgcHJvdmlkZXIgaWRlbnRpZmllZCBieSBpdHMgSUQuIEFmdGVyIHRlc3RpbmcgdGhlIHByb3ZpZGVyLCB0aGUgdXNlcnMgd2lsbCByZWNlaXZlIGluZm9ybWF0aW9uIGFib3V0IHRoZSB0ZXN0IHJlc3VsdHMugrUYCwoJaWFtLndyaXRlgtPkkwIbOgEqIhYvZW1haWwvc210cC97aWR9L190ZXN0EskCChVUZXN0RW1haWxQcm92aWRlclNNVFASLi56aXRhZGVsLmFkbWluLnYxLlRlc3RFbWFpbFByb3ZpZGVyU01UUFJlcXVlc3QaLy56aXRhZGVsLmFkbWluLnYxLlRlc3RFbWFpbFByb3ZpZGVyU01UUFJlc3BvbnNlIs4BkkGfAQoORW1haWwgUHJvdmlkZXISGFRlc3QgU01UUCBFbWFpbCBQcm92aWRlchpzVGVzdCBhbiBTTVRQIEVtYWlsIHByb3ZpZGVyLiBBZnRlciB0ZXN0aW5nIHRoZSBwcm92aWRlciwgdGhlIHVzZXJzIHdpbGwgcmVjZWl2ZSBpbmZvcm1hdGlvbiBhYm91dCB0aGUgdGVzdCByZXN1bHRzLoK1GAsKCWlhbS53cml0ZYLT5JMCFjoBKiIRL2VtYWlsL3NtdHAvX3Rlc3QS4gEKEExpc3RTTVNQcm92aWRlcnMSKS56aXRhZGVsLmFkbWluLnYxLkxpc3RTTVNQcm92aWRlcnNSZXF1ZXN0Gioueml0YWRlbC5hZG1pbi52MS5MaXN0U01TUHJvdmlkZXJzUmVzcG9uc2Uid5JBTwoMU01TIFByb3ZpZGVyEhJMaXN0IFNNUyBQcm92aWRlcnMaK1JldHVybnMgYSBsaXN0IG9mIGNvbmZpZ3VyZWQgU01TIHByb3ZpZGVycy6CtRgKCghpYW0ucmVhZILT5JMCEToBKiIML3Ntcy9fc2VhcmNoEs8BCg5HZXRTTVNQcm92aWRlchInLnppdGFkZWwuYWRtaW4udjEuR2V0U01TUHJvdmlkZXJSZXF1ZXN0Gigueml0YWRlbC5hZG1pbi52MS5HZXRTTVNQcm92aWRlclJlc3BvbnNlImqSQUgKDFNNUyBQcm92aWRlchIQR2V0IFNNUyBQcm92aWRlchomR2V0IGEgc3BlY2lmaWMgU01TIHByb3ZpZGVyIGJ5IGl0cyBJRC6CtRgKCghpYW0ucmVhZILT5JMCCxIJL3Ntcy97aWR9ErsCChRBZGRTTVNQcm92aWRlclR3aWxpbxItLnppdGFkZWwuYWRtaW4udjEuQWRkU01TUHJvdmlkZXJUd2lsaW9SZXF1ZXN0Gi4ueml0YWRlbC5hZG1pbi52MS5BZGRTTVNQcm92aWRlclR3aWxpb1Jlc3BvbnNlIsMBkkGaAQoMU01TIFByb3ZpZGVyEhdBZGQgVHdpbGlvIFNNUyBQcm92aWRlchpxQ29uZmlndXJlIGEgbmV3IFNNUyBwcm92aWRlciBvZiB0aGUgdHlwZSBUd2lsaW8uIEEgcHJvdmlkZXIgaGFzIHRvIGJlIGFjdGl2YXRlZCB0byBiZSBhYmxlIHRvIHNlbmQgbm90aWZpY2F0aW9ucy6CtRgLCglpYW0ud3JpdGWC0+STAhA6ASoiCy9zbXMvdHdpbGlvEt0CChdVcGRhdGVTTVNQcm92aWRlclR3aWxpbxIwLnppdGFkZWwuYWRtaW4udjEuVXBkYXRlU01TUHJvdmlkZXJUd2lsaW9SZXF1ZXN0GjEueml0YWRlbC5hZG1pbi52MS5VcGRhdGVTTVNQcm92aWRlclR3aWxpb1Jlc3BvbnNlItwBkkGuAQoMU01TIFByb3ZpZGVyEhpVcGRhdGUgVHdpbGlvIFNNUyBQcm92aWRlchqBAUNoYW5nZSB0aGUgY29uZmlndXJhdGlvbiBvZiBhbiBTTVMgcHJvdmlkZXIgb2YgdGhlIHR5cGUgVHdpbGlvLiAgQSBwcm92aWRlciBoYXMgdG8gYmUgYWN0aXZhdGVkIHRvIGJlIGFibGUgdG8gc2VuZCBub3RpZmljYXRpb25zLoK1GAsKCWlhbS53cml0ZYLT5JMCFToBKhoQL3Ntcy90d2lsaW8ve2lkfRKtAgocVXBkYXRlU01TUHJvdmlkZXJUd2lsaW9Ub2tlbhI1LnppdGFkZWwuYWRtaW4udjEuVXBkYXRlU01TUHJvdmlkZXJUd2lsaW9Ub2tlblJlcXVlc3QaNi56aXRhZGVsLmFkbWluLnYxLlVwZGF0ZVNNU1Byb3ZpZGVyVHdpbGlvVG9rZW5SZXNwb25zZSKdAZJBagoMU01TIFByb3ZpZGVyEiBVcGRhdGUgVHdpbGlvIFNNUyBQcm92aWRlciBUb2tlbho4Q2hhbmdlIHRoZSB0b2tlbiBvZiB0aGUgU01TIHByb3ZpZGVyIG9mIHRoZSB0eXBlIFR3aWxpby6CtRgLCglpYW0ud3JpdGWC0+STAhs6ASoaFi9zbXMvdHdpbGlvL3tpZH0vdG9rZW4SrwIKEkFkZFNNU1Byb3ZpZGVySFRUUBIrLnppdGFkZWwuYWRtaW4udjEuQWRkU01TUHJvdmlkZXJIVFRQUmVxdWVzdBosLnppdGFkZWwuYWRtaW4udjEuQWRkU01TUHJvdmlkZXJIVFRQUmVzcG9uc2UivQGSQZYBCgxTTVMgUHJvdmlkZXISFUFkZCBIVFRQIFNNUyBQcm92aWRlchpvQ29uZmlndXJlIGEgbmV3IFNNUyBwcm92aWRlciBvZiB0aGUgdHlwZSBIVFRQLiBBIHByb3ZpZGVyIGhhcyB0byBiZSBhY3RpdmF0ZWQgdG8gYmUgYWJsZSB0byBzZW5kIG5vdGlmaWNhdGlvbnMugrUYCwoJaWFtLndyaXRlgtPkkwIOOgEqIgkvc21zL2h0dHASzwIKFVVwZGF0ZVNNU1Byb3ZpZGVySFRUUBIuLnppdGFkZWwuYWRtaW4udjEuVXBkYXRlU01TUHJvdmlkZXJIVFRQUmVxdWVzdBovLnppdGFkZWwuYWRtaW4udjEuVXBkYXRlU01TUHJvdmlkZXJIVFRQUmVzcG9uc2Ui1AGSQagBCgxTTVMgUHJvdmlkZXISGFVwZGF0ZSBIVFRQIFNNUyBQcm92aWRlchp+Q2hhbmdlIHRoZSBjb25maWd1cmF0aW9uIG9mIGFuIFNNUyBwcm92aWRlciBvZiB0aGUgdHlwZSBIVFRQLiBBIHByb3ZpZGVyIGhhcyB0byBiZSBhY3RpdmF0ZWQgdG8gYmUgYWJsZSB0byBzZW5kIG5vdGlmaWNhdGlvbnMugrUYCwoJaWFtLndyaXRlgtPkkwITOgEqGg4vc21zL2h0dHAve2lkfRK4AgoTQWN0aXZhdGVTTVNQcm92aWRlchIsLnppdGFkZWwuYWRtaW4udjEuQWN0aXZhdGVTTVNQcm92aWRlclJlcXVlc3QaLS56aXRhZGVsLmFkbWluLnYxLkFjdGl2YXRlU01TUHJvdmlkZXJSZXNwb25zZSLDAZJBkgEKDFNNUyBQcm92aWRlchIVQWN0aXZhdGUgU01TIFByb3ZpZGVyGmtBY3RpdmF0ZSBhbiBTTVMgcHJvdmlkZXIuIEFmdGVyIGFjdGl2YXRpbmcgYSBwcm92aWRlciwgdGhlIHVzZXJzIHdpbGwgYmUgYWJsZSB0byByZWNlaXZlIFNNUyBub3RpZmljYXRpb25zLoK1GAsKCWlhbS53cml0ZYLT5JMCGDoBKiITL3Ntcy97aWR9L19hY3RpdmF0ZRKsAwoVRGVhY3RpdmF0ZVNNU1Byb3ZpZGVyEi4ueml0YWRlbC5hZG1pbi52MS5EZWFjdGl2YXRlU01TUHJvdmlkZXJSZXF1ZXN0Gi8ueml0YWRlbC5hZG1pbi52MS5EZWFjdGl2YXRlU01TUHJvdmlkZXJSZXNwb25zZSKxApJB/gEKDFNNUyBQcm92aWRlchIXRGVhY3RpdmF0ZSBTTVMgUHJvdmlkZXIa1AFEZWFjdGl2YXRlIGFuIFNNUyBwcm92aWRlci4gQWZ0ZXIgZGVhY3RpdmF0aW5nIHRoZSBwcm92aWRlciwgdGhlIHVzZXJzIHdpbGwgbm90IGJlIGFibGUgdG8gcmVjZWl2ZSBTTVMgbm90aWZpY2F0aW9ucyBmcm9tIHRoYXQgcHJvdmlkZXIgYW55bW9yZS4gSWYgaXQgd2FzIHRoZSBsYXN0IGFjdGl2YXRlZCB0aGV5IHdpbGwgbm90IGdldCBub3RpZmljYXRpb25zIGF0IGFsbIK1GAsKCWlhbS53cml0ZYLT5JMCGjoBKiIVL3Ntcy97aWR9L19kZWFjdGl2YXRlErUCChFSZW1vdmVTTVNQcm92aWRlchIqLnppdGFkZWwuYWRtaW4udjEuUmVtb3ZlU01TUHJvdmlkZXJSZXF1ZXN0Gisueml0YWRlbC5hZG1pbi52MS5SZW1vdmVTTVNQcm92aWRlclJlc3BvbnNlIsYBkkGiAQoMU01TIFByb3ZpZGVyEhNSZW1vdmUgU01TIFByb3ZpZGVyGn1EZWxldGUgYW4gU01TIHByb3ZpZGVyLiBJZiB0aGUgcHJvdmlkZXIgd2FzIHN0aWxsIGFjdGl2ZSB0aGUgdXNlcnMgd2lsbCBub3QgcmVjZWl2ZSBub3RpZmljYXRpb25zIGZyb20gdGhhdCBwcm92aWRlciBhbnltb3JlLoK1GAsKCWlhbS53cml0ZYLT5JMCCyoJL3Ntcy97aWR9EvYBCg9HZXRPSURDU2V0dGluZ3MSKC56aXRhZGVsLmFkbWluLnYxLkdldE9JRENTZXR0aW5nc1JlcXVlc3QaKS56aXRhZGVsLmFkbWluLnYxLkdldE9JRENTZXR0aW5nc1Jlc3BvbnNlIo0BkkFmCghTZXR0aW5ncxIRR2V0IE9JREMgU2V0dGluZ3MaR1RoZSBPSURDIFNldHRpbmdzIGRlZmluZSB0aGUgbGlmZXRpbWVzIG9mIHRoZSBkaWZmZXJlbnQgdG9rZW5zIGluIE9JREMugrUYCgoIaWFtLnJlYWSC0+STAhASDi9zZXR0aW5ncy9vaWRjEtECCg9BZGRPSURDU2V0dGluZ3MSKC56aXRhZGVsLmFkbWluLnYxLkFkZE9JRENTZXR0aW5nc1JlcXVlc3QaKS56aXRhZGVsLmFkbWluLnYxLkFkZE9JRENTZXR0aW5nc1Jlc3BvbnNlIugBkkG8AQoIU2V0dGluZ3MSEUFkZCBPSURDIFNldHRpbmdzGpwBQ3JlYXRlIG5ldyBPSURDIHNldHRpbmdzLiBUaGUgT0lEQyBTZXR0aW5ncyBkZWZpbmUgdGhlIGxpZmV0aW1lcyBvZiB0aGUgZGlmZmVyZW50IHRva2VucyBpbiBPSURDLiBUaGVzZSBzZXR0aW5ncyBhcmUgdXNlZCBmb3IgYWxsIG9yZ2FuaXphdGlvbnMgYW5kIGNsaWVudHMugrUYCwoJaWFtLndyaXRlgtPkkwITOgEqIg4vc2V0dGluZ3Mvb2lkYxLfAgoSVXBkYXRlT0lEQ1NldHRpbmdzEisueml0YWRlbC5hZG1pbi52MS5VcGRhdGVPSURDU2V0dGluZ3NSZXF1ZXN0Giwueml0YWRlbC5hZG1pbi52MS5VcGRhdGVPSURDU2V0dGluZ3NSZXNwb25zZSLtAZJBwQEKCFNldHRpbmdzEhFBZGQgT0lEQyBTZXR0aW5ncxqhAVVwZGF0ZSBleGlzdGluZyBPSURDIHNldHRpbmdzLiBUaGUgT0lEQyBTZXR0aW5ncyBkZWZpbmUgdGhlIGxpZmV0aW1lcyBvZiB0aGUgZGlmZmVyZW50IHRva2VucyBpbiBPSURDLiBUaGVzZSBzZXR0aW5ncyBhcmUgdXNlZCBmb3IgYWxsIG9yZ2FuaXphdGlvbnMgYW5kIGNsaWVudHMugrUYCwoJaWFtLndyaXRlgtPkkwITOgEqGg4vc2V0dGluZ3Mvb2lkYxK0AwohR2V0RmlsZVN5c3RlbU5vdGlmaWNhdGlvblByb3ZpZGVyEjoueml0YWRlbC5hZG1pbi52MS5HZXRGaWxlU3lzdGVtTm90aWZpY2F0aW9uUHJvdmlkZXJSZXF1ZXN0Gjsueml0YWRlbC5hZG1pbi52MS5HZXRGaWxlU3lzdGVtTm90aWZpY2F0aW9uUHJvdmlkZXJSZXNwb25zZSKVApJB4AEKFk5vdGlmaWNhdGlvbiBQcm92aWRlcnMSJEdldCBOb3RpZmljYXRpb24gUHJvdmlkZXIgRmlsZXN5c3RlbRqfAVJldHVybnMgYSBmaWxlc3lzdGVtIG5vdGlmaWNhdGlvbiBwcm92aWRlciBpZiBjb25maWd1cmVkLiBUaGlzIHByb3ZpZGVyIGlzIG9ubHkgdXNlZCBmb3IgdGVzdGluZyBwdXJwb3Nlcy4gVGhlIG5vdGlmaWNhdGlvbnMgd2lsbCBiZSB3cml0dGVuIHRvIHRoZSBmaWxlc3lzdGVtLoK1GAoKCGlhbS5yZWFkgtPkkwIdEhsvbm90aWZpY2F0aW9uL3Byb3ZpZGVyL2ZpbGUSigMKGkdldExvZ05vdGlmaWNhdGlvblByb3ZpZGVyEjMueml0YWRlbC5hZG1pbi52MS5HZXRMb2dOb3RpZmljYXRpb25Qcm92aWRlclJlcXVlc3QaNC56aXRhZGVsLmFkbWluLnYxLkdldExvZ05vdGlmaWNhdGlvblByb3ZpZGVyUmVzcG9uc2UigAKSQcwBChZOb3RpZmljYXRpb24gUHJvdmlkZXJzEh1HZXQgTm90aWZpY2F0aW9uIFByb3ZpZGVyIExvZxqSAVJldHVybnMgYSBsb2cgbm90aWZpY2F0aW9uIHByb3ZpZGVyIGlmIGNvbmZpZ3VyZWQuIFRoaXMgcHJvdmlkZXIgaXMgb25seSB1c2VkIGZvciB0ZXN0aW5nIHB1cnBvc2VzLiBUaGUgbm90aWZpY2F0aW9ucyB3aWxsIGJlIHdyaXR0ZW4gdG8gdGhlIGxvZ3MugrUYCgoIaWFtLnJlYWSC0+STAhwSGi9ub3RpZmljYXRpb24vcHJvdmlkZXIvbG9nEvoBChFHZXRTZWN1cml0eVBvbGljeRIqLnppdGFkZWwuYWRtaW4udjEuR2V0U2VjdXJpdHlQb2xpY3lSZXF1ZXN0Gisueml0YWRlbC5hZG1pbi52MS5HZXRTZWN1cml0eVBvbGljeVJlc3BvbnNlIosBkkFZCghTZXR0aW5ncxIVR2V0IFNlY3VyaXR5IFNldHRpbmdzGjZSZXR1cm5zIHRoZSBzZWN1cml0eSBzZXR0aW5ncyBvZiB0aGUgWklUQURFTCBpbnN0YW5jZS6CtRgRCg9pYW0ucG9saWN5LnJlYWSC0+STAhQSEi9wb2xpY2llcy9zZWN1cml0eRL6AQoRU2V0U2VjdXJpdHlQb2xpY3kSKi56aXRhZGVsLmFkbWluLnYxLlNldFNlY3VyaXR5UG9saWN5UmVxdWVzdBorLnppdGFkZWwuYWRtaW4udjEuU2V0U2VjdXJpdHlQb2xpY3lSZXNwb25zZSKLAZJBVQoIU2V0dGluZ3MSFVNldCBTZWN1cml0eSBTZXR0aW5ncxoyU2V0IHRoZSBzZWN1cml0eSBzZXR0aW5ncyBvZiB0aGUgWklUQURFTCBpbnN0YW5jZS6CtRgSChBpYW0ucG9saWN5LndyaXRlgtPkkwIXOgEqGhIvcG9saWNpZXMvc2VjdXJpdHkSqgIKCkdldE9yZ0J5SUQSIy56aXRhZGVsLmFkbWluLnYxLkdldE9yZ0J5SURSZXF1ZXN0GiQueml0YWRlbC5hZG1pbi52MS5HZXRPcmdCeUlEUmVzcG9uc2Ui0AGSQawBCg1Pcmdhbml6YXRpb25zEhZHZXQgT3JnYW5pemF0aW9uIEJ5IElEGmVSZXR1cm5zIGFuIG9yZ2FuaXphdGlvbiBieSBpdHMgSUQuIE1ha2Ugc3VyZSB0aGUgdXNlciBoYXMgdGhlIHBlcm1pc3Npb25zIHRvIGFjY2VzcyB0aGUgb3JnYW5pemF0aW9uLkocCgMyMDASFQoTcmVxdWVzdGVkIG9yZyBmb3VuZIK1GAoKCGlhbS5yZWFkgtPkkwIMEgovb3Jncy97aWR9Er0CCgtJc09yZ1VuaXF1ZRIkLnppdGFkZWwuYWRtaW4udjEuSXNPcmdVbmlxdWVSZXF1ZXN0GiUueml0YWRlbC5hZG1pbi52MS5Jc09yZ1VuaXF1ZVJlc3BvbnNlIuABkkG2AQoNT3JnYW5pemF0aW9ucxIWSXMgT3JnYW5pemF0aW9uIFVuaXF1ZRpNQ2hlY2tzIGlmIGFuIG9yZ2FuaXphdGlvbiB3aXRoIHRoZSBzZWFyY2hlZCBwYXJhbWV0ZXJzIGFscmVhZHkgZXhpc3RzIG9yIG5vdC5KGAoDMjAwEhEKD1pJVEFERUwgc3RhcnRlZEokCgdkZWZhdWx0EhkKF1pJVEFERUwgTk9UIHN0YXJ0ZWQgeWV0grUYCgoIaWFtLnJlYWSC0+STAhISEC9vcmdzL19pc191bmlxdWUS8gIKDVNldERlZmF1bHRPcmcSJi56aXRhZGVsLmFkbWluLnYxLlNldERlZmF1bHRPcmdSZXF1ZXN0Gicueml0YWRlbC5hZG1pbi52MS5TZXREZWZhdWx0T3JnUmVzcG9uc2UijwKSQd4BCg1Pcmdhbml6YXRpb25zCghTZXR0aW5ncxIYU2V0IERlZmF1bHQgT3JnYW5pemF0aW9uGqgBU2V0cyB0aGUgZGVmYXVsdCBvcmdhbml6YXRpb24gb2YgdGhlIFpJVEFERUwgaW5zdGFuY2UuIElmIG5vIHNwZWNpZmljIG9yZ2FuaXphdGlvbiBpcyBnaXZlbiBvbiB0aGUgcmVnaXN0ZXIgZm9ybSwgYSB1c2VyIHdpbGwgYmUgcmVnaXN0ZXJlZCB0byB0aGUgZGVmYXVsdCBvcmdhbml6YXRpb24ugrUYCwoJaWFtLndyaXRlgtPkkwIYGhYvb3Jncy9kZWZhdWx0L3tvcmdfaWR9EucCCg1HZXREZWZhdWx0T3JnEiYueml0YWRlbC5hZG1pbi52MS5HZXREZWZhdWx0T3JnUmVxdWVzdBonLnppdGFkZWwuYWRtaW4udjEuR2V0RGVmYXVsdE9yZ1Jlc3BvbnNlIoQCkkHdAQoNT3JnYW5pemF0aW9ucwoIU2V0dGluZ3MSGEdldCBEZWZhdWx0IE9yZ2FuaXphdGlvbhqnAUdldCB0aGUgZGVmYXVsdCBvcmdhbml6YXRpb24gb2YgdGhlIFpJVEFERUwgaW5zdGFuY2UuIElmIG5vIHNwZWNpZmljIG9yZ2FuaXphdGlvbiBpcyBnaXZlbiBvbiB0aGUgcmVnaXN0ZXIgZm9ybSwgYSB1c2VyIHdpbGwgYmUgcmVnaXN0ZXJlZCB0byB0aGUgZGVmYXVsdCBvcmdhbml6YXRpb24ugrUYCgoIaWFtLnJlYWSC0+STAg8SDS9vcmdzL2RlZmF1bHQShAMKCExpc3RPcmdzEiEueml0YWRlbC5hZG1pbi52MS5MaXN0T3Jnc1JlcXVlc3QaIi56aXRhZGVsLmFkbWluLnYxLkxpc3RPcmdzUmVzcG9uc2UisAKSQYYCCg1Pcmdhbml6YXRpb25zEhNTZWFyY2ggT3JnYW5pemF0aW9uGnFSZXR1cm5zIGEgbGlzdCBvZiBvcmdhbml6YXRpb25zIHRoYXQgbWF0Y2ggdGhlIHJlcXVlc3RpbmcgZmlsdGVycy4gQWxsIGZpbHRlcnMgYXJlIGFwcGxpZWQgd2l0aCBhbiBBTkQgY29uZGl0aW9uLkoxCgMyMDASKgoobGlzdCBvZiBvcmdhbml6YXRpb25zIG1hdGNoaW5nIHRoZSBxdWVyeUo4CgM0MDASMQoSaW52YWxpZCBsaXN0IHF1ZXJ5EhsKGRoXIy9kZWZpbml0aW9ucy9ycGNTdGF0dXNYAYK1GAoKCGlhbS5yZWFkgtPkkwISOgEqIg0vb3Jncy9fc2VhcmNoErEDCghTZXRVcE9yZxIhLnppdGFkZWwuYWRtaW4udjEuU2V0VXBPcmdSZXF1ZXN0GiIueml0YWRlbC5hZG1pbi52MS5TZXRVcE9yZ1Jlc3BvbnNlIt0CkkGzAgoNT3JnYW5pemF0aW9ucxISU2V0dXAgT3JnYW5pemF0aW9uGo4BQ3JlYXRlIGEgbmV3IG9yZ2FuaXphdGlvbiB3aXRoIGFuIGFkbWluaXN0cmF0aXZlIHVzZXIuIElmIG5vIHNwZWNpZmljIHJvbGVzIGFyZSBzZW50IGZvciB0aGUgZmlyc3QgdXNlciwgdGhlIHVzZXIgd2lsbCBnZXQgdGhlIHJvbGUgT1JHX09XTkVSLkpACgMyMDASOQo3b3JnLCB1c2VyIGFuZCB1c2VyIG1lbWJlcnNoaXAgd2VyZSBjcmVhdGVkIHN1Y2Nlc3NmdWxseUo5CgM0MDASMgoTaW52YWxpZCBvcmcgb3IgdXNlchIbChkaFyMvZGVmaW5pdGlvbnMvcnBjU3RhdHVzWAGCtRgLCglpYW0ud3JpdGWC0+STAhE6ASoiDC9vcmdzL19zZXR1cBKTAwoJUmVtb3ZlT3JnEiIueml0YWRlbC5hZG1pbi52MS5SZW1vdmVPcmdSZXF1ZXN0GiMueml0YWRlbC5hZG1pbi52MS5SZW1vdmVPcmdSZXNwb25zZSK8ApJBkwIKDU9yZ2FuaXphdGlvbnMSE1JlbW92ZSBPcmdhbml6YXRpb24alAFEZWxldGVzIHRoZSBvcmdhbml6YXRpb24gYW5kIGFsbCBpdHMgcmVzb3VyY2VzIChVc2VycywgUHJvamVjdHMsIEdyYW50cyB0byBhbmQgZnJvbSB0aGUgb3JnKS4gVXNlcnMgb2YgdGhpcyBvcmdhbml6YXRpb24gd2lsbCBub3QgYmUgYWJsZSB0byBsb2cgaW4uSiEKAzIwMBIaChhvcmcgcmVtb3ZlZCBzdWNjZXNzZnVsbHlKMQoDNDAwEioKC2ludmFsaWQgb3JnEhsKGRoXIy9kZWZpbml0aW9ucy9ycGNTdGF0dXNYAYK1GAsKCWlhbS53cml0ZYLT5JMCECoOL29yZ3Mve29yZ19pZH0S7wIKCkdldElEUEJ5SUQSIy56aXRhZGVsLmFkbWluLnYxLkdldElEUEJ5SURSZXF1ZXN0GiQueml0YWRlbC5hZG1pbi52MS5HZXRJRFBCeUlEUmVzcG9uc2UilQKSQe0BChJJZGVudGl0eSBQcm92aWRlcnMSLURlcHJlY2F0ZWQ6IEdldCBJZGVudGl0eSBQcm92aWRlciAoSURQKSBieSBJRBpaUmV0dXJucyBhbiBpZGVudGl0eSBwcm92aWRlciAoc29jaWFsL2VudGVycHJpc2UgbG9naW4pIGJ5IGl0cyBJRCBlLmcgR29vZ2xlLCBBenVyZUFELCBldGMuShIKAzIwMBILCglJRFAgZm91bmRKNgoDNDAwEi8KEGludmFsaWQgYXJndW1lbnQSGwoZGhcjL2RlZmluaXRpb25zL3JwY1N0YXR1c1gBgrUYDgoMaWFtLmlkcC5yZWFkgtPkkwIMEgovaWRwcy97aWR9EooDCghMaXN0SURQcxIhLnppdGFkZWwuYWRtaW4udjEuTGlzdElEUHNSZXF1ZXN0GiIueml0YWRlbC5hZG1pbi52MS5MaXN0SURQc1Jlc3BvbnNlIrYCkkGIAgoSSWRlbnRpdHkgUHJvdmlkZXJzEitEZXByZWNhdGVkOiBTZWFyY2ggSWRlbnRpdHkgUHJvdmlkZXJzIChJRFApGnlSZXR1cm5zIGEgbGlzdCBvZiBpZGVudGl0eSBwcm92aWRlcnMgKHNvY2lhbC9lbnRlcnByaXNlIGxvZ2luKSBjb25maWd1cmVkIG9uIGFuIGluc3RhbmNlIGxldmVsLiBlLmcgR29vZ2xlLCBBenVyZUFELCBldGMuShMKAzIwMBIMCgppZHBzIGZvdW5kSjMKAzQwMBIsCg1pbnZhbGlkIHF1ZXJ5EhsKGRoXIy9kZWZpbml0aW9ucy9ycGNTdGF0dXNYAYK1GA4KDGlhbS5pZHAucmVhZILT5JMCEjoBKiINL2lkcHMvX3NlYXJjaBKrAwoKQWRkT0lEQ0lEUBIjLnppdGFkZWwuYWRtaW4udjEuQWRkT0lEQ0lEUFJlcXVlc3QaJC56aXRhZGVsLmFkbWluLnYxLkFkZE9JRENJRFBSZXNwb25zZSLRApJBpQIKEklkZW50aXR5IFByb3ZpZGVycxIsRGVwcmVjYXRlZDogQWRkIE9JREMgSWRlbnRpdHkgUHJvdmlkZXIgKElEUCkakAFDcmVhdGUgYSBuZXcgaWRlbnRpdHkgcHJvdmlkZXIgY29uZmlndXJhdGlvbiB0byBlbmFibGUgeW91ciB1c2VycyB0byBsb2cgaW4gd2l0aCBzb2NpYWwvZW50ZXJwcmlzZSBsb2dpbi4gVGhlIHByb3ZpZGVyIGhhcyB0byBiZSBPSURDIGNvbXBsaWFudC5KFAoDMjAwEg0KC2lkcCBjcmVhdGVkSjYKAzQwMBIvChBpbnZhbGlkIGFyZ3VtZW50EhsKGRoXIy9kZWZpbml0aW9ucy9ycGNTdGF0dXNYAYK1GA8KDWlhbS5pZHAud3JpdGWC0+STAg86ASoiCi9pZHBzL29pZGMSxAQKCUFkZEpXVElEUBIiLnppdGFkZWwuYWRtaW4udjEuQWRkSldUSURQUmVxdWVzdBojLnppdGFkZWwuYWRtaW4udjEuQWRkSldUSURQUmVzcG9uc2Ui7QOSQcIDChJJZGVudGl0eSBQcm92aWRlcnMSK0RlcHJlY2F0ZWQ6IEFkZCBKV1QgSWRlbnRpdHkgUHJvdmlkZXIgKElEUCkargJDcmVhdGUgYSBuZXcgaWRlbnRpdHkgcHJvdmlkZXIgY29uZmlndXJhdGlvbiB0byBlbmFibGUgeW91ciB1c2VycyB0byBsb2cgaW4gd2l0aCBzb2NpYWwvZW50ZXJwcmlzZSBsb2dpbi4gSlNPTiBXZWIgVG9rZW4gSWRlbnRpdHkgUHJvdmlkZXIgKEpXVCBJRFApIGdpdmVzIHlvdSB0aGUgcG9zc2liaWxpdHkgdG8gdXNlIGFuIChleGlzdGluZykgSldUIGFzIGEgZmVkZXJhdGVkIGlkZW50aXR5LiBZb3UgaGF2ZSB0byBwcm92aWRlIGFuIGVuZHBvaW50IHdoZXJlIFpJVEFERUwgY2FuIGdldCB0aGUgZXhpc3RpbmcgSldUIHRva2VuLkoUCgMyMDASDQoLaWRwIGNyZWF0ZWRKNgoDNDAwEi8KEGludmFsaWQgYXJndW1lbnQSGwoZGhcjL2RlZmluaXRpb25zL3JwY1N0YXR1c1gBgrUYDwoNaWFtLmlkcC53cml0ZYLT5JMCDjoBKiIJL2lkcHMvand0EosDCglVcGRhdGVJRFASIi56aXRhZGVsLmFkbWluLnYxLlVwZGF0ZUlEUFJlcXVlc3QaIy56aXRhZGVsLmFkbWluLnYxLlVwZGF0ZUlEUFJlc3BvbnNlIrQCkkGEAgoSSWRlbnRpdHkgUHJvdmlkZXJzEipEZXByZWNhdGVkOiBVcGRhdGUgSWRlbnRpdHkgUHJvdmlkZXIgKElEUCkaclVwZGF0ZSBhbiBleGlzdGluZyBJRFAuIEFsbCBmaWVsZHMgYXJlIHVwZGF0ZWQuIElmIHlvdSBkbyBub3Qgc2VuZCBhIHZhbHVlIGluIGEgZmllbGQsIGl0IHdpbGwgYmUgZW1wdHkgYWZ0ZXJ3YXJkLkoUCgMyMDASDQoLaWRwIHVwZGF0ZWRKNgoDNDAwEi8KEGludmFsaWQgYXJndW1lbnQSGwoZGhcjL2RlZmluaXRpb25zL3JwY1N0YXR1c1gBgrUYDwoNaWFtLmlkcC53cml0ZYLT5JMCEzoBKhoOL2lkcHMve2lkcF9pZH0SuQQKDURlYWN0aXZhdGVJRFASJi56aXRhZGVsLmFkbWluLnYxLkRlYWN0aXZhdGVJRFBSZXF1ZXN0Gicueml0YWRlbC5hZG1pbi52MS5EZWFjdGl2YXRlSURQUmVzcG9uc2Ui1gOSQZ0DChJJZGVudGl0eSBQcm92aWRlcnMSLkRlcHJlY2F0ZWQ6IERlYWN0aXZhdGUgSWRlbnRpdHkgUHJvdmlkZXIgKElEUCka+gFTZXRzIHRoZSBzdGF0ZSBvZiB0aGUgcHJvdmlkZXIgdG8gaW5hY3RpdmUuIEl0IGNhbiBvbmx5IGJlIGNhbGxlZCBmb3IgdGhlIHByb3ZpZGVyIHdpdGggdGhlIHN0YXRlIGFjdGl2ZS4gVXNlcnMgd2lsbCBub3QgYmUgYWJsZSB0byBsb2cgaW4gd2l0aCB0aGUgZ2l2ZW4gcHJvdmlkZXIgYWZ0ZXJ3YXJkLiBJdCBtaWdodCBjYXVzZSB0cm91YmxlcyBpZiBpdCBpcyB0aGUgb25seSBhdXRoZW50aWNhdGlvbiBtZXRob2Qgb2YgdGhlIHVzZXIuShgKAzIwMBIRCg9pZHAgZGVhY3RpdmF0ZWRKPgoDNDAwEjcKGFVuYWJsZSB0byBkZWFjdGl2YXRlIElEUBIbChkaFyMvZGVmaW5pdGlvbnMvcnBjU3RhdHVzWAGCtRgPCg1pYW0uaWRwLndyaXRlgtPkkwIcIhovaWRwcy97aWRwX2lkfS9fZGVhY3RpdmF0ZRLlAwoNUmVhY3RpdmF0ZUlEUBImLnppdGFkZWwuYWRtaW4udjEuUmVhY3RpdmF0ZUlEUFJlcXVlc3QaJy56aXRhZGVsLmFkbWluLnYxLlJlYWN0aXZhdGVJRFBSZXNwb25zZSKCA5JByQIKEklkZW50aXR5IFByb3ZpZGVycxIuRGVwcmVjYXRlZDogUmVhY3RpdmF0ZSBJZGVudGl0eSBQcm92aWRlciAoSURQKRqmAVNldHMgdGhlIHN0YXRlIG9mIHRoZSBwcm92aWRlciB0byBhY3RpdmUuIEl0IGNhbiBvbmx5IGJlIGNhbGxlZCBmb3IgcHJvdmlkZXJzIHdpdGggdGhlIHN0YXRlIGluYWN0aXZlLiBVc2VycyB3aWxsIG5vdCBiZSBhYmxlIHRvIGxvZyBpbiBhZ2FpbiB3aXRoIHRoZSBnaXZlbiBwcm92aWRlci5KGAoDMjAwEhEKD2lkcCByZWFjdGl2YXRlZEo+CgM0MDASNwoYdW5hYmxlIHRvIHJlYWN0aXZhdGUgSURQEhsKGRoXIy9kZWZpbml0aW9ucy9ycGNTdGF0dXNYAYK1GA8KDWlhbS5pZHAud3JpdGWC0+STAhwiGi9pZHBzL3tpZHBfaWR9L19yZWFjdGl2YXRlEocECglSZW1vdmVJRFASIi56aXRhZGVsLmFkbWluLnYxLlJlbW92ZUlEUFJlcXVlc3QaIy56aXRhZGVsLmFkbWluLnYxLlJlbW92ZUlEUFJlc3BvbnNlIrADkkGDAwoSSWRlbnRpdHkgUHJvdmlkZXJzEipEZXByZWNhdGVkOiBSZW1vdmUgSWRlbnRpdHkgUHJvdmlkZXIgKElEUCka7AFSZW1vdmVzIHRoZSBpZGVudGl0eSBwcm92aWRlciBwZXJtYW5lbnRseS4gQWxsIGxpbmtzIHRvIHRoZSBnaXZlbiBJRFAgb24gdXNlcnMgd2lsbCBiZSBkZWxldGVkIGFzIHdlbGwuIFRoZXkgd2lsbCBub3QgYmUgYWJsZSB0byBsb2cgaW4gd2l0aCB0aGUgcHJvdmlkZXIgYWZ0ZXJ3YXJkLiBJZiBpdCBpcyB0aGVpciBvbmx5IGF1dGhlbnRpY2F0aW9uIHBvc3NpYmlsaXR5IGl0IG1pZ2h0IGNhdXNlIHByb2JsZW1zLkoUCgMyMDASDQoLaWRwIHJlbW92ZWRKOgoDNDAwEjMKFHVuYWJsZSB0byByZW1vdmUgSURQEhsKGRoXIy9kZWZpbml0aW9ucy9ycGNTdGF0dXNYAYK1GA8KDWlhbS5pZHAud3JpdGWC0+STAhAqDi9pZHBzL3tpZHBfaWR9EpsEChNVcGRhdGVJRFBPSURDQ29uZmlnEiwueml0YWRlbC5hZG1pbi52MS5VcGRhdGVJRFBPSURDQ29uZmlnUmVxdWVzdBotLnppdGFkZWwuYWRtaW4udjEuVXBkYXRlSURQT0lEQ0NvbmZpZ1Jlc3BvbnNlIqYDkkHqAgoSSWRlbnRpdHkgUHJvdmlkZXJzEi9EZXByZWNhdGVkOiBVcGRhdGUgT0lEQyBJZGVudGl0eSBQcm92aWRlciAoSURQKRqPAVVwZGF0ZSB0aGUgT0lEQy1zcGVjaWZpYyBjb25maWd1cmF0aW9uIG9mIGFuIGlkZW50aXR5IHByb3ZpZGVyLiBBbGwgZmllbGRzIHdpbGwgYmUgdXBkYXRlZC4gSWYgYSBmaWVsZCBoYXMgbm8gdmFsdWUgaXQgd2lsbCBiZSBlbXB0eSBhZnRlcndhcmQuShwKAzIwMBIVChNPSURDIGNvbmZpZyB1cGRhdGVkSjYKAzQwMBIvChBpbnZhbGlkIGFyZ3VtZW50EhsKGRoXIy9kZWZpbml0aW9ucy9ycGNTdGF0dXNKOQoDNDA5EjIKE3ByZWNvbmRpdGlvbiBmYWlsZWQSGwoZGhcjL2RlZmluaXRpb25zL3JwY1N0YXR1c1gBgrUYDwoNaWFtLmlkcC53cml0ZYLT5JMCHzoBKhoaL2lkcHMve2lkcF9pZH0vb2lkY19jb25maWcSlAQKElVwZGF0ZUlEUEpXVENvbmZpZxIrLnppdGFkZWwuYWRtaW4udjEuVXBkYXRlSURQSldUQ29uZmlnUmVxdWVzdBosLnppdGFkZWwuYWRtaW4udjEuVXBkYXRlSURQSldUQ29uZmlnUmVzcG9uc2UiogOSQecCChJJZGVudGl0eSBQcm92aWRlcnMSLkRlcHJlY2F0ZWQ6IFVwZGF0ZSBKV1QgSWRlbnRpdHkgUHJvdmlkZXIgKElEUCkajgFVcGRhdGUgdGhlIEpXVC1zcGVjaWZpYyBjb25maWd1cmF0aW9uIG9mIGFuIGlkZW50aXR5IHByb3ZpZGVyLiBBbGwgZmllbGRzIHdpbGwgYmUgdXBkYXRlZC4gSWYgYSBmaWVsZCBoYXMgbm8gdmFsdWUgaXQgd2lsbCBiZSBlbXB0eSBhZnRlcndhcmQuShsKAzIwMBIUChJKV1QgY29uZmlnIHVwZGF0ZWRKNgoDNDAwEi8KEGludmFsaWQgYXJndW1lbnQSGwoZGhcjL2RlZmluaXRpb25zL3JwY1N0YXR1c0o5CgM0MDkSMgoTcHJlY29uZGl0aW9uIGZhaWxlZBIbChkaFyMvZGVmaW5pdGlvbnMvcnBjU3RhdHVzWAGCtRgPCg1pYW0uaWRwLndyaXRlgtPkkwIeOgEqGhkvaWRwcy97aWRwX2lkfS9qd3RfY29uZmlnEsMCCg1MaXN0UHJvdmlkZXJzEiYueml0YWRlbC5hZG1pbi52MS5MaXN0UHJvdmlkZXJzUmVxdWVzdBonLnppdGFkZWwuYWRtaW4udjEuTGlzdFByb3ZpZGVyc1Jlc3BvbnNlIuABkkGoAQoSSWRlbnRpdHkgUHJvdmlkZXJzEhdMaXN0IElkZW50aXR5IFByb3ZpZGVycxp5UmV0dXJucyBhIGxpc3Qgb2YgaWRlbnRpdHkgcHJvdmlkZXJzIChzb2NpYWwvZW50ZXJwcmlzZSBsb2dpbikgY29uZmlndXJlZCBvbiBhbiBpbnN0YW5jZSBsZXZlbC4gZS5nIEdvb2dsZSwgQXp1cmVBRCwgZXRjLoK1GA4KDGlhbS5pZHAucmVhZILT5JMCHDoBKiIXL2lkcHMvdGVtcGxhdGVzL19zZWFyY2gSygEKD0dldFByb3ZpZGVyQnlJRBIoLnppdGFkZWwuYWRtaW4udjEuR2V0UHJvdmlkZXJCeUlEUmVxdWVzdBopLnppdGFkZWwuYWRtaW4udjEuR2V0UHJvdmlkZXJCeUlEUmVzcG9uc2UiYpJBMQoSSWRlbnRpdHkgUHJvdmlkZXJzEhtHZXQgSWRlbnRpdHkgUHJvdmlkZXIgQnkgSUSCtRgOCgxpYW0uaWRwLnJlYWSC0+STAhYSFC9pZHBzL3RlbXBsYXRlcy97aWR9EuUBChdBZGRHZW5lcmljT0F1dGhQcm92aWRlchIwLnppdGFkZWwuYWRtaW4udjEuQWRkR2VuZXJpY09BdXRoUHJvdmlkZXJSZXF1ZXN0GjEueml0YWRlbC5hZG1pbi52MS5BZGRHZW5lcmljT0F1dGhQcm92aWRlclJlc3BvbnNlImWSQTkKEklkZW50aXR5IFByb3ZpZGVycxIjQWRkIEdlbmVyaWMgT0F1dGggSWRlbnRpdHkgUHJvdmlkZXKCtRgPCg1pYW0uaWRwLndyaXRlgtPkkwIQOgEqIgsvaWRwcy9vYXV0aBL2AQoaVXBkYXRlR2VuZXJpY09BdXRoUHJvdmlkZXISMy56aXRhZGVsLmFkbWluLnYxLlVwZGF0ZUdlbmVyaWNPQXV0aFByb3ZpZGVyUmVxdWVzdBo0LnppdGFkZWwuYWRtaW4udjEuVXBkYXRlR2VuZXJpY09BdXRoUHJvdmlkZXJSZXNwb25zZSJtkkE8ChJJZGVudGl0eSBQcm92aWRlcnMSJlVwZGF0ZSBHZW5lcmljIE9BdXRoIElkZW50aXR5IFByb3ZpZGVygrUYDwoNaWFtLmlkcC53cml0ZYLT5JMCFToBKhoQL2lkcHMvb2F1dGgve2lkfRLoAQoWQWRkR2VuZXJpY09JRENQcm92aWRlchIvLnppdGFkZWwuYWRtaW4udjEuQWRkR2VuZXJpY09JRENQcm92aWRlclJlcXVlc3QaMC56aXRhZGVsLmFkbWluLnYxLkFkZEdlbmVyaWNPSURDUHJvdmlkZXJSZXNwb25zZSJrkkE4ChJJZGVudGl0eSBQcm92aWRlcnMSIkFkZCBHZW5lcmljIE9JREMgSWRlbnRpdHkgUHJvdmlkZXKCtRgPCg1pYW0uaWRwLndyaXRlgtPkkwIXOgEqIhIvaWRwcy9nZW5lcmljX29pZGMS+QEKGVVwZGF0ZUdlbmVyaWNPSURDUHJvdmlkZXISMi56aXRhZGVsLmFkbWluLnYxLlVwZGF0ZUdlbmVyaWNPSURDUHJvdmlkZXJSZXF1ZXN0GjMueml0YWRlbC5hZG1pbi52MS5VcGRhdGVHZW5lcmljT0lEQ1Byb3ZpZGVyUmVzcG9uc2Uic5JBOwoSSWRlbnRpdHkgUHJvdmlkZXJzEiVVcGRhdGUgR2VuZXJpYyBPSURDIElkZW50aXR5IFByb3ZpZGVygrUYDwoNaWFtLmlkcC53cml0ZYLT5JMCHDoBKhoXL2lkcHMvZ2VuZXJpY19vaWRjL3tpZH0ShgIKGk1pZ3JhdGVHZW5lcmljT0lEQ1Byb3ZpZGVyEjMueml0YWRlbC5hZG1pbi52MS5NaWdyYXRlR2VuZXJpY09JRENQcm92aWRlclJlcXVlc3QaNC56aXRhZGVsLmFkbWluLnYxLk1pZ3JhdGVHZW5lcmljT0lEQ1Byb3ZpZGVyUmVzcG9uc2UifZJBPAoSSWRlbnRpdHkgUHJvdmlkZXJzEiZNaWdyYXRlIEdlbmVyaWMgT0lEQyBJZGVudGl0eSBQcm92aWRlcoK1GA8KDWlhbS5pZHAud3JpdGWC0+STAiU6ASoiIC9pZHBzL2dlbmVyaWNfb2lkYy97aWR9L19taWdyYXRlEsYBCg5BZGRKV1RQcm92aWRlchInLnppdGFkZWwuYWRtaW4udjEuQWRkSldUUHJvdmlkZXJSZXF1ZXN0Gigueml0YWRlbC5hZG1pbi52MS5BZGRKV1RQcm92aWRlclJlc3BvbnNlImGSQS8KEklkZW50aXR5IFByb3ZpZGVycxIZQWRkIEpXVCBJZGVudGl0eSBQcm92aWRlcoK1GA8KDWlhbS5pZHAud3JpdGWC0+STAhY6ASoiES9pZHBzL2dlbmVyaWNfand0EtcBChFVcGRhdGVKV1RQcm92aWRlchIqLnppdGFkZWwuYWRtaW4udjEuVXBkYXRlSldUUHJvdmlkZXJSZXF1ZXN0Gisueml0YWRlbC5hZG1pbi52MS5VcGRhdGVKV1RQcm92aWRlclJlc3BvbnNlImmSQTIKEklkZW50aXR5IFByb3ZpZGVycxIcVXBkYXRlIEpXVCBJZGVudGl0eSBQcm92aWRlcoK1GA8KDWlhbS5pZHAud3JpdGWC0+STAhs6ASoaFi9pZHBzL2dlbmVyaWNfand0L3tpZH0S0AEKEkFkZEF6dXJlQURQcm92aWRlchIrLnppdGFkZWwuYWRtaW4udjEuQWRkQXp1cmVBRFByb3ZpZGVyUmVxdWVzdBosLnppdGFkZWwuYWRtaW4udjEuQWRkQXp1cmVBRFByb3ZpZGVyUmVzcG9uc2UiX5JBMwoSSWRlbnRpdHkgUHJvdmlkZXJzEh1BZGQgQXp1cmVBRCBJZGVudGl0eSBQcm92aWRlcoK1GA8KDWlhbS5pZHAud3JpdGWC0+STAhA6ASoiCy9pZHBzL2F6dXJlEuEBChVVcGRhdGVBenVyZUFEUHJvdmlkZXISLi56aXRhZGVsLmFkbWluLnYxLlVwZGF0ZUF6dXJlQURQcm92aWRlclJlcXVlc3QaLy56aXRhZGVsLmFkbWluLnYxLlVwZGF0ZUF6dXJlQURQcm92aWRlclJlc3BvbnNlImeSQTYKEklkZW50aXR5IFByb3ZpZGVycxIgVXBkYXRlIEF6dXJlQUQgSWRlbnRpdHkgUHJvdmlkZXKCtRgPCg1pYW0uaWRwLndyaXRlgtPkkwIVOgEqGhAvaWRwcy9henVyZS97aWR9Es0BChFBZGRHaXRIdWJQcm92aWRlchIqLnppdGFkZWwuYWRtaW4udjEuQWRkR2l0SHViUHJvdmlkZXJSZXF1ZXN0Gisueml0YWRlbC5hZG1pbi52MS5BZGRHaXRIdWJQcm92aWRlclJlc3BvbnNlIl+SQTIKEklkZW50aXR5IFByb3ZpZGVycxIcQWRkIEdpdEh1YiBJZGVudGl0eSBQcm92aWRlcoK1GA8KDWlhbS5pZHAud3JpdGWC0+STAhE6ASoiDC9pZHBzL2dpdGh1YhLeAQoUVXBkYXRlR2l0SHViUHJvdmlkZXISLS56aXRhZGVsLmFkbWluLnYxLlVwZGF0ZUdpdEh1YlByb3ZpZGVyUmVxdWVzdBouLnppdGFkZWwuYWRtaW4udjEuVXBkYXRlR2l0SHViUHJvdmlkZXJSZXNwb25zZSJnkkE1ChJJZGVudGl0eSBQcm92aWRlcnMSH1VwZGF0ZSBHaXRIdWIgSWRlbnRpdHkgUHJvdmlkZXKCtRgPCg1pYW0uaWRwLndyaXRlgtPkkwIWOgEqGhEvaWRwcy9naXRodWIve2lkfRKLAgohQWRkR2l0SHViRW50ZXJwcmlzZVNlcnZlclByb3ZpZGVyEjoueml0YWRlbC5hZG1pbi52MS5BZGRHaXRIdWJFbnRlcnByaXNlU2VydmVyUHJvdmlkZXJSZXF1ZXN0Gjsueml0YWRlbC5hZG1pbi52MS5BZGRHaXRIdWJFbnRlcnByaXNlU2VydmVyUHJvdmlkZXJSZXNwb25zZSJtkkE9ChJJZGVudGl0eSBQcm92aWRlcnMSJ0FkZCBHaXRIdWIgRW50ZXJwcmlzZSBJZGVudGl0eSBQcm92aWRlcoK1GA8KDWlhbS5pZHAud3JpdGWC0+STAhQ6ASoiDy9pZHBzL2dpdGh1Yl9lcxKcAgokVXBkYXRlR2l0SHViRW50ZXJwcmlzZVNlcnZlclByb3ZpZGVyEj0ueml0YWRlbC5hZG1pbi52MS5VcGRhdGVHaXRIdWJFbnRlcnByaXNlU2VydmVyUHJvdmlkZXJSZXF1ZXN0Gj4ueml0YWRlbC5hZG1pbi52MS5VcGRhdGVHaXRIdWJFbnRlcnByaXNlU2VydmVyUHJvdmlkZXJSZXNwb25zZSJ1kkFAChJJZGVudGl0eSBQcm92aWRlcnMSKlVwZGF0ZSBHaXRIdWIgRW50ZXJwcmlzZSBJZGVudGl0eSBQcm92aWRlcoK1GA8KDWlhbS5pZHAud3JpdGWC0+STAhk6ASoaFC9pZHBzL2dpdGh1Yl9lcy97aWR9Es0BChFBZGRHaXRMYWJQcm92aWRlchIqLnppdGFkZWwuYWRtaW4udjEuQWRkR2l0TGFiUHJvdmlkZXJSZXF1ZXN0Gisueml0YWRlbC5hZG1pbi52MS5BZGRHaXRMYWJQcm92aWRlclJlc3BvbnNlIl+SQTIKEklkZW50aXR5IFByb3ZpZGVycxIcQWRkIEdpdExhYiBJZGVudGl0eSBQcm92aWRlcoK1GA8KDWlhbS5pZHAud3JpdGWC0+STAhE6ASoiDC9pZHBzL2dpdGxhYhLeAQoUVXBkYXRlR2l0TGFiUHJvdmlkZXISLS56aXRhZGVsLmFkbWluLnYxLlVwZGF0ZUdpdExhYlByb3ZpZGVyUmVxdWVzdBouLnppdGFkZWwuYWRtaW4udjEuVXBkYXRlR2l0TGFiUHJvdmlkZXJSZXNwb25zZSJnkkE1ChJJZGVudGl0eSBQcm92aWRlcnMSH1VwZGF0ZSBHaXRMYWIgSWRlbnRpdHkgUHJvdmlkZXKCtRgPCg1pYW0uaWRwLndyaXRlgtPkkwIWOgEqIhEvaWRwcy9naXRsYWIve2lkfRKAAgobQWRkR2l0TGFiU2VsZkhvc3RlZFByb3ZpZGVyEjQueml0YWRlbC5hZG1pbi52MS5BZGRHaXRMYWJTZWxmSG9zdGVkUHJvdmlkZXJSZXF1ZXN0GjUueml0YWRlbC5hZG1pbi52MS5BZGRHaXRMYWJTZWxmSG9zdGVkUHJvdmlkZXJSZXNwb25zZSJ0kkE7ChJJZGVudGl0eSBQcm92aWRlcnMSJUFkZCBHaXRMYWIgU2VsZmhvc3QgSWRlbnRpdHkgUHJvdmlkZXKCtRgPCg1pYW0uaWRwLndyaXRlgtPkkwIdOgEqIhgvaWRwcy9naXRsYWJfc2VsZl9ob3N0ZWQSkQIKHlVwZGF0ZUdpdExhYlNlbGZIb3N0ZWRQcm92aWRlchI3LnppdGFkZWwuYWRtaW4udjEuVXBkYXRlR2l0TGFiU2VsZkhvc3RlZFByb3ZpZGVyUmVxdWVzdBo4LnppdGFkZWwuYWRtaW4udjEuVXBkYXRlR2l0TGFiU2VsZkhvc3RlZFByb3ZpZGVyUmVzcG9uc2UifJJBPgoSSWRlbnRpdHkgUHJvdmlkZXJzEihVcGRhdGUgR2l0TGFiIFNlbGZob3N0IElkZW50aXR5IFByb3ZpZGVygrUYDwoNaWFtLmlkcC53cml0ZYLT5JMCIjoBKiIdL2lkcHMvZ2l0bGFiX3NlbGZfaG9zdGVkL3tpZH0SzQEKEUFkZEdvb2dsZVByb3ZpZGVyEioueml0YWRlbC5hZG1pbi52MS5BZGRHb29nbGVQcm92aWRlclJlcXVlc3QaKy56aXRhZGVsLmFkbWluLnYxLkFkZEdvb2dsZVByb3ZpZGVyUmVzcG9uc2UiX5JBMgoSSWRlbnRpdHkgUHJvdmlkZXJzEhxBZGQgR29vZ2xlIElkZW50aXR5IFByb3ZpZGVygrUYDwoNaWFtLmlkcC53cml0ZYLT5JMCEToBKiIML2lkcHMvZ29vZ2xlEt4BChRVcGRhdGVHb29nbGVQcm92aWRlchItLnppdGFkZWwuYWRtaW4udjEuVXBkYXRlR29vZ2xlUHJvdmlkZXJSZXF1ZXN0Gi4ueml0YWRlbC5hZG1pbi52MS5VcGRhdGVHb29nbGVQcm92aWRlclJlc3BvbnNlImeSQTUKEklkZW50aXR5IFByb3ZpZGVycxIfVXBkYXRlIEdvb2dsZSBJZGVudGl0eSBQcm92aWRlcoK1GA8KDWlhbS5pZHAud3JpdGWC0+STAhY6ASoaES9pZHBzL2dvb2dsZS97aWR9EsMBCg9BZGRMREFQUHJvdmlkZXISKC56aXRhZGVsLmFkbWluLnYxLkFkZExEQVBQcm92aWRlclJlcXVlc3QaKS56aXRhZGVsLmFkbWluLnYxLkFkZExEQVBQcm92aWRlclJlc3BvbnNlIluSQTAKEklkZW50aXR5IFByb3ZpZGVycxIaQWRkIExEQVAgSWRlbnRpdHkgUHJvdmlkZXKCtRgPCg1pYW0uaWRwLndyaXRlgtPkkwIPOgEqIgovaWRwcy9sZGFwEtQBChJVcGRhdGVMREFQUHJvdmlkZXISKy56aXRhZGVsLmFkbWluLnYxLlVwZGF0ZUxEQVBQcm92aWRlclJlcXVlc3QaLC56aXRhZGVsLmFkbWluLnYxLlVwZGF0ZUxEQVBQcm92aWRlclJlc3BvbnNlImOSQTMKEklkZW50aXR5IFByb3ZpZGVycxIdVXBkYXRlIExEQVAgSWRlbnRpdHkgUHJvdmlkZXKCtRgPCg1pYW0uaWRwLndyaXRlgtPkkwIUOgEqGg8vaWRwcy9sZGFwL3tpZH0SyAEKEEFkZEFwcGxlUHJvdmlkZXISKS56aXRhZGVsLmFkbWluLnYxLkFkZEFwcGxlUHJvdmlkZXJSZXF1ZXN0Gioueml0YWRlbC5hZG1pbi52MS5BZGRBcHBsZVByb3ZpZGVyUmVzcG9uc2UiXZJBMQoSSWRlbnRpdHkgUHJvdmlkZXJzEhtBZGQgQXBwbGUgSWRlbnRpdHkgUHJvdmlkZXKCtRgPCg1pYW0uaWRwLndyaXRlgtPkkwIQOgEqIgsvaWRwcy9hcHBsZRLZAQoTVXBkYXRlQXBwbGVQcm92aWRlchIsLnppdGFkZWwuYWRtaW4udjEuVXBkYXRlQXBwbGVQcm92aWRlclJlcXVlc3QaLS56aXRhZGVsLmFkbWluLnYxLlVwZGF0ZUFwcGxlUHJvdmlkZXJSZXNwb25zZSJlkkE0ChJJZGVudGl0eSBQcm92aWRlcnMSHlVwZGF0ZSBBcHBsZSBJZGVudGl0eSBQcm92aWRlcoK1GA8KDWlhbS5pZHAud3JpdGWC0+STAhU6ASoaEC9pZHBzL2FwcGxlL3tpZH0SwwEKD0FkZFNBTUxQcm92aWRlchIoLnppdGFkZWwuYWRtaW4udjEuQWRkU0FNTFByb3ZpZGVyUmVxdWVzdBopLnppdGFkZWwuYWRtaW4udjEuQWRkU0FNTFByb3ZpZGVyUmVzcG9uc2UiW5JBMAoSSWRlbnRpdHkgUHJvdmlkZXJzEhpBZGQgU0FNTCBJZGVudGl0eSBQcm92aWRlcoK1GA8KDWlhbS5pZHAud3JpdGWC0+STAg86ASoiCi9pZHBzL3NhbWwS1AEKElVwZGF0ZVNBTUxQcm92aWRlchIrLnppdGFkZWwuYWRtaW4udjEuVXBkYXRlU0FNTFByb3ZpZGVyUmVxdWVzdBosLnppdGFkZWwuYWRtaW4udjEuVXBkYXRlU0FNTFByb3ZpZGVyUmVzcG9uc2UiY5JBMwoSSWRlbnRpdHkgUHJvdmlkZXJzEh1VcGRhdGUgU0FNTCBJZGVudGl0eSBQcm92aWRlcoK1GA8KDWlhbS5pZHAud3JpdGWC0+STAhQ6ASoaDy9pZHBzL3NhbWwve2lkfRKoAgohUmVnZW5lcmF0ZVNBTUxQcm92aWRlckNlcnRpZmljYXRlEjoueml0YWRlbC5hZG1pbi52MS5SZWdlbmVyYXRlU0FNTFByb3ZpZGVyQ2VydGlmaWNhdGVSZXF1ZXN0Gjsueml0YWRlbC5hZG1pbi52MS5SZWdlbmVyYXRlU0FNTFByb3ZpZGVyQ2VydGlmaWNhdGVSZXNwb25zZSKJAZJBQwoSSWRlbnRpdHkgUHJvdmlkZXJzEi1SZWdlbmVyYXRlIFNBTUwgSWRlbnRpdHkgUHJvdmlkZXIgQ2VydGlmaWNhdGWCtRgPCg1pYW0uaWRwLndyaXRlgtPkkwIqOgEqIiUvaWRwcy9zYW1sL3tpZH0vX2dlbmVyYXRlX2NlcnRpZmljYXRlEsUBCg5EZWxldGVQcm92aWRlchInLnppdGFkZWwuYWRtaW4udjEuRGVsZXRlUHJvdmlkZXJSZXF1ZXN0Gigueml0YWRlbC5hZG1pbi52MS5EZWxldGVQcm92aWRlclJlc3BvbnNlImCSQS4KEklkZW50aXR5IFByb3ZpZGVycxIYRGVsZXRlIElkZW50aXR5IFByb3ZpZGVygrUYDwoNaWFtLmlkcC53cml0ZYLT5JMCFioUL2lkcHMvdGVtcGxhdGVzL3tpZH0S6wEKD0dldE9yZ0lBTVBvbGljeRIoLnppdGFkZWwuYWRtaW4udjEuR2V0T3JnSUFNUG9saWN5UmVxdWVzdBopLnppdGFkZWwuYWRtaW4udjEuR2V0T3JnSUFNUG9saWN5UmVzcG9uc2UiggGSQVIKCFNldHRpbmdzCg9Eb21haW4gU2V0dGluZ3MSEkdldCBPcmcgSUFNIFBvbGljeRofVXNlIEdldCBEb21haW4gU2V0dGluZ3MgaW5zdGVhZFgBgrUYEQoPaWFtLnBvbGljeS5yZWFkgtPkkwISEhAvcG9saWNpZXMvb3JnaWFtEv4BChJVcGRhdGVPcmdJQU1Qb2xpY3kSKy56aXRhZGVsLmFkbWluLnYxLlVwZGF0ZU9yZ0lBTVBvbGljeVJlcXVlc3QaLC56aXRhZGVsLmFkbWluLnYxLlVwZGF0ZU9yZ0lBTVBvbGljeVJlc3BvbnNlIowBkkFYCghTZXR0aW5ncwoPRG9tYWluIFNldHRpbmdzEhVVcGRhdGUgT3JnIElBTSBQb2xpY3kaIlVzZSBVcGRhdGUgRG9tYWluIFNldHRpbmdzIGluc3RlYWRYAYK1GBIKEGlhbS5wb2xpY3kud3JpdGWC0+STAhU6ASoaEC9wb2xpY2llcy9vcmdpYW0SmwIKFUdldEN1c3RvbU9yZ0lBTVBvbGljeRIuLnppdGFkZWwuYWRtaW4udjEuR2V0Q3VzdG9tT3JnSUFNUG9saWN5UmVxdWVzdBovLnppdGFkZWwuYWRtaW4udjEuR2V0Q3VzdG9tT3JnSUFNUG9saWN5UmVzcG9uc2UioAGSQWIKCFNldHRpbmdzCg9Eb21haW4gU2V0dGluZ3MSEkdldCBPcmcgSUFNIFBvbGljeRovVXNlIEdldERvbWFpbiBTZXR0aW5ncyBmb3IgT3JnYW5pemF0aW9uIGluc3RlYWRYAYK1GBEKD2lhbS5wb2xpY3kucmVhZILT5JMCIBIeL29yZ3Mve29yZ19pZH0vcG9saWNpZXMvb3JnaWFtEqcCChVBZGRDdXN0b21PcmdJQU1Qb2xpY3kSLi56aXRhZGVsLmFkbWluLnYxLkFkZEN1c3RvbU9yZ0lBTVBvbGljeVJlcXVlc3QaLy56aXRhZGVsLmFkbWluLnYxLkFkZEN1c3RvbU9yZ0lBTVBvbGljeVJlc3BvbnNlIqwBkkFqCghTZXR0aW5ncwoPRG9tYWluIFNldHRpbmdzEhlBZGQgQ3VzdG9tIE9yZyBJQU0gUG9saWN5GjBVc2UgR2V0IERvbWFpbiBTZXR0aW5ncyBmb3IgT3JnYW5pemF0aW9uIGluc3RlYWRYAYK1GBIKEGlhbS5wb2xpY3kud3JpdGWC0+STAiM6ASoiHi9vcmdzL3tvcmdfaWR9L3BvbGljaWVzL29yZ2lhbRKzAgoYVXBkYXRlQ3VzdG9tT3JnSUFNUG9saWN5EjEueml0YWRlbC5hZG1pbi52MS5VcGRhdGVDdXN0b21PcmdJQU1Qb2xpY3lSZXF1ZXN0GjIueml0YWRlbC5hZG1pbi52MS5VcGRhdGVDdXN0b21PcmdJQU1Qb2xpY3lSZXNwb25zZSKvAZJBbQoIU2V0dGluZ3MKD0RvbWFpbiBTZXR0aW5ncxIcVXBkYXRlIEN1c3RvbSBPcmcgSUFNIFBvbGljeRowVXNlIEdldCBEb21haW4gU2V0dGluZ3MgZm9yIE9yZ2FuaXphdGlvbiBpbnN0ZWFkWAGCtRgSChBpYW0ucG9saWN5LndyaXRlgtPkkwIjOgEqGh4vb3Jncy97b3JnX2lkfS9wb2xpY2llcy9vcmdpYW0S0wIKIFJlc2V0Q3VzdG9tT3JnSUFNUG9saWN5VG9EZWZhdWx0Ejkueml0YWRlbC5hZG1pbi52MS5SZXNldEN1c3RvbU9yZ0lBTVBvbGljeVRvRGVmYXVsdFJlcXVlc3QaOi56aXRhZGVsLmFkbWluLnYxLlJlc2V0Q3VzdG9tT3JnSUFNUG9saWN5VG9EZWZhdWx0UmVzcG9uc2UitwGSQXcKCFNldHRpbmdzCg9Eb21haW4gU2V0dGluZ3MSJVJlc2V0IERvbWFpbiBTZXR0aW5ncyBvZiBPcmdhbml6YXRpb24aMVVzZSBSZXNldCBEb21haW4gU2V0dGluZ3Mgb2YgT3JnYW5pemF0aW9uIGluc3RlYWRYAYK1GBMKEWlhbS5wb2xpY3kuZGVsZXRlgtPkkwIgKh4vb3Jncy97b3JnX2lkfS9wb2xpY2llcy9vcmdpYW0SmwMKD0dldERvbWFpblBvbGljeRIoLnppdGFkZWwuYWRtaW4udjEuR2V0RG9tYWluUG9saWN5UmVxdWVzdBopLnppdGFkZWwuYWRtaW4udjEuR2V0RG9tYWluUG9saWN5UmVzcG9uc2UisgKSQYECCghTZXR0aW5ncwoPRG9tYWluIFNldHRpbmdzEhNHZXQgRG9tYWluIFNldHRpbmdzGq4BUmV0dXJucyB0aGUgZG9tYWluIHNldHRpbmdzIGNvbmZpZ3VyZWQgYXMgZGVmYXVsdCBvbiB0aGUgaW5zdGFuY2UuIERvbWFpbiBzZXR0aW5ncyBzcGVjaWZ5IGhvdyBaSVRBREVMIHNob3VsZCBoYW5kbGUgZG9tYWlucywgaW4gcmVnYXJkcyB0byB1c2VybmFtZXMsIGVtYWlscyBhbmQgdmFsaWRhdGlvbi4uSh4KAzIwMBIXChVkZWZhdWx0IGRvbWFpbiBwb2xpY3mCtRgRCg9pYW0ucG9saWN5LnJlYWSC0+STAhISEC9wb2xpY2llcy9kb21haW4S5wMKElVwZGF0ZURvbWFpblBvbGljeRIrLnppdGFkZWwuYWRtaW4udjEuVXBkYXRlRG9tYWluUG9saWN5UmVxdWVzdBosLnppdGFkZWwuYWRtaW4udjEuVXBkYXRlRG9tYWluUG9saWN5UmVzcG9uc2Ui9QKSQcACCghTZXR0aW5ncwoPRG9tYWluIFNldHRpbmdzEhZVcGRhdGUgRG9tYWluIFNldHRpbmdzGuIBVXBkYXRlIHRoZSBkb21haW4gc2V0dGluZ3MgY29uZmlndXJlZCBhcyBkZWZhdWx0IG9uIHRoZSBpbnN0YW5jZS4gRG9tYWluIHNldHRpbmdzIHNwZWNpZnkgaG93IFpJVEFERUwgc2hvdWxkIGhhbmRsZSBkb21haW5zLCB1c2VybmFtZXMsIGVtYWlscyBhbmQgdmFsaWRhdGlvbi4gSXQgYWZmZWN0cyBhbGwgb3JnYW5pemF0aW9ucyB0aGF0IGRvIG5vdCBoYXZlIG92ZXJ3cml0dGVuIHNldHRpbmdzLkomCgMyMDASHwodZGVmYXVsdCBkb21haW4gcG9saWN5IHVwZGF0ZWSCtRgSChBpYW0ucG9saWN5LndyaXRlgtPkkwIVOgEqGhAvcG9saWNpZXMvZG9tYWluEtIEChVHZXRDdXN0b21Eb21haW5Qb2xpY3kSLi56aXRhZGVsLmFkbWluLnYxLkdldEN1c3RvbURvbWFpblBvbGljeVJlcXVlc3QaLy56aXRhZGVsLmFkbWluLnYxLkdldEN1c3RvbURvbWFpblBvbGljeVJlc3BvbnNlItcDkkGYAwoIU2V0dGluZ3MKD0RvbWFpbiBTZXR0aW5ncwoNT3JnYW5pemF0aW9ucxIkR2V0IERvbWFpbiBTZXR0aW5ncyBmb3IgT3JnYW5pemF0aW9uGvoBR2V0IHRoZSBkb21haW4gc2V0dGluZ3MgY29uZmlndXJlZCBvbiBhIHNwZWNpZmljIG9yZ2FuaXphdGlvbi4gSWYgdGhlIG9yZ2FuaXphdGlvbiBkb2Vzbid0IGhhdmUgYSBjdXN0b20gc2V0dGluZywgdGhlIGRlZmF1bHQgd2lsbCBiZSByZXR1cm5lZC4gRG9tYWluIHNldHRpbmdzIHNwZWNpZnkgaG93IFpJVEFERUwgc2hvdWxkIGhhbmRsZSBkb21haW5zLCBpbiByZWdhcmRzIHRvIHVzZXJuYW1lcywgZW1haWxzIGFuZCB2YWxpZGF0aW9uLkpJCgMyMDASQgpAZG9tYWluIHBvbGljeSBvZiB0aGUgb3JnIG9yIHRoZSBkZWZhdWx0IHBvbGljeSBpZiBub3QgY3VzdG9taXplZIK1GBEKD2lhbS5wb2xpY3kucmVhZILT5JMCIBIeL29yZ3Mve29yZ19pZH0vcG9saWNpZXMvZG9tYWluEpwEChVBZGRDdXN0b21Eb21haW5Qb2xpY3kSLi56aXRhZGVsLmFkbWluLnYxLkFkZEN1c3RvbURvbWFpblBvbGljeVJlcXVlc3QaLy56aXRhZGVsLmFkbWluLnYxLkFkZEN1c3RvbURvbWFpblBvbGljeVJlc3BvbnNlIqEDkkHeAgoIU2V0dGluZ3MKD0RvbWFpbiBTZXR0aW5ncwoNT3JnYW5pemF0aW9ucxIpU2V0IGEgRG9tYWluIFNldHRpbmdzIGZvciBhbiBPcmdhbml6YXRpb24a5gFDcmVhdGUgdGhlIGRvbWFpbiBzZXR0aW5ncyBjb25maWd1cmVkIG9uIGEgc3BlY2lmaWMgb3JnYW5pemF0aW9uLiBJdCB3aWxsIG92ZXJ3cml0ZSB0aGUgc2V0dGluZ3Mgc3BlY2lmaWVkIG9uIHRoZSBpbnN0YW5jZS4gRG9tYWluIHNldHRpbmdzIHNwZWNpZnkgaG93IFpJVEFERUwgc2hvdWxkIGhhbmRsZSBkb21haW5zLCBpbiByZWdhcmRzIHRvIHVzZXJuYW1lcywgZW1haWxzIGFuZCB2YWxpZGF0aW9uLkoeCgMyMDASFwoVZG9tYWluIHBvbGljeSBjcmVhdGVkgrUYEgoQaWFtLnBvbGljeS53cml0ZYLT5JMCIzoBKiIeL29yZ3Mve29yZ19pZH0vcG9saWNpZXMvZG9tYWluEqMEChhVcGRhdGVDdXN0b21Eb21haW5Qb2xpY3kSMS56aXRhZGVsLmFkbWluLnYxLlVwZGF0ZUN1c3RvbURvbWFpblBvbGljeVJlcXVlc3QaMi56aXRhZGVsLmFkbWluLnYxLlVwZGF0ZUN1c3RvbURvbWFpblBvbGljeVJlc3BvbnNlIp8DkkHcAgoIU2V0dGluZ3MKD0RvbWFpbiBTZXR0aW5ncwoNT3JnYW5pemF0aW9ucxInVXBkYXRlIERvbWFpbiBTZXR0aW5ncyBmb3IgT3JnYW5pemF0aW9uGuYBVXBkYXRlIHRoZSBkb21haW4gc2V0dGluZ3MgY29uZmlndXJlZCBvbiBhIHNwZWNpZmljIG9yZ2FuaXphdGlvbi4gSXQgd2lsbCBvdmVyd3JpdGUgdGhlIHNldHRpbmdzIHNwZWNpZmllZCBvbiB0aGUgaW5zdGFuY2UuIERvbWFpbiBzZXR0aW5ncyBzcGVjaWZ5IGhvdyBaSVRBREVMIHNob3VsZCBoYW5kbGUgZG9tYWlucywgaW4gcmVnYXJkcyB0byB1c2VybmFtZXMsIGVtYWlscyBhbmQgdmFsaWRhdGlvbi5KHgoDMjAwEhcKFWRvbWFpbiBwb2xpY3kgdXBkYXRlZIK1GBIKEGlhbS5wb2xpY3kud3JpdGWC0+STAiM6ASoaHi9vcmdzL3tvcmdfaWR9L3BvbGljaWVzL2RvbWFpbhLIBAogUmVzZXRDdXN0b21Eb21haW5Qb2xpY3lUb0RlZmF1bHQSOS56aXRhZGVsLmFkbWluLnYxLlJlc2V0Q3VzdG9tRG9tYWluUG9saWN5VG9EZWZhdWx0UmVxdWVzdBo6LnppdGFkZWwuYWRtaW4udjEuUmVzZXRDdXN0b21Eb21haW5Qb2xpY3lUb0RlZmF1bHRSZXNwb25zZSKsA5JB6wIKCFNldHRpbmdzCg9Eb21haW4gU2V0dGluZ3MKDU9yZ2FuaXphdGlvbnMSJVJlc2V0IERvbWFpbiBTZXR0aW5ncyBvZiBPcmdhbml6YXRpb24a1wFSZXNldHMgdGhlIGRvbWFpbiBzZXR0aW5ncyBjb25maWd1cmVkIG9uIGEgc3BlY2lmaWMgb3JnYW5pemF0aW9uIHRvIHRoZSBzZXR0aW5ncyBjb25maWd1cmVkIG9uIHRoZSBpbnN0YW5jZS4gRG9tYWluIHNldHRpbmdzIHNwZWNpZnkgaG93IFpJVEFERUwgc2hvdWxkIGhhbmRsZSBkb21haW5zLCBpbiByZWdhcmRzIHRvIHVzZXJuYW1lcywgZW1haWxzIGFuZCB2YWxpZGF0aW9uLko+CgMyMDASNwo1cmVzZXRzIHRoZSBjdXN0b20gZG9tYWluIHBvbGljeSB0byB0aGUgZGVmYXVsdCBwb2xpY3mCtRgTChFpYW0ucG9saWN5LmRlbGV0ZYLT5JMCICoeL29yZ3Mve29yZ19pZH0vcG9saWNpZXMvZG9tYWluErgECg5HZXRMYWJlbFBvbGljeRInLnppdGFkZWwuYWRtaW4udjEuR2V0TGFiZWxQb2xpY3lSZXF1ZXN0Gigueml0YWRlbC5hZG1pbi52MS5HZXRMYWJlbFBvbGljeVJlc3BvbnNlItIDkkGiAwoIU2V0dGluZ3MKCEJyYW5kaW5nEiZHZXQgUHJpdmF0ZSBMYWJlbGluZy9CcmFuZGluZyBTZXR0aW5ncxrEAlJldHVybnMgdGhlIGN1cnJlbnRseSBhY3RpdmUgcHJpdmF0ZSBsYWJlbGluZy9icmFuZGluZyBjb25maWd1cmVkIG9uIHRoZSBpbnN0YW5jZSBsZXZlbC4gVGhlIHNldHRpbmdzIHdpbGwgdHJpZ2dlciBpZiB0aGUgb3JnYW5pemF0aW9uIGhhcyBub3Qgb3ZlcndyaXR0ZW4gdGhlIHNldHRpbmdzIG9yIGlmIG5vIHNwZWNpZmljIG9yZ2FuaXphdGlvbiBpcyBjYWxsZWQgb24gdGhlIGxvZ2luIFVJLiBEZWZpbmUgd2hhdCBjb2xvcnMsIGZvbnRzLCBhbmQgbG9nbyBzaG91bGQgYmUgdXNlZCBmb3IgdGhlIExvZ2luL1JlZ2lzdGVyIFVJLCBFLU1haWxzIGFuZCBDb25zb2xlLkodCgMyMDASFgoUZGVmYXVsdCBsYWJlbCBwb2xpY3mCtRgRCg9pYW0ucG9saWN5LnJlYWSC0+STAhESDy9wb2xpY2llcy9sYWJlbBKbBgoVR2V0UHJldmlld0xhYmVsUG9saWN5Ei4ueml0YWRlbC5hZG1pbi52MS5HZXRQcmV2aWV3TGFiZWxQb2xpY3lSZXF1ZXN0Gi8ueml0YWRlbC5hZG1pbi52MS5HZXRQcmV2aWV3TGFiZWxQb2xpY3lSZXNwb25zZSKgBZJB5wQKCFNldHRpbmdzCghCcmFuZGluZxIuR2V0IFByZXZpZXcgUHJpdmF0ZSBMYWJlbGluZy9CcmFuZGluZyBTZXR0aW5ncxqBBFJldHVybnMgdGhlIHByZXZpZXcgcHJpdmF0ZSBsYWJlbGluZy9icmFuZGluZyBjb25maWd1cmVkIG9uIHRoZSBpbnN0YW5jZSBsZXZlbC4gVGhlIHByZXZpZXcgaXMgdXNlZCB0byBzaG93IHlvdSBob3cgaXQgd2lsbCBsb29rIGxpa2UsIGFuZCBub3QgYWN0aXZhdGUgaXQgZGlyZWN0bHkgZm9yIHlvdXIgdXNlcnMuIEluIHRoZSBmdXR1cmUsIGl0IHNob3VsZCBiZSBwb3NzaWJsZSB0byBzZW5kIGEgcHJldmlldyBtYWlsIGFuZCBoYXZlIGEgbG9vayBhdCB0aGUgcHJldmlldyBsb2dpbi4gVGhlIHNldHRpbmdzIHdpbGwgdHJpZ2dlciBpZiB0aGUgb3JnYW5pemF0aW9uIGhhcyBub3Qgb3ZlcndyaXR0ZW4gdGhlIHNldHRpbmdzIG9yIGlmIG5vIHNwZWNpZmljIG9yZ2FuaXphdGlvbiBpcyBjYWxsZWQgb24gdGhlIGxvZ2luIFVJLiBEZWZpbmUgd2hhdCBjb2xvcnMsIGZvbnRzLCBhbmQgbG9nbyBzaG91bGQgYmUgdXNlZCBmb3IgdGhlIExvZ2luL1JlZ2lzdGVyIFVJLCBFLU1haWxzIGFuZCBDb25zb2xlLkodCgMyMDASFgoUZGVmYXVsdCBsYWJlbCBwb2xpY3mCtRgRCg9pYW0ucG9saWN5LnJlYWSC0+STAhoSGC9wb2xpY2llcy9sYWJlbC9fcHJldmlldxL3BAoRVXBkYXRlTGFiZWxQb2xpY3kSKi56aXRhZGVsLmFkbWluLnYxLlVwZGF0ZUxhYmVsUG9saWN5UmVxdWVzdBorLnppdGFkZWwuYWRtaW4udjEuVXBkYXRlTGFiZWxQb2xpY3lSZXNwb25zZSKIBJJB1AMKCFNldHRpbmdzCghCcmFuZGluZxIhVXBkYXRlIExhYmVsaW5nL0JyYW5kaW5nIFNldHRpbmdzGvMCVXBkYXRlIHRoZSBwcmV2aWV3IHByaXZhdGUgbGFiZWxpbmcvYnJhbmRpbmcgY29uZmlndXJlZCBvbiB0aGUgaW5zdGFuY2UgbGV2ZWwuIEl0IGFmZmVjdHMgYWxsIG9yZ2FuaXphdGlvbnMsIHRoYXQgZG9uJ3Qgb3ZlcndyaXRlIHRoZSBzZXR0aW5ncy4gVGhlIHByZXZpZXcgaXMgdXNlZCB0byBzaG93IHlvdSBob3cgaXQgd2lsbCBsb29rIGxpa2UsIG1ha2Ugc3VyZSB0byBhY3RpdmF0ZSBpdCBhcyBzb29uIGFzIHlvdSBhcmUgaGFwcHkgd2l0aCB0aGUgY29uZmlndXJhdGlvbi4gRGVmaW5lIHdoYXQgY29sb3JzLCBmb250cywgYW5kIGxvZ28gc2hvdWxkIGJlIHVzZWQgZm9yIHRoZSBMb2dpbi9SZWdpc3RlciBVSSwgRS1NYWlscyBhbmQgQ29uc29sZS5KJQoDMjAwEh4KHGRlZmF1bHQgbGFiZWwgcG9saWN5IHVwZGF0ZWSCtRgSChBpYW0ucG9saWN5LndyaXRlgtPkkwIUOgEqGg8vcG9saWNpZXMvbGFiZWwSjgQKE0FjdGl2YXRlTGFiZWxQb2xpY3kSLC56aXRhZGVsLmFkbWluLnYxLkFjdGl2YXRlTGFiZWxQb2xpY3lSZXF1ZXN0Gi0ueml0YWRlbC5hZG1pbi52MS5BY3RpdmF0ZUxhYmVsUG9saWN5UmVzcG9uc2UimQOSQdsCCghTZXR0aW5ncwoIQnJhbmRpbmcSI0FjdGl2YXRlIExhYmVsaW5nL0JyYW5kaW5nIFNldHRpbmdzGp8CQWN0aXZhdGVzIHRoZSBwcmV2aWV3IHByaXZhdGUgbGFiZWxpbmcvYnJhbmRpbmcgY29uZmlndXJlZCBvbiB0aGUgaW5zdGFuY2UgbGV2ZWwuIEl0IHdpbGwgYmUgc2hvd24gdG8gdGhlIHVzZXJzIGFmdGVyd2FyZC4gSXQgYWZmZWN0cyBhbGwgb3JnYW5pemF0aW9ucywgdGhhdCBkb24ndCBvdmVyd3JpdGUgdGhlIHNldHRpbmdzLiBEZWZpbmVzIHdoYXQgY29sb3JzLCBmb250cywgYW5kIGxvZ28gc2hvdWxkIGJlIHVzZWQgZm9yIHRoZSBMb2dpbi9SZWdpc3RlciBVSSwgRS1NYWlscyBhbmQgQ29uc29sZS6CtRgSChBpYW0ucG9saWN5LndyaXRlgtPkkwIeOgEqIhkvcG9saWNpZXMvbGFiZWwvX2FjdGl2YXRlEo0DChVSZW1vdmVMYWJlbFBvbGljeUxvZ28SLi56aXRhZGVsLmFkbWluLnYxLlJlbW92ZUxhYmVsUG9saWN5TG9nb1JlcXVlc3QaLy56aXRhZGVsLmFkbWluLnYxLlJlbW92ZUxhYmVsUG9saWN5TG9nb1Jlc3BvbnNlIpICkkHcAQoIU2V0dGluZ3MKCEJyYW5kaW5nEhFSZW1vdmUgTG9nbyBMaWdodBqyAVJlbW92ZXMgdGhlIGxvZ28gb2YgdGhlIGxpZ2h0IHRoZW1lIGZyb20gdGhlIGNvbmZpZ3VyZWQgbGFiZWwgcG9saWN5L2JyYW5kaW5nIG9mIHRoZSBpbnN0YW5jZS4gSXQgd2lsbCBvbmx5IGJlIHNob3duIG9uIHRoZSBwcmV2aWV3LiBNYWtlIHN1cmUgdG8gYWN0aXZhdGUgeW91ciBjaGFuZ2VzIGFmdGVyd2FyZC6CtRgSChBpYW0ucG9saWN5LndyaXRlgtPkkwIWKhQvcG9saWNpZXMvbGFiZWwvbG9nbxKcAwoZUmVtb3ZlTGFiZWxQb2xpY3lMb2dvRGFyaxIyLnppdGFkZWwuYWRtaW4udjEuUmVtb3ZlTGFiZWxQb2xpY3lMb2dvRGFya1JlcXVlc3QaMy56aXRhZGVsLmFkbWluLnYxLlJlbW92ZUxhYmVsUG9saWN5TG9nb0RhcmtSZXNwb25zZSKVApJB2gEKCFNldHRpbmdzCghCcmFuZGluZxIQUmVtb3ZlIExvZ28gRGFyaxqxAVJlbW92ZXMgdGhlIGxvZ28gb2YgdGhlIGRhcmsgdGhlbWUgZnJvbSB0aGUgY29uZmlndXJlZCBsYWJlbCBwb2xpY3kvYnJhbmRpbmcgb2YgdGhlIGluc3RhbmNlLiBJdCB3aWxsIG9ubHkgYmUgc2hvd24gb24gdGhlIHByZXZpZXcuIE1ha2Ugc3VyZSB0byBhY3RpdmF0ZSB5b3VyIGNoYW5nZXMgYWZ0ZXJ3YXJkLoK1GBIKEGlhbS5wb2xpY3kud3JpdGWC0+STAhsqGS9wb2xpY2llcy9sYWJlbC9sb2dvX2RhcmsSjQMKFVJlbW92ZUxhYmVsUG9saWN5SWNvbhIuLnppdGFkZWwuYWRtaW4udjEuUmVtb3ZlTGFiZWxQb2xpY3lJY29uUmVxdWVzdBovLnppdGFkZWwuYWRtaW4udjEuUmVtb3ZlTGFiZWxQb2xpY3lJY29uUmVzcG9uc2UikgKSQdwBCghTZXR0aW5ncwoIQnJhbmRpbmcSEVJlbW92ZSBJY29uIExpZ2h0GrIBUmVtb3ZlcyB0aGUgaWNvbiBvZiB0aGUgbGlnaHQgdGhlbWUgZnJvbSB0aGUgY29uZmlndXJlZCBsYWJlbCBwb2xpY3kvYnJhbmRpbmcgb2YgdGhlIGluc3RhbmNlLiBJdCB3aWxsIG9ubHkgYmUgc2hvd24gb24gdGhlIHByZXZpZXcuIE1ha2Ugc3VyZSB0byBhY3RpdmF0ZSB5b3VyIGNoYW5nZXMgYWZ0ZXJ3YXJkLoK1GBIKEGlhbS5wb2xpY3kud3JpdGWC0+STAhYqFC9wb2xpY2llcy9sYWJlbC9pY29uEpwDChlSZW1vdmVMYWJlbFBvbGljeUljb25EYXJrEjIueml0YWRlbC5hZG1pbi52MS5SZW1vdmVMYWJlbFBvbGljeUljb25EYXJrUmVxdWVzdBozLnppdGFkZWwuYWRtaW4udjEuUmVtb3ZlTGFiZWxQb2xpY3lJY29uRGFya1Jlc3BvbnNlIpUCkkHaAQoIU2V0dGluZ3MKCEJyYW5kaW5nEhBSZW1vdmUgSWNvbiBEYXJrGrEBUmVtb3ZlcyB0aGUgaWNvbiBvZiB0aGUgZGFyayB0aGVtZSBmcm9tIHRoZSBjb25maWd1cmVkIGxhYmVsIHBvbGljeS9icmFuZGluZyBvZiB0aGUgaW5zdGFuY2UuIEl0IHdpbGwgb25seSBiZSBzaG93biBvbiB0aGUgcHJldmlldy4gTWFrZSBzdXJlIHRvIGFjdGl2YXRlIHlvdXIgY2hhbmdlcyBhZnRlcndhcmQugrUYEgoQaWFtLnBvbGljeS53cml0ZYLT5JMCGyoZL3BvbGljaWVzL2xhYmVsL2ljb25fZGFyaxL0AgoVUmVtb3ZlTGFiZWxQb2xpY3lGb250Ei4ueml0YWRlbC5hZG1pbi52MS5SZW1vdmVMYWJlbFBvbGljeUZvbnRSZXF1ZXN0Gi8ueml0YWRlbC5hZG1pbi52MS5SZW1vdmVMYWJlbFBvbGljeUZvbnRSZXNwb25zZSL5AZJBwwEKCFNldHRpbmdzCghCcmFuZGluZxILUmVtb3ZlIEZvbnQanwFSZW1vdmVzIHRoZSBmb250IGZyb20gdGhlIGNvbmZpZ3VyZWQgbGFiZWwgcG9saWN5L2JyYW5kaW5nIG9mIHRoZSBpbnN0YW5jZS4gSXQgd2lsbCBvbmx5IGJlIHNob3duIG9uIHRoZSBwcmV2aWV3LiBNYWtlIHN1cmUgdG8gYWN0aXZhdGUgeW91ciBjaGFuZ2VzIGFmdGVyd2FyZC6CtRgSChBpYW0ucG9saWN5LndyaXRlgtPkkwIWKhQvcG9saWNpZXMvbGFiZWwvZm9udBKABAoOR2V0TG9naW5Qb2xpY3kSJy56aXRhZGVsLmFkbWluLnYxLkdldExvZ2luUG9saWN5UmVxdWVzdBooLnppdGFkZWwuYWRtaW4udjEuR2V0TG9naW5Qb2xpY3lSZXNwb25zZSKaA5JB6gIKCFNldHRpbmdzCg5Mb2dpbiBTZXR0aW5ncxISR2V0IExvZ2luIFNldHRpbmdzGpoCUmV0dXJucyB0aGUgbG9naW4gc2V0dGluZ3MgZGVmaW5lZCBvbiB0aGUgaW5zdGFuY2UgbGV2ZWwuIEl0IHdpbGwgdHJpZ2dlciBmb3IgYWxsIG9yZ2FuaXphdGlvbnMsIHRoYXQgZG9uJ3Qgb3ZlcndyaXRlIHRoZSBzZXR0aW5ncy4gVGhlIGxvZ2luIHBvbGljeSBkZWZpbmVzIHdoYXQga2luZCBvZiBhdXRoZW50aWNhdGlvbiBwb3NzaWJpbGl0aWVzIHRoZSB1c2VyIHNob3VsZCBoYXZlLiBHZW5lcmFsbHkgc3BlYWtpbmcgdGhlIGJlaGF2aW9yIG9mIHRoZSBsb2dpbiBhbmQgcmVnaXN0ZXIgVUkuSh0KAzIwMBIWChRkZWZhdWx0IGxvZ2luIHBvbGljeYK1GBEKD2lhbS5wb2xpY3kucmVhZILT5JMCERIPL3BvbGljaWVzL2xvZ2luEp8EChFVcGRhdGVMb2dpblBvbGljeRIqLnppdGFkZWwuYWRtaW4udjEuVXBkYXRlTG9naW5Qb2xpY3lSZXF1ZXN0Gisueml0YWRlbC5hZG1pbi52MS5VcGRhdGVMb2dpblBvbGljeVJlc3BvbnNlIrADkkH8AgoIU2V0dGluZ3MKDkxvZ2luIFNldHRpbmdzEhVVcGRhdGUgTG9naW4gU2V0dGluZ3MaoQJVcGRhdGUgdGhlIGRlZmF1bHQgbG9naW4gc2V0dGluZ3MgZGVmaW5lZCBvbiB0aGUgaW5zdGFuY2UgbGV2ZWwuIEl0IHdpbGwgdHJpZ2dlciBmb3IgYWxsIG9yZ2FuaXphdGlvbnMsIHRoYXQgZG9uJ3Qgb3ZlcndyaXRlIHRoZSBzZXR0aW5ncy4gVGhlIGxvZ2luIHBvbGljeSBkZWZpbmVzIHdoYXQga2luZCBvZiBhdXRoZW50aWNhdGlvbiBwb3NzaWJpbGl0aWVzIHRoZSB1c2VyIHNob3VsZCBoYXZlLiBHZW5lcmFsbHkgc3BlYWtpbmcgdGhlIGJlaGF2aW9yIG9mIHRoZSBsb2dpbiBhbmQgcmVnaXN0ZXIgVUkuSiUKAzIwMBIeChxkZWZhdWx0IGxvZ2luIHBvbGljeSB1cGRhdGVkgrUYEgoQaWFtLnBvbGljeS53cml0ZYLT5JMCFDoBKhoPL3BvbGljaWVzL2xvZ2luEpcEChNMaXN0TG9naW5Qb2xpY3lJRFBzEiwueml0YWRlbC5hZG1pbi52MS5MaXN0TG9naW5Qb2xpY3lJRFBzUmVxdWVzdBotLnppdGFkZWwuYWRtaW4udjEuTGlzdExvZ2luUG9saWN5SURQc1Jlc3BvbnNlIqIDkkHiAgoIU2V0dGluZ3MKDkxvZ2luIFNldHRpbmdzChJJZGVudGl0eSBQcm92aWRlcnMSHkxpc3QgTGlua2VkIElkZW50aXR5IFByb3ZpZGVycxrcAVJldHVybnMgYSBsaXN0IG9mIGlkZW50aXR5IHByb3ZpZGVycyB0aGF0IGFyZSBsaW5rZWQgaW4gdGhlIGxvZ2luIHBvbGljeS4gVGhpcyBtZWFucywgdGhhdCB0aGV5IGFyZSBjb25maWd1cmVkIGZvciB0aGUgaW5zdGFuY2UgYW5kIHdpbGwgYmUgc2hvd24gdG8gdGhlIHVzZXJzLiBJdCBhZmZlY3RzIGFsbCBvcmdhbml6YXRpb25zLCB3aXRob3V0IGN1c3RvbSBsb2dpbiBzZXR0aW5ncy5KMwoDMjAwEiwKKklkZW50aXR5IHByb3ZpZGVycyBvZiBkZWZhdWx0IGxvZ2luIHBvbGljeYK1GBEKD2lhbS5wb2xpY3kucmVhZILT5JMCIToBKiIcL3BvbGljaWVzL2xvZ2luL2lkcHMvX3NlYXJjaBKIBAoTQWRkSURQVG9Mb2dpblBvbGljeRIsLnppdGFkZWwuYWRtaW4udjEuQWRkSURQVG9Mb2dpblBvbGljeVJlcXVlc3QaLS56aXRhZGVsLmFkbWluLnYxLkFkZElEUFRvTG9naW5Qb2xpY3lSZXNwb25zZSKTA5JB2gIKCFNldHRpbmdzCg5Mb2dpbiBTZXR0aW5ncwoSSWRlbnRpdHkgUHJvdmlkZXJzEhxBZGQgTGlua2VkIElkZW50aXR5IFByb3ZpZGVyGtABQWRkL2xpbmsgYSBwcmUtY29uZmlndXJlZCBpZGVudGl0eSBwcm92aWRlciB0byB0aGUgbG9naW4gc2V0dGluZ3Mgb2YgdGhlIGluc3RhbmNlLiBUaGlzIG1lYW5zIHRoYXQgaXQgd2lsbCBiZSBzaG93biB0byB0aGUgdXNlcnMgb24gdGhlIGxvZ2luIHBhZ2UuIEl0IGFmZmVjdHMgYWxsIG9yZ2FuaXphdGlvbnMsIHdpdGhvdXQgY3VzdG9tIGxvZ2luIHNldHRpbmdzLko5CgMyMDASMgowSWRlbnRpdHkgcHJvdmlkZXJzIGFkZGVkIHRvIGRlZmF1bHQgbG9naW4gcG9saWN5grUYEgoQaWFtLnBvbGljeS53cml0ZYLT5JMCGToBKiIUL3BvbGljaWVzL2xvZ2luL2lkcHMSmgQKGFJlbW92ZUlEUEZyb21Mb2dpblBvbGljeRIxLnppdGFkZWwuYWRtaW4udjEuUmVtb3ZlSURQRnJvbUxvZ2luUG9saWN5UmVxdWVzdBoyLnppdGFkZWwuYWRtaW4udjEuUmVtb3ZlSURQRnJvbUxvZ2luUG9saWN5UmVzcG9uc2UilgOSQdcCCghTZXR0aW5ncwoOTG9naW4gU2V0dGluZ3MKEklkZW50aXR5IFByb3ZpZGVycxIfUmVtb3ZlIExpbmtlZCBJZGVudGl0eSBQcm92aWRlchrGAVJlbW92ZSBhbiBpZGVudGl0eSBwcm92aWRlciBmcm9tIHRoZSBsb2dpbiBzZXR0aW5ncyBvZiB0aGUgaW5zdGFuY2UuIFRoaXMgbWVhbnMgdGhhdCBpdCB3aWxsIG5vdCBiZSBzaG93biB0byB0aGUgdXNlcnMgb24gdGhlIGxvZ2luIHBhZ2UuIEl0IGFmZmVjdHMgYWxsIG9yZ2FuaXphdGlvbnMsIHdpdGhvdXQgY3VzdG9tIGxvZ2luIHNldHRpbmdzLko9CgMyMDASNgo0SWRlbnRpdHkgcHJvdmlkZXJzIHJlbW92ZWQgZnJvbSBkZWZhdWx0IGxvZ2luIHBvbGljeYK1GBIKEGlhbS5wb2xpY3kud3JpdGWC0+STAh8qHS9wb2xpY2llcy9sb2dpbi9pZHBzL3tpZHBfaWR9EvYFChxMaXN0TG9naW5Qb2xpY3lTZWNvbmRGYWN0b3JzEjUueml0YWRlbC5hZG1pbi52MS5MaXN0TG9naW5Qb2xpY3lTZWNvbmRGYWN0b3JzUmVxdWVzdBo2LnppdGFkZWwuYWRtaW4udjEuTGlzdExvZ2luUG9saWN5U2Vjb25kRmFjdG9yc1Jlc3BvbnNlIuYEkkGfBAoIU2V0dGluZ3MKDkxvZ2luIFNldHRpbmdzChZBdXRoZW50aWNhdGlvbiBNZXRob2RzEhlMaXN0IFNlY29uZCBGYWN0b3JzICgyRkEpGp4DUmV0dXJucyBhIGxpc3Qgb2Ygc2Vjb25kIGZhY3RvcnMgKDJGQSkgY29uZmlndXJlZCBvbiB0aGUgbG9naW4gc2V0dGluZ3Mgb2YgdGhlIGluc3RhbmNlLiBJdCBhZmZlY3RzIGFsbCBvcmdhbml6YXRpb25zLCB3aXRob3V0IGN1c3RvbSBsb2dpbiBzZXR0aW5ncy4gQXV0aGVudGljYXRpb24gZmFjdG9ycyBhcmUgdXNlZCBhcyBhbiBhZGRpdGlvbmFsIGxheWVyIG9mIHNlY3VyaXR5IGZvciB5b3VyIHVzZXJzIChlLmcuIEF1dGhlbnRpY2F0aW9uIEFwcCwgRmluZ2VyUHJpbnQsIFdpbmRvd3MgSGVsbG8sIGV0YykuIFBlciBkZWZpbml0aW9uLCBpdCBpcyBjYWxsZWQgdGhlIHNlY29uZCBmYWN0b3IgYXMgaXQgaXMgdXNlZCBhZnRlciBhIHBhc3N3b3JkLiBJbiB0aGUgVUkgd2UgZ2VuZXJhbGl6ZSBpdCBhcyBtdWx0aS1mYWN0b3IuSi8KAzIwMBIoCiZzZWNvbmQgZmFjdG9ycyBvZiBkZWZhdWx0IGxvZ2luIHBvbGljeYK1GBEKD2lhbS5wb2xpY3kucmVhZILT5JMCKCImL3BvbGljaWVzL2xvZ2luL3NlY29uZF9mYWN0b3JzL19zZWFyY2gSogcKHEFkZFNlY29uZEZhY3RvclRvTG9naW5Qb2xpY3kSNS56aXRhZGVsLmFkbWluLnYxLkFkZFNlY29uZEZhY3RvclRvTG9naW5Qb2xpY3lSZXF1ZXN0GjYueml0YWRlbC5hZG1pbi52MS5BZGRTZWNvbmRGYWN0b3JUb0xvZ2luUG9saWN5UmVzcG9uc2UikgaSQc8FCghTZXR0aW5ncwoOTG9naW4gU2V0dGluZ3MKFkF1dGhlbnRpY2F0aW9uIE1ldGhvZHMSF0FkZCBTZWNvbmQgRmFjdG9yICgyRkEpGokEQWRkIGEgbmV3IHNlY29uZCBmYWN0b3IgKDJGQSkgdG8gdGhlIGxvZ2luIHNldHRpbmdzIG9mIHRoZSBpbnN0YW5jZS4gVXNlcnMgd2lsbCBoYXZlIHRoZSBwb3NzaWJpbGl0eSB0byBhdXRoZW50aWNhdGUgd2l0aCB0aGUgY29uZmlndXJlZCBmYWN0b3IgYWZ0ZXJ3YXJkLiBJdCBhZmZlY3RzIGFsbCBvcmdhbml6YXRpb25zLCB3aXRob3V0IGN1c3RvbSBsb2dpbiBzZXR0aW5ncy4gQXV0aGVudGljYXRpb24gZmFjdG9ycyBhcmUgdXNlZCBhcyBhbiBhZGRpdGlvbmFsIGZhY3RvciB0byBhZGQgbW9yZSBzZWN1cml0eSB0byB5b3VyIHVzZXJzIChlLmcuIEF1dGhlbnRpY2F0aW9uIEFwcCwgRmluZ2VyUHJpbnQsIFdpbmRvd3MgSGVsbG8sIGV0YykuIFBlciBkZWZpbml0aW9uLCBpdCBpcyBjYWxsZWQgYSBzZWNvbmQgZmFjdG9yIGFzIGl0IGlzIHVzZWQgYXMgYW4gYWRkaXRpb25hbCBhdXRoZW50aWNhdGlvbiBhZnRlciBhIHBhc3N3b3JkLiBJbiB0aGUgVUkgd2UgZ2VuZXJhbGl6ZSB0aGlzIGFzIG11bHRpLWZhY3Rvci5KNAoDMjAwEi0KK3NlY29uZCBmYWN0b3IgYWRkZWQgdG8gZGVmYXVsdCBsb2dpbiBwb2xpY3lKQAoDNDAwEjkKGmludmFsaWQgc2Vjb25kIGZhY3RvciB0eXBlEhsKGRoXIy9kZWZpbml0aW9ucy9ycGNTdGF0dXOCtRgSChBpYW0ucG9saWN5LndyaXRlgtPkkwIjOgEqIh4vcG9saWNpZXMvbG9naW4vc2Vjb25kX2ZhY3RvcnMSlgcKIVJlbW92ZVNlY29uZEZhY3RvckZyb21Mb2dpblBvbGljeRI6LnppdGFkZWwuYWRtaW4udjEuUmVtb3ZlU2Vjb25kRmFjdG9yRnJvbUxvZ2luUG9saWN5UmVxdWVzdBo7LnppdGFkZWwuYWRtaW4udjEuUmVtb3ZlU2Vjb25kRmFjdG9yRnJvbUxvZ2luUG9saWN5UmVzcG9uc2Ui9wWSQbAFCghTZXR0aW5ncwoOTG9naW4gU2V0dGluZ3MKFkF1dGhlbnRpY2F0aW9uIE1ldGhvZHMSGlJlbW92ZSBTZWNvbmQgRmFjdG9yICgyRkEpGuMDUmVtb3ZlIGEgY29uZmlndXJlZCBzZWNvbmQgZmFjdG9yICgyRkEpIGZyb20gdGhlIGxvZ2luIHNldHRpbmdzIG9mIHRoZSBpbnN0YW5jZS4gSXQgYWZmZWN0cyBhbGwgb3JnYW5pemF0aW9ucywgd2l0aG91dCBjdXN0b20gbG9naW4gc2V0dGluZ3MuIFVzZXJzIHdpbGwgbm90IGJlIGFibGUgdG8gYXV0aGVudGljYXRlIHdpdGggdGhlIGNvbmZpZ3VyZWQgZmFjdG9yIGFmdGVyd2FyZC4gQXV0aGVudGljYXRpb24gZmFjdG9ycyBhcmUgdXNlZCBhcyBhbiBhZGRpdGlvbmFsIGxheWVyIG9mIHNlY3VyaXR5IGZvciB5b3VyIHVzZXJzIChlLmcuIEF1dGhlbnRpY2F0aW9uIEFwcCwgRmluZ2VyUHJpbnQsIFdpbmRvd3MgSGVsbG8sIGV0YykuIFBlciBkZWZpbml0aW9uLCBpdCBpcyBjYWxsZWQgdGhlIHNlY29uZCBmYWN0b3IgYXMgaXQgaXMgdXNlZCBhZnRlciBhIHBhc3N3b3JkLiBJbiB0aGUgVUkgd2UgZ2VuZXJhbGl6ZSBpdCBhcyBtdWx0aS1mYWN0b3IuSjgKAzIwMBIxCi9zZWNvbmQgZmFjdG9yIHJlbW92ZWQgZnJvbSBkZWZhdWx0IGxvZ2luIHBvbGljeUpACgM0MDASOQoaSW52YWxpZCBzZWNvbmQgZmFjdG9yIHR5cGUSGwoZGhcjL2RlZmluaXRpb25zL3JwY1N0YXR1c4K1GBIKEGlhbS5wb2xpY3kud3JpdGWC0+STAicqJS9wb2xpY2llcy9sb2dpbi9zZWNvbmRfZmFjdG9ycy97dHlwZX0SvgYKG0xpc3RMb2dpblBvbGljeU11bHRpRmFjdG9ycxI0LnppdGFkZWwuYWRtaW4udjEuTGlzdExvZ2luUG9saWN5TXVsdGlGYWN0b3JzUmVxdWVzdBo1LnppdGFkZWwuYWRtaW4udjEuTGlzdExvZ2luUG9saWN5TXVsdGlGYWN0b3JzUmVzcG9uc2UisQWSQesECghTZXR0aW5ncwoOTG9naW4gU2V0dGluZ3MKFkF1dGhlbnRpY2F0aW9uIE1ldGhvZHMSGExpc3QgTXVsdGktZmFjdG9ycyAoTUZBKRrsA1JldHVybnMgYSBsaXN0IG9mIG11bHRpLWZhY3RvcnMgKE1GQSkgY29uZmlndXJlZCBvbiB0aGUgbG9naW4gc2V0dGluZ3Mgb2YgdGhlIGluc3RhbmNlLiBJdCBhZmZlY3RzIGFsbCBvcmdhbml6YXRpb25zLCB3aXRob3V0IGN1c3RvbSBsb2dpbiBzZXR0aW5ncy4gQXV0aGVudGljYXRpb24gZmFjdG9ycyBhcmUgdXNlZCBhcyBhbiBhZGRpdGlvbmFsIGxheWVyIG9mIHNlY3VyaXR5IGZvciB5b3VyIHVzZXJzIChlLmcuIEF1dGhlbnRpY2F0aW9uIEFwcCwgRmluZ2VyUHJpbnQsIFdpbmRvd3MgSGVsbG8sIGV0YykuICBQZXIgZGVmaW5pdGlvbiwgaXQgaXMgY2FsbGVkIG11bHRpZmFjdG9yIGZhY3RvciBvciBwYXNzd29yZGxlc3MgYXMgaXQgaXMgdXNlZCBhcyBmaXJzdCBhbmQgc2Vjb25kIGF1dGhlbnRpY2F0aW9uIGFuZCBhIHBhc3N3b3JkIGlzIG5vdCBuZWNlc3NhcnkuIEluIHRoZSBVSSB3ZSBnZW5lcmFsaXplIGl0IGFzIHBhc3N3b3JkbGVzcyBvciBwYXNza2V5LkouCgMyMDASJwolbXVsdGktZmFjdG9ycyBvZiBkZWZhdWx0IGxvZ2luIHBvbGljeYK1GBEKD2lhbS5wb2xpY3kucmVhZILT5JMCJyIlL3BvbGljaWVzL2xvZ2luL211bHRpX2ZhY3RvcnMvX3NlYXJjaBLnBgobQWRkTXVsdGlGYWN0b3JUb0xvZ2luUG9saWN5EjQueml0YWRlbC5hZG1pbi52MS5BZGRNdWx0aUZhY3RvclRvTG9naW5Qb2xpY3lSZXF1ZXN0GjUueml0YWRlbC5hZG1pbi52MS5BZGRNdWx0aUZhY3RvclRvTG9naW5Qb2xpY3lSZXNwb25zZSLaBZJBmAUKCFNldHRpbmdzCg5Mb2dpbiBTZXR0aW5ncwoWQXV0aGVudGljYXRpb24gTWV0aG9kcxIWQWRkIE11bHRpLUZhY3RvciAoTUZBKRrVA0FkZCBhIG11bHRpLWZhY3RvciAoTUZBKSB0byB0aGUgbG9naW4gc2V0dGluZ3Mgb2YgdGhlIGluc3RhbmNlLiBJdCBhZmZlY3RzIGFsbCBvcmdhbml6YXRpb25zLCB3aXRob3V0IGN1c3RvbSBsb2dpbiBzZXR0aW5ncy4gQXV0aGVudGljYXRpb24gZmFjdG9ycyBhcmUgdXNlZCBhcyBhbiBhZGRpdGlvbmFsIGxheWVyIG9mIHNlY3VyaXR5IGZvciB5b3VyIHVzZXJzIChlLmcuIEF1dGhlbnRpY2F0aW9uIEFwcCwgRmluZ2VyUHJpbnQsIFdpbmRvd3MgSGVsbG8sIGV0YykuICBQZXIgZGVmaW5pdGlvbiwgaXQgaXMgY2FsbGVkIG11bHRpLWZhY3RvciBmYWN0b3Igb3IgcGFzc3dvcmRsZXNzIGFzIGl0IGlzIHVzZWQgYXMgZmlyc3QgYW5kIHNlY29uZCBhdXRoZW50aWNhdGlvbiBhbmQgYSBwYXNzd29yZCBpcyBub3QgbmVjZXNzYXJ5LiBJbiB0aGUgVUkgd2UgZ2VuZXJhbGl6ZSBpdCBhcyBwYXNzd29yZGxlc3Mgb3IgcGFzc2tleS5KMwoDMjAwEiwKKm11bHRpLWZhY3RvciBhZGRlZCB0byBkZWZhdWx0IGxvZ2luIHBvbGljeUo/CgM0MDASOAoZaW52YWxpZCBtdWx0aS1mYWN0b3IgdHlwZRIbChkaFyMvZGVmaW5pdGlvbnMvcnBjU3RhdHVzgrUYEgoQaWFtLnBvbGljeS53cml0ZYLT5JMCIjoBKiIdL3BvbGljaWVzL2xvZ2luL211bHRpX2ZhY3RvcnMSlQcKIFJlbW92ZU11bHRpRmFjdG9yRnJvbUxvZ2luUG9saWN5Ejkueml0YWRlbC5hZG1pbi52MS5SZW1vdmVNdWx0aUZhY3RvckZyb21Mb2dpblBvbGljeVJlcXVlc3QaOi56aXRhZGVsLmFkbWluLnYxLlJlbW92ZU11bHRpRmFjdG9yRnJvbUxvZ2luUG9saWN5UmVzcG9uc2Ui+QWSQbMFCghTZXR0aW5ncwoOTG9naW4gU2V0dGluZ3MKFkF1dGhlbnRpY2F0aW9uIE1ldGhvZHMSGVJlbW92ZSBNdWx0aS1mYWN0b3IgKE1GQSka2gNSZW1vdmUgYSBtdWx0aS1mYWN0b3IgKE1GQSkgZnJvbSB0aGUgbG9naW4gc2V0dGluZ3Mgb2YgdGhlIGluc3RhbmNlLiBJdCBhZmZlY3RzIGFsbCBvcmdhbml6YXRpb25zLCB3aXRob3V0IGN1c3RvbSBsb2dpbiBzZXR0aW5ncy4gQXV0aGVudGljYXRpb24gZmFjdG9ycyBhcmUgdXNlZCBhcyBhbiBhZGRpdGlvbmFsIGxheWVyIG9mIHNlY3VyaXR5IGZvciB5b3VyIHVzZXJzIChlLmcuIEF1dGhlbnRpY2F0aW9uIEFwcCwgRmluZ2VyUHJpbnQsIFdpbmRvd3MgSGVsbG8sIGV0YykuICBQZXIgZGVmaW5pdGlvbiwgaXQgaXMgY2FsbGVkIG11bHRpLWZhY3RvciBmYWN0b3Igb3IgcGFzc3dvcmRsZXNzIGFzIGl0IGlzIHVzZWQgYXMgZmlyc3QgYW5kIHNlY29uZCBhdXRoZW50aWNhdGlvbiBhbmQgYSBwYXNzd29yZCBpcyBub3QgbmVjZXNzYXJ5LiBJbiB0aGUgVUkgd2UgZ2VuZXJhbGl6ZSBpdCBhcyBwYXNzd29yZGxlc3Mgb3IgcGFzc2tleS5KOAoDMjAwEjEKL3NlY29uZCBmYWN0b3IgcmVtb3ZlZCBmcm9tIGRlZmF1bHQgbG9naW4gcG9saWN5Sk0KAzQwMBJGCidtdWx0aS1mYWN0b3IgdHlwZSBub3QgZGVmaW5lZCBvbiBwb2xpY3kSGwoZGhcjL2RlZmluaXRpb25zL3JwY1N0YXR1c4K1GBIKEGlhbS5wb2xpY3kud3JpdGWC0+STAiYqJC9wb2xpY2llcy9sb2dpbi9tdWx0aV9mYWN0b3JzL3t0eXBlfRKVBAobR2V0UGFzc3dvcmRDb21wbGV4aXR5UG9saWN5EjQueml0YWRlbC5hZG1pbi52MS5HZXRQYXNzd29yZENvbXBsZXhpdHlQb2xpY3lSZXF1ZXN0GjUueml0YWRlbC5hZG1pbi52MS5HZXRQYXNzd29yZENvbXBsZXhpdHlQb2xpY3lSZXNwb25zZSKIA5JBygIKCFNldHRpbmdzChFQYXNzd29yZCBTZXR0aW5ncxIgR2V0IFBhc3N3b3JkIENvbXBsZXhpdHkgU2V0dGluZ3Ma2wFSZXR1cm5zIHRoZSBwYXNzd29yZCBjb21wbGV4aXR5IHNldHRpbmdzIGNvbmZpZ3VyZWQgb24gdGhlIGluc3RhbmNlLiBJdCBhZmZlY3RzIGFsbCBvcmdhbml6YXRpb25zLCB0aGF0IGRvIG5vdCBoYXZlIGEgY3VzdG9tIHNldHRpbmcgY29uZmlndXJlZC4gVGhlIHNldHRpbmdzIHNwZWNpZnkgaG93IGEgcGFzc3dvcmQgc2hvdWxkIGxvb2sgKGNoYXJhY3RlcnMsIGxlbmd0aCwgZXRjLilKKwoDMjAwEiQKImRlZmF1bHQgcGFzc3dvcmQgY29tcGxleGl0eSBwb2xpY3mCtRgRCg9pYW0ucG9saWN5LnJlYWSC0+STAh8SHS9wb2xpY2llcy9wYXNzd29yZC9jb21wbGV4aXR5Eu0ECh5VcGRhdGVQYXNzd29yZENvbXBsZXhpdHlQb2xpY3kSNy56aXRhZGVsLmFkbWluLnYxLlVwZGF0ZVBhc3N3b3JkQ29tcGxleGl0eVBvbGljeVJlcXVlc3QaOC56aXRhZGVsLmFkbWluLnYxLlVwZGF0ZVBhc3N3b3JkQ29tcGxleGl0eVBvbGljeVJlc3BvbnNlItcDkkGVAwoIU2V0dGluZ3MKEVBhc3N3b3JkIFNldHRpbmdzEiNVcGRhdGUgUGFzc3dvcmQgQ29tcGxleGl0eSBTZXR0aW5ncxrjAVVwZGF0ZXMgdGhlIGRlZmF1bHQgcGFzc3dvcmQgY29tcGxleGl0eSBzZXR0aW5ncyBjb25maWd1cmVkIG9uIHRoZSBpbnN0YW5jZS4gSXQgYWZmZWN0cyBhbGwgb3JnYW5pemF0aW9ucywgdGhhdCBkbyBub3QgaGF2ZSBhIGN1c3RvbSBzZXR0aW5nIGNvbmZpZ3VyZWQuIFRoZSBzZXR0aW5ncyBzcGVjaWZ5IGhvdyBhIHBhc3N3b3JkIHNob3VsZCBsb29rIChjaGFyYWN0ZXJzLCBsZW5ndGgsIGV0Yy4pSjMKAzIwMBIsCipkZWZhdWx0IHBhc3N3b3JkIGNvbXBsZXhpdHkgcG9saWN5IHVwZGF0ZWRKNgoDNDAwEi8KEGludmFsaWQgYXJndW1lbnQSGwoZGhcjL2RlZmluaXRpb25zL3JwY1N0YXR1c4K1GBIKEGlhbS5wb2xpY3kud3JpdGWC0+STAiI6ASoaHS9wb2xpY2llcy9wYXNzd29yZC9jb21wbGV4aXR5EoMEChRHZXRQYXNzd29yZEFnZVBvbGljeRItLnppdGFkZWwuYWRtaW4udjEuR2V0UGFzc3dvcmRBZ2VQb2xpY3lSZXF1ZXN0Gi4ueml0YWRlbC5hZG1pbi52MS5HZXRQYXNzd29yZEFnZVBvbGljeVJlc3BvbnNlIosDkkHUAgoIU2V0dGluZ3MKEVBhc3N3b3JkIFNldHRpbmdzEhlHZXQgUGFzc3dvcmQgQWdlIFNldHRpbmdzGvMBUmV0dXJucyB0aGUgcGFzc3dvcmQgYWdlIHNldHRpbmdzIGNvbmZpZ3VyZWQgb24gdGhlIGluc3RhbmNlLiBJdCBhZmZlY3RzIGFsbCBvcmdhbml6YXRpb25zLCB0aGF0IGRvIG5vdCBoYXZlIGEgY3VzdG9tIHNldHRpbmcgY29uZmlndXJlZC4gVGhlIHNldHRpbmdzIHNwZWNpZnkgdGhlIGV4cGlyeSBvZiBwYXNzd29yZCwgYWZ0ZXIgd2hpY2ggYSB1c2VyIGlzIGZvcmNlZCB0byBjaGFuZ2UgaXQgb24gdGhlIG5leHQgbG9naW4uSiQKAzIwMBIdChtkZWZhdWx0IHBhc3N3b3JkIGFnZSBwb2xpY3mCtRgRCg9pYW0ucG9saWN5LnJlYWSC0+STAhgSFi9wb2xpY2llcy9wYXNzd29yZC9hZ2US4gQKF1VwZGF0ZVBhc3N3b3JkQWdlUG9saWN5EjAueml0YWRlbC5hZG1pbi52MS5VcGRhdGVQYXNzd29yZEFnZVBvbGljeVJlcXVlc3QaMS56aXRhZGVsLmFkbWluLnYxLlVwZGF0ZVBhc3N3b3JkQWdlUG9saWN5UmVzcG9uc2Ui4QOSQaYDCghTZXR0aW5ncwoRUGFzc3dvcmQgU2V0dGluZ3MSHFVwZGF0ZSBQYXNzd29yZCBBZ2UgU2V0dGluZ3MaggJVcGRhdGVzIHRoZSBkZWZhdWx0IHBhc3N3b3JkIGNvbXBsZXhpdHkgc2V0dGluZ3MgY29uZmlndXJlZCBvbiB0aGUgaW5zdGFuY2UuIEl0IGFmZmVjdHMgYWxsIG9yZ2FuaXphdGlvbnMsIHRoYXQgZG8gbm90IGhhdmUgYSBjdXN0b20gc2V0dGluZyBjb25maWd1cmVkLiBUaGUgc2V0dGluZ3Mgc3BlY2lmeSB0aGUgZXhwaXJ5IG9mIHBhc3N3b3JkLCBhZnRlciB3aGljaCBhIHVzZXIgaXMgZm9yY2VkIHRvIGNoYW5nZSBpdCBvbiB0aGUgbmV4dCBsb2dpbi5KLAoDMjAwEiUKI2RlZmF1bHQgcGFzc3dvcmQgYWdlIHBvbGljeSB1cGRhdGVkSjYKAzQwMBIvChBpbnZhbGlkIGFyZ3VtZW50EhsKGRoXIy9kZWZpbml0aW9ucy9ycGNTdGF0dXOCtRgSChBpYW0ucG9saWN5LndyaXRlgtPkkwIbOgEqGhYvcG9saWNpZXMvcGFzc3dvcmQvYWdlEpoEChBHZXRMb2Nrb3V0UG9saWN5Eikueml0YWRlbC5hZG1pbi52MS5HZXRMb2Nrb3V0UG9saWN5UmVxdWVzdBoqLnppdGFkZWwuYWRtaW4udjEuR2V0TG9ja291dFBvbGljeVJlc3BvbnNlIq4DkkH8AgoIU2V0dGluZ3MKEVBhc3N3b3JkIFNldHRpbmdzEh1HZXQgUGFzc3dvcmQgTG9ja291dCBTZXR0aW5ncxqcAlJldHVybnMgdGhlIHBhc3N3b3JkIGxvY2tvdXQgc2V0dGluZ3MgY29uZmlndXJlZCBvbiB0aGUgaW5zdGFuY2UuIEl0IGFmZmVjdHMgYWxsIG9yZ2FuaXphdGlvbnMsIHRoYXQgZG8gbm90IGhhdmUgYSBjdXN0b20gc2V0dGluZyBjb25maWd1cmVkLiBUaGUgc2V0dGluZ3Mgc3BlY2lmeSB3aGVuIGEgdXNlciBzaG91bGQgYmUgbG9ja2VkIChlLmcgaG93IG1hbnkgcGFzc3dvcmQgYXR0ZW1wdHMpLiBUaGUgdXNlciBoYXMgdG8gYmUgdW5sb2NrZWQgYnkgYW4gYWRtaW5pc3RyYXRvciBhZnRlcndhcmQuSh8KAzIwMBIYChZkZWZhdWx0IGxvY2tvdXQgcG9saWN5grUYEQoPaWFtLnBvbGljeS5yZWFkgtPkkwITEhEvcG9saWNpZXMvbG9ja291dBKRBAoTVXBkYXRlTG9ja291dFBvbGljeRIsLnppdGFkZWwuYWRtaW4udjEuVXBkYXRlTG9ja291dFBvbGljeVJlcXVlc3QaLS56aXRhZGVsLmFkbWluLnYxLlVwZGF0ZUxvY2tvdXRQb2xpY3lSZXNwb25zZSKcA5JB3QIKCFNldHRpbmdzChFQYXNzd29yZCBTZXR0aW5ncxIgVXBkYXRlIFBhc3N3b3JkIExvY2tvdXQgU2V0dGluZ3MamwJVcGRhdGUgdGhlIHBhc3N3b3JkIGxvY2tvdXQgc2V0dGluZ3MgY29uZmlndXJlZCBvbiB0aGUgaW5zdGFuY2UuIEl0IGFmZmVjdHMgYWxsIG9yZ2FuaXphdGlvbnMsIHRoYXQgZG8gbm90IGhhdmUgYSBjdXN0b20gc2V0dGluZyBjb25maWd1cmVkLiBUaGUgc2V0dGluZ3Mgc3BlY2lmeSB3aGVuIGEgdXNlciBzaG91bGQgYmUgbG9ja2VkIChlLmcgaG93IG1hbnkgcGFzc3dvcmQgYXR0ZW1wdHMpLiBUaGUgdXNlciBoYXMgdG8gYmUgdW5sb2NrZWQgYnkgYW4gYWRtaW5pc3RyYXRvciBhZnRlcndhcmQugrUYEgoQaWFtLnBvbGljeS53cml0ZYLT5JMCHzoBKhoaL3BvbGljaWVzL3Bhc3N3b3JkL2xvY2tvdXQS9AMKEEdldFByaXZhY3lQb2xpY3kSKS56aXRhZGVsLmFkbWluLnYxLkdldFByaXZhY3lQb2xpY3lSZXF1ZXN0Gioueml0YWRlbC5hZG1pbi52MS5HZXRQcml2YWN5UG9saWN5UmVzcG9uc2UiiAOSQdYCCghTZXR0aW5ncwoQUHJpdmFjeSBTZXR0aW5ncxIUR2V0IFByaXZhY3kgU2V0dGluZ3MagAJSZXR1cm5zIHRoZSBwcml2YWN5IHNldHRpbmdzIGNvbmZpZ3VyZWQgb24gdGhlIGluc3RhbmNlLiBJdCBhZmZlY3RzIGFsbCBvcmdhbml6YXRpb25zLCB0aGF0IGRvIG5vdCBoYXZlIGEgY3VzdG9tIHNldHRpbmcgY29uZmlndXJlZC4gVGhlIHNldHRpbmdzIHNwZWNpZnkgdGhlIHRlcm1zIGFuZCBzZXJ2aWNlcywgcHJpdmFjeSBwb2xpY3ksIGV0Yy4gQSByZWdpc3RlcmluZyB1c2VyIGhhcyB0byBhY2NlcHQgdGhlIGNvbmZpZ3VyZWQgc2V0dGluZ3MuSh8KAzIwMBIYChZkZWZhdWx0IHByaXZhY3kgcG9saWN5grUYEQoPaWFtLnBvbGljeS5yZWFkgtPkkwITEhEvcG9saWNpZXMvcHJpdmFjeRKQBQoTVXBkYXRlUHJpdmFjeVBvbGljeRIsLnppdGFkZWwuYWRtaW4udjEuVXBkYXRlUHJpdmFjeVBvbGljeVJlcXVlc3QaLS56aXRhZGVsLmFkbWluLnYxLlVwZGF0ZVByaXZhY3lQb2xpY3lSZXNwb25zZSKbBJJB5QMKCFNldHRpbmdzChBQcml2YWN5IFNldHRpbmdzEhdVcGRhdGUgUHJpdmFjeSBTZXR0aW5ncxrMAlVwZGF0ZSB0aGUgcHJpdmFjeSBzZXR0aW5ncyBjb25maWd1cmVkIG9uIHRoZSBpbnN0YW5jZS4gSXQgYWZmZWN0cyBhbGwgb3JnYW5pemF0aW9ucywgdGhhdCBkbyBub3QgaGF2ZSBhIGN1c3RvbSBzZXR0aW5nIGNvbmZpZ3VyZWQuIFRoZSBzZXR0aW5ncyBzcGVjaWZ5IHRoZSB0ZXJtcyBhbmQgc2VydmljZXMsIHByaXZhY3kgcG9saWN5LCBldGMuIEEgcmVnaXN0ZXJpbmcgdXNlciBoYXMgdG8gYWNjZXB0IHRoZSBjb25maWd1cmVkIHNldHRpbmdzLiBWYXJpYWJsZSB7ey5MYW5nfX0gY2FuIGJlIHNldCB0byBoYXZlIGRpZmZlcmVudCBsaW5rcyBiYXNlZCBvbiB0aGUgbGFuZ3VhZ2UuSicKAzIwMBIgCh5kZWZhdWx0IHByaXZhY3kgcG9saWN5IHVwZGF0ZWRKNgoDNDAwEi8KEGludmFsaWQgYXJndW1lbnQSGwoZGhcjL2RlZmluaXRpb25zL3JwY1N0YXR1c4K1GBIKEGlhbS5wb2xpY3kud3JpdGWC0+STAhY6ASoaES9wb2xpY2llcy9wcml2YWN5Eo8EChVBZGROb3RpZmljYXRpb25Qb2xpY3kSLi56aXRhZGVsLmFkbWluLnYxLkFkZE5vdGlmaWNhdGlvblBvbGljeVJlcXVlc3QaLy56aXRhZGVsLmFkbWluLnYxLkFkZE5vdGlmaWNhdGlvblBvbGljeVJlc3BvbnNlIpQDkkHZAgoIU2V0dGluZ3MKFU5vdGlmaWNhdGlvbiBTZXR0aW5ncxIZQWRkIE5vdGlmaWNhdGlvbiBTZXR0aW5ncxr0AUFkZCBuZXcgbm90aWZpY2F0aW9uIHNldHRpbmdzIGNvbmZpZ3VyZWQgb24gdGhlIGluc3RhbmNlLiBJdCBhZmZlY3RzIGFsbCBvcmdhbml6YXRpb25zLCB0aGF0IGRvIG5vdCBoYXZlIGEgY3VzdG9tIHNldHRpbmcgY29uZmlndXJlZC4gVGhlIHNldHRpbmdzIHNwZWNpZnkgaWYgbm90aWZpY2F0aW9ucyBzaG91bGQgYmUgc2VudCB0byB0aGUgdXNlcnMgb24gc3BlY2lmaWMgdHJpZ2dlcnMgKGUuZyBwYXNzd29yZCBjaGFuZ2VkKS5KJAoDMjAwEh0KG2RlZmF1bHQgbm90aWZpY2F0aW9uIHBvbGljeYK1GBIKEGlhbS5wb2xpY3kud3JpdGWC0+STAhs6ASoiFi9wb2xpY2llcy9ub3RpZmljYXRpb24SkQQKFUdldE5vdGlmaWNhdGlvblBvbGljeRIuLnppdGFkZWwuYWRtaW4udjEuR2V0Tm90aWZpY2F0aW9uUG9saWN5UmVxdWVzdBovLnppdGFkZWwuYWRtaW4udjEuR2V0Tm90aWZpY2F0aW9uUG9saWN5UmVzcG9uc2UilgOSQd8CCghTZXR0aW5ncwoVTm90aWZpY2F0aW9uIFNldHRpbmdzEhxSZXR1cm4gTm90aWZpY2F0aW9uIFNldHRpbmdzGvcBUmV0dXJuIHRoZSBub3RpZmljYXRpb24gc2V0dGluZ3MgY29uZmlndXJlZCBvbiB0aGUgaW5zdGFuY2UuIEl0IGFmZmVjdHMgYWxsIG9yZ2FuaXphdGlvbnMsIHRoYXQgZG8gbm90IGhhdmUgYSBjdXN0b20gc2V0dGluZyBjb25maWd1cmVkLiBUaGUgc2V0dGluZ3Mgc3BlY2lmeSBpZiBub3RpZmljYXRpb25zIHNob3VsZCBiZSBzZW50IHRvIHRoZSB1c2VycyBvbiBzcGVjaWZpYyB0cmlnZ2VycyAoZS5nIHBhc3N3b3JkIGNoYW5nZWQpLkokCgMyMDASHQobZGVmYXVsdCBub3RpZmljYXRpb24gcG9saWN5grUYEQoPaWFtLnBvbGljeS5yZWFkgtPkkwIYEhYvcG9saWNpZXMvbm90aWZpY2F0aW9uEt4EChhVcGRhdGVOb3RpZmljYXRpb25Qb2xpY3kSMS56aXRhZGVsLmFkbWluLnYxLlVwZGF0ZU5vdGlmaWNhdGlvblBvbGljeVJlcXVlc3QaMi56aXRhZGVsLmFkbWluLnYxLlVwZGF0ZU5vdGlmaWNhdGlvblBvbGljeVJlc3BvbnNlItoDkkGfAwoIU2V0dGluZ3MKFU5vdGlmaWNhdGlvbiBTZXR0aW5ncxIcVXBkYXRlIE5vdGlmaWNhdGlvbiBTZXR0aW5ncxr3AVVwZGF0ZSB0aGUgbm90aWZpY2F0aW9uIHNldHRpbmdzIGNvbmZpZ3VyZWQgb24gdGhlIGluc3RhbmNlLiBJdCBhZmZlY3RzIGFsbCBvcmdhbml6YXRpb25zLCB0aGF0IGRvIG5vdCBoYXZlIGEgY3VzdG9tIHNldHRpbmcgY29uZmlndXJlZC4gVGhlIHNldHRpbmdzIHNwZWNpZnkgaWYgbm90aWZpY2F0aW9ucyBzaG91bGQgYmUgc2VudCB0byB0aGUgdXNlcnMgb24gc3BlY2lmaWMgdHJpZ2dlcnMgKGUuZyBwYXNzd29yZCBjaGFuZ2VkKS5KLAoDMjAwEiUKI2RlZmF1bHQgbm90aWZpY2F0aW9uIHBvbGljeSB1cGRhdGVkSjYKAzQwMBIvChBpbnZhbGlkIGFyZ3VtZW50EhsKGRoXIy9kZWZpbml0aW9ucy9ycGNTdGF0dXOCtRgSChBpYW0ucG9saWN5LndyaXRlgtPkkwIbOgEqGhYvcG9saWNpZXMvbm90aWZpY2F0aW9uErcEChlHZXREZWZhdWx0SW5pdE1lc3NhZ2VUZXh0EjIueml0YWRlbC5hZG1pbi52MS5HZXREZWZhdWx0SW5pdE1lc3NhZ2VUZXh0UmVxdWVzdBozLnppdGFkZWwuYWRtaW4udjEuR2V0RGVmYXVsdEluaXRNZXNzYWdlVGV4dFJlc3BvbnNlIrADkkHqAgoNTWVzc2FnZSBUZXh0cxIdR2V0IERlZmF1bHQgSW5pdCBNZXNzYWdlIFRleHQauQJHZXQgdGhlIGRlZmF1bHQgdGV4dCBvZiB0aGUgaW5pdGlhbGl6ZS11c2VyIG1lc3NhZ2UvZW1haWwgdGhhdCBpcyBzdG9yZWQgYXMgdHJhbnNsYXRpb24gZmlsZXMgaW4gWklUQURFTCBpdHNlbGYuIFRoZSB0ZXh0IHdpbGwgYmUgc2VudCB0byB0aGUgdXNlcnMgb2YgYWxsIG9yZ2FuaXphdGlvbnMsIHRoYXQgZG8gbm90IGhhdmUgYSBjdXN0b20gdGV4dCBjb25maWd1cmVkLiBUaGUgZW1haWwgaXMgc2VudCB3aGVuIGEgdXNlciBpcyBjcmVhdGVkIGFuZCBoYXMgZWl0aGVyIG5vIHBhc3N3b3JkIG9yIGEgbm9uLXZlcmlmaWVkIGVtYWlsIGFkZHJlc3MugrUYEQoPaWFtLnBvbGljeS5yZWFkgtPkkwInEiUvdGV4dC9kZWZhdWx0L21lc3NhZ2UvaW5pdC97bGFuZ3VhZ2V9Eq0EChhHZXRDdXN0b21Jbml0TWVzc2FnZVRleHQSMS56aXRhZGVsLmFkbWluLnYxLkdldEN1c3RvbUluaXRNZXNzYWdlVGV4dFJlcXVlc3QaMi56aXRhZGVsLmFkbWluLnYxLkdldEN1c3RvbUluaXRNZXNzYWdlVGV4dFJlc3BvbnNlIqkDkkHrAgoNTWVzc2FnZSBUZXh0cxIcR2V0IEN1c3RvbSBJbml0IE1lc3NhZ2UgVGV4dBq7AkdldCB0aGUgY3VzdG9tIHRleHQgb2YgdGhlIGluaXRpYWxpemUtdXNlciBtZXNzYWdlL2VtYWlsIHRoYXQgaXMgb3ZlcndyaXR0ZW4gb24gdGhlIGluc3RhbmNlIGFzIHNldHRpbmdzL2RhdGFiYXNlLiBUaGUgdGV4dCB3aWxsIGJlIHNlbnQgdG8gdGhlIHVzZXJzIG9mIGFsbCBvcmdhbml6YXRpb25zLCB0aGF0IGRvIG5vdCBoYXZlIGEgY3VzdG9tIHRleHQgY29uZmlndXJlZC4gVGhlIGVtYWlsIGlzIHNlbnQgd2hlbiBhIHVzZXIgaXMgY3JlYXRlZCBhbmQgaGFzIGVpdGhlciBubyBwYXNzd29yZCBvciBhIG5vbi12ZXJpZmllZCBlbWFpbCBhZGRyZXNzLoK1GBEKD2lhbS5wb2xpY3kucmVhZILT5JMCHxIdL3RleHQvbWVzc2FnZS9pbml0L3tsYW5ndWFnZX0SwwYKGVNldERlZmF1bHRJbml0TWVzc2FnZVRleHQSMi56aXRhZGVsLmFkbWluLnYxLlNldERlZmF1bHRJbml0TWVzc2FnZVRleHRSZXF1ZXN0GjMueml0YWRlbC5hZG1pbi52MS5TZXREZWZhdWx0SW5pdE1lc3NhZ2VUZXh0UmVzcG9uc2UivAWSQfoECg1NZXNzYWdlIFRleHRzEiRTZXQgRGVmYXVsdCBDdXN0b20gSW5pdCBNZXNzYWdlIFRleHQawgRTZXQgdGhlIGN1c3RvbSB0ZXh0IG9mIHRoZSBpbml0aWFsaXplLXVzZXIgbWVzc2FnZS9lbWFpbCB0aGF0IGlzIG92ZXJ3cml0dGVuIG9uIHRoZSBpbnN0YW5jZSBhcyBzZXR0aW5ncy9kYXRhYmFzZS4gVGhlIHRleHQgd2lsbCBiZSBzZW50IHRvIHRoZSB1c2VycyBvZiBhbGwgb3JnYW5pemF0aW9ucywgdGhhdCBkbyBub3QgaGF2ZSBhIGN1c3RvbSB0ZXh0IGNvbmZpZ3VyZWQuIFRoZSBlbWFpbCBpcyBzZW50IHdoZW4gYSB1c2VyIGlzIGNyZWF0ZWQgYW5kIGhhcyBlaXRoZXIgbm8gcGFzc3dvcmQgb3IgYSBub24tdmVyaWZpZWQgZW1haWwgYWRkcmVzcy4gVGhlIEZvbGxvd2luZyBWYXJpYWJsZXMgY2FuIGJlIHVzZWQ6IHt7LkNvZGV9fSB7ey5Vc2VyTmFtZX19IHt7LkZpcnN0TmFtZX19IHt7Lkxhc3ROYW1lfX0ge3suTmlja05hbWV9fSB7ey5EaXNwbGF5TmFtZX19IHt7Lkxhc3RFbWFpbH19IHt7LlZlcmlmaWVkRW1haWx9fSB7ey5MYXN0UGhvbmV9fSB7ey5WZXJpZmllZFBob25lfX0ge3suUHJlZmVycmVkTG9naW5OYW1lfX0ge3suTG9naW5OYW1lc319IHt7LkNoYW5nZURhdGV9fSB7ey5DcmVhdGlvbkRhdGV9fYK1GBIKEGlhbS5wb2xpY3kud3JpdGWC0+STAiI6ASoaHS90ZXh0L21lc3NhZ2UvaW5pdC97bGFuZ3VhZ2V9ErEECiNSZXNldEN1c3RvbUluaXRNZXNzYWdlVGV4dFRvRGVmYXVsdBI8LnppdGFkZWwuYWRtaW4udjEuUmVzZXRDdXN0b21Jbml0TWVzc2FnZVRleHRUb0RlZmF1bHRSZXF1ZXN0Gj0ueml0YWRlbC5hZG1pbi52MS5SZXNldEN1c3RvbUluaXRNZXNzYWdlVGV4dFRvRGVmYXVsdFJlc3BvbnNlIowDkkHMAgoNTWVzc2FnZSBUZXh0cxIpUmVzZXQgQ3VzdG9tIEluaXQgTWVzc2FnZSBUZXh0IHRvIERlZmF1bHQajwJSZW1vdmVzIHRoZSBjdXN0b20gdGV4dCBvZiB0aGUgaW5pdGlhbGl6ZS11c2VyIG1lc3NhZ2UvZW1haWwgdGhhdCBpcyBvdmVyd3JpdHRlbiBvbiB0aGUgaW5zdGFuY2UgYW5kIHRyaWdnZXJzIHRoZSB0ZXh0IGZyb20gdGhlIHRyYW5zbGF0aW9uIGZpbGVzIHN0b3JlZCBpbiBaSVRBREVMIGl0c2VsZi4gVGhlIHRleHQgd2lsbCBiZSBzZW50IHRvIHRoZSB1c2VycyBvZiBhbGwgb3JnYW5pemF0aW9ucywgdGhhdCBkbyBub3QgaGF2ZSBhIGN1c3RvbSB0ZXh0IGNvbmZpZ3VyZWQugrUYEwoRaWFtLnBvbGljeS5kZWxldGWC0+STAh8qHS90ZXh0L21lc3NhZ2UvaW5pdC97bGFuZ3VhZ2V9EsMECiJHZXREZWZhdWx0UGFzc3dvcmRSZXNldE1lc3NhZ2VUZXh0Ejsueml0YWRlbC5hZG1pbi52MS5HZXREZWZhdWx0UGFzc3dvcmRSZXNldE1lc3NhZ2VUZXh0UmVxdWVzdBo8LnppdGFkZWwuYWRtaW4udjEuR2V0RGVmYXVsdFBhc3N3b3JkUmVzZXRNZXNzYWdlVGV4dFJlc3BvbnNlIqEDkkHSAgoNTWVzc2FnZSBUZXh0cxInR2V0IERlZmF1bHQgUGFzc3dvcmQgUmVzZXQgTWVzc2FnZSBUZXh0GpcCR2V0IHRoZSBkZWZhdWx0IHRleHQgb2YgdGhlIHBhc3N3b3JkIHJlc2V0IG1lc3NhZ2UvZW1haWwgdGhhdCBpcyBzdG9yZWQgYXMgdHJhbnNsYXRpb24gZmlsZXMgaW4gWklUQURFTCBpdHNlbGYuIFRoZSB0ZXh0IHdpbGwgYmUgc2VudCB0byB0aGUgdXNlcnMgb2YgYWxsIG9yZ2FuaXphdGlvbnMsIHRoYXQgZG8gbm90IGhhdmUgYSBjdXN0b20gdGV4dCBjb25maWd1cmVkLiBUaGUgZW1haWwgaXMgc2VudCB3aGVuIGEgdXNlciB0cmlnZ2VycyB0aGUgcGFzc3dvcmQgZm9yZ290LXJlcXVlc3QugrUYEQoPaWFtLnBvbGljeS5yZWFkgtPkkwIwEi4vdGV4dC9kZWFmdWx0L21lc3NhZ2UvcGFzc3dvcmRyZXNldC97bGFuZ3VhZ2V9ErkECiFHZXRDdXN0b21QYXNzd29yZFJlc2V0TWVzc2FnZVRleHQSOi56aXRhZGVsLmFkbWluLnYxLkdldEN1c3RvbVBhc3N3b3JkUmVzZXRNZXNzYWdlVGV4dFJlcXVlc3QaOy56aXRhZGVsLmFkbWluLnYxLkdldEN1c3RvbVBhc3N3b3JkUmVzZXRNZXNzYWdlVGV4dFJlc3BvbnNlIpoDkkHTAgoNTWVzc2FnZSBUZXh0cxImR2V0IEN1c3RvbSBQYXNzd29yZCBSZXNldCBNZXNzYWdlIFRleHQamQJHZXQgdGhlIGN1c3RvbSB0ZXh0IG9mIHRoZSBwYXNzd29yZCByZXNldCBtZXNzYWdlL2VtYWlsIHRoYXQgaXMgb3ZlcndyaXR0ZW4gb24gdGhlIGluc3RhbmNlIGFzIHNldHRpbmdzL2RhdGFiYXNlLiBUaGUgdGV4dCB3aWxsIGJlIHNlbnQgdG8gdGhlIHVzZXJzIG9mIGFsbCBvcmdhbml6YXRpb25zLCB0aGF0IGRvIG5vdCBoYXZlIGEgY3VzdG9tIHRleHQgY29uZmlndXJlZC4gVGhlIGVtYWlsIGlzIHNlbnQgd2hlbiBhIHVzZXIgdHJpZ2dlcnMgdGhlIHBhc3N3b3JkIGZvcmdvdC1yZXF1ZXN0LoK1GBEKD2lhbS5wb2xpY3kucmVhZILT5JMCKBImL3RleHQvbWVzc2FnZS9wYXNzd29yZHJlc2V0L3tsYW5ndWFnZX0S1AYKIlNldERlZmF1bHRQYXNzd29yZFJlc2V0TWVzc2FnZVRleHQSOy56aXRhZGVsLmFkbWluLnYxLlNldERlZmF1bHRQYXNzd29yZFJlc2V0TWVzc2FnZVRleHRSZXF1ZXN0Gjwueml0YWRlbC5hZG1pbi52MS5TZXREZWZhdWx0UGFzc3dvcmRSZXNldE1lc3NhZ2VUZXh0UmVzcG9uc2UisgWSQecECg1NZXNzYWdlIFRleHRzEi5TZXQgRGVmYXVsdCBDdXN0b20gUGFzc3dvcmQgUmVzZXQgTWVzc2FnZSBUZXh0GqUEU2V0IHRoZSBjdXN0b20gdGV4dCBvZiB0aGUgcGFzc3dvcmQgcmVzZXQgdXNlciBtZXNzYWdlL2VtYWlsIHRoYXQgaXMgb3ZlcndyaXR0ZW4gb24gdGhlIGluc3RhbmNlIGFzIHNldHRpbmdzL2RhdGFiYXNlLiBUaGUgdGV4dCB3aWxsIGJlIHNlbnQgdG8gdGhlIHVzZXJzIG9mIGFsbCBvcmdhbml6YXRpb25zLCB0aGF0IGRvIG5vdCBoYXZlIGEgY3VzdG9tIHRleHQgY29uZmlndXJlZC4gVGhlIGVtYWlsIGlzIHNlbnQgd2hlbiBhIHVzZXIgdHJpZ2dlcnMgdGhlIHBhc3N3b3JkIGZvcmdvdC1yZXF1ZXN0LiBUaGUgRm9sbG93aW5nIFZhcmlhYmxlcyBjYW4gYmUgdXNlZDoge3suQ29kZX19IHt7LlVzZXJOYW1lfX0ge3suRmlyc3ROYW1lfX0ge3suTGFzdE5hbWV9fSB7ey5OaWNrTmFtZX19IHt7LkRpc3BsYXlOYW1lfX0ge3suTGFzdEVtYWlsfX0ge3suVmVyaWZpZWRFbWFpbH19IHt7Lkxhc3RQaG9uZX19IHt7LlZlcmlmaWVkUGhvbmV9fSB7ey5QcmVmZXJyZWRMb2dpbk5hbWV9fSB7ey5Mb2dpbk5hbWVzfX0ge3suQ2hhbmdlRGF0ZX19IHt7LkNyZWF0aW9uRGF0ZX19grUYEgoQaWFtLnBvbGljeS53cml0ZYLT5JMCKzoBKhomL3RleHQvbWVzc2FnZS9wYXNzd29yZHJlc2V0L3tsYW5ndWFnZX0S4wQKLFJlc2V0Q3VzdG9tUGFzc3dvcmRSZXNldE1lc3NhZ2VUZXh0VG9EZWZhdWx0EkUueml0YWRlbC5hZG1pbi52MS5SZXNldEN1c3RvbVBhc3N3b3JkUmVzZXRNZXNzYWdlVGV4dFRvRGVmYXVsdFJlcXVlc3QaRi56aXRhZGVsLmFkbWluLnYxLlJlc2V0Q3VzdG9tUGFzc3dvcmRSZXNldE1lc3NhZ2VUZXh0VG9EZWZhdWx0UmVzcG9uc2UiowOSQdoCCg1NZXNzYWdlIFRleHRzEjNSZXNldCBDdXN0b20gUGFzc3dvcmQgUmVzZXQgTWVzc2FnZSBUZXh0IHRvIERlZmF1bHQakwJSZW1vdmVzIHRoZSBjdXN0b20gdGV4dCBvZiB0aGUgcGFzc3dvcmQgcmVzZXQgdXNlciBtZXNzYWdlL2VtYWlsIHRoYXQgaXMgb3ZlcndyaXR0ZW4gb24gdGhlIGluc3RhbmNlIGFuZCB0cmlnZ2VycyB0aGUgdGV4dCBmcm9tIHRoZSB0cmFuc2xhdGlvbiBmaWxlcyBzdG9yZWQgaW4gWklUQURFTCBpdHNlbGYuIFRoZSB0ZXh0IHdpbGwgYmUgc2VudCB0byB0aGUgdXNlcnMgb2YgYWxsIG9yZ2FuaXphdGlvbnMsIHRoYXQgZG8gbm90IGhhdmUgYSBjdXN0b20gdGV4dCBjb25maWd1cmVkLoK1GBMKEWlhbS5wb2xpY3kuZGVsZXRlgtPkkwIoKiYvdGV4dC9tZXNzYWdlL3Bhc3N3b3JkcmVzZXQve2xhbmd1YWdlfRK4BAogR2V0RGVmYXVsdFZlcmlmeUVtYWlsTWVzc2FnZVRleHQSOS56aXRhZGVsLmFkbWluLnYxLkdldERlZmF1bHRWZXJpZnlFbWFpbE1lc3NhZ2VUZXh0UmVxdWVzdBo6LnppdGFkZWwuYWRtaW4udjEuR2V0RGVmYXVsdFZlcmlmeUVtYWlsTWVzc2FnZVRleHRSZXNwb25zZSKcA5JBzwIKDU1lc3NhZ2UgVGV4dHMSJUdldCBEZWZhdWx0IFZlcmlmeSBFbWFpbCBNZXNzYWdlIFRleHQalgJHZXQgdGhlIGRlZmF1bHQgdGV4dCBvZiB0aGUgdmVyaWZ5LWVtYWlsIG1lc3NhZ2UvZW1haWwgdGhhdCBpcyBzdG9yZWQgYXMgdHJhbnNsYXRpb24gZmlsZXMgaW4gWklUQURFTCBpdHNlbGYuIFRoZSB0ZXh0IHdpbGwgYmUgc2VudCB0byB0aGUgdXNlcnMgb2YgYWxsIG9yZ2FuaXphdGlvbnMsIHRoYXQgZG8gbm90IGhhdmUgYSBjdXN0b20gdGV4dCBjb25maWd1cmVkLiBUaGUgZW1haWwgaXMgc2VudCB3aGVuIGEgdXNlciBhZGRzIGEgbmV3IG5vbi12ZXJpZmllZCBlbWFpbCBhZGRyZXNzLoK1GBEKD2lhbS5wb2xpY3kucmVhZILT5JMCLhIsL3RleHQvZGVmYXVsdC9tZXNzYWdlL3ZlcmlmeWVtYWlsL3tsYW5ndWFnZX0SrgQKH0dldEN1c3RvbVZlcmlmeUVtYWlsTWVzc2FnZVRleHQSOC56aXRhZGVsLmFkbWluLnYxLkdldEN1c3RvbVZlcmlmeUVtYWlsTWVzc2FnZVRleHRSZXF1ZXN0Gjkueml0YWRlbC5hZG1pbi52MS5HZXRDdXN0b21WZXJpZnlFbWFpbE1lc3NhZ2VUZXh0UmVzcG9uc2UilQOSQdACCg1NZXNzYWdlIFRleHRzEiRHZXQgQ3VzdG9tIFZlcmlmeSBFbWFpbCBNZXNzYWdlIFRleHQamAJHZXQgdGhlIGN1c3RvbSB0ZXh0IG9mIHRoZSB2ZXJpZnktZW1haWwgbWVzc2FnZS9lbWFpbCB0aGF0IGlzIG92ZXJ3cml0dGVuIG9uIHRoZSBpbnN0YW5jZSBhcyBzZXR0aW5ncy9kYXRhYmFzZS4gVGhlIHRleHQgd2lsbCBiZSBzZW50IHRvIHRoZSB1c2VycyBvZiBhbGwgb3JnYW5pemF0aW9ucywgdGhhdCBkbyBub3QgaGF2ZSBhIGN1c3RvbSB0ZXh0IGNvbmZpZ3VyZWQuIFRoZSBlbWFpbCBpcyBzZW50IHdoZW4gYSB1c2VyIGFkZHMgYSBuZXcgbm9uLXZlcmlmaWVkIGVtYWlsIGFkZHJlc3MugrUYEQoPaWFtLnBvbGljeS5yZWFkgtPkkwImEiQvdGV4dC9tZXNzYWdlL3ZlcmlmeWVtYWlsL3tsYW5ndWFnZX0SwQYKIFNldERlZmF1bHRWZXJpZnlFbWFpbE1lc3NhZ2VUZXh0Ejkueml0YWRlbC5hZG1pbi52MS5TZXREZWZhdWx0VmVyaWZ5RW1haWxNZXNzYWdlVGV4dFJlcXVlc3QaOi56aXRhZGVsLmFkbWluLnYxLlNldERlZmF1bHRWZXJpZnlFbWFpbE1lc3NhZ2VUZXh0UmVzcG9uc2UipQWSQdwECg1NZXNzYWdlIFRleHRzEiVTZXQgRGVmYXVsdCBWZXJpZnkgRW1haWwgTWVzc2FnZSBUZXh0GqMEU2V0IHRoZSBjdXN0b20gdGV4dCBvZiB0aGUgdmVyaWZ5IGVtYWlsIHVzZXIgbWVzc2FnZS9lbWFpbCB0aGF0IGlzIG92ZXJ3cml0dGVuIG9uIHRoZSBpbnN0YW5jZSBhcyBzZXR0aW5ncy9kYXRhYmFzZS4gVGhlIHRleHQgd2lsbCBiZSBzZW50IHRvIHRoZSB1c2VycyBvZiBhbGwgb3JnYW5pemF0aW9ucywgdGhhdCBkbyBub3QgaGF2ZSBhIGN1c3RvbSB0ZXh0IGNvbmZpZ3VyZWQuIFRoZSBlbWFpbCBpcyBzZW50IHdoZW4gYSB1c2VyIGFkZHMgYSBuZXcgbm9udmVyaWZpZWQgZW1haWwgYWRkcmVzcy4gVGhlIEZvbGxvd2luZyBWYXJpYWJsZXMgY2FuIGJlIHVzZWQ6IHt7LkNvZGV9fSB7ey5Vc2VyTmFtZX19IHt7LkZpcnN0TmFtZX19IHt7Lkxhc3ROYW1lfX0ge3suTmlja05hbWV9fSB7ey5EaXNwbGF5TmFtZX19IHt7Lkxhc3RFbWFpbH19IHt7LlZlcmlmaWVkRW1haWx9fSB7ey5MYXN0UGhvbmV9fSB7ey5WZXJpZmllZFBob25lfX0ge3suUHJlZmVycmVkTG9naW5OYW1lfX0ge3suTG9naW5OYW1lc319IHt7LkNoYW5nZURhdGV9fSB7ey5DcmVhdGlvbkRhdGV9fYK1GBIKEGlhbS5wb2xpY3kud3JpdGWC0+STAik6ASoaJC90ZXh0L21lc3NhZ2UvdmVyaWZ5ZW1haWwve2xhbmd1YWdlfRLSBAoqUmVzZXRDdXN0b21WZXJpZnlFbWFpbE1lc3NhZ2VUZXh0VG9EZWZhdWx0EkMueml0YWRlbC5hZG1pbi52MS5SZXNldEN1c3RvbVZlcmlmeUVtYWlsTWVzc2FnZVRleHRUb0RlZmF1bHRSZXF1ZXN0GkQueml0YWRlbC5hZG1pbi52MS5SZXNldEN1c3RvbVZlcmlmeUVtYWlsTWVzc2FnZVRleHRUb0RlZmF1bHRSZXNwb25zZSKYA5JB0QIKDU1lc3NhZ2UgVGV4dHMSMVJlc2V0IEN1c3RvbSBWZXJpZnkgRW1haWwgTWVzc2FnZSBUZXh0IHRvIERlZmF1bHQajAJSZW1vdmVzIHRoZSBjdXN0b20gdGV4dCBvZiB0aGUgZW1haWwgdmVyaWZ5IG1lc3NhZ2UvZW1haWwgdGhhdCBpcyBvdmVyd3JpdHRlbiBvbiB0aGUgaW5zdGFuY2UgYW5kIHRyaWdnZXJzIHRoZSB0ZXh0IGZyb20gdGhlIHRyYW5zbGF0aW9uIGZpbGVzIHN0b3JlZCBpbiBaSVRBREVMIGl0c2VsZi4gVGhlIHRleHQgd2lsbCBiZSBzZW50IHRvIHRoZSB1c2VycyBvZiBhbGwgb3JnYW5pemF0aW9ucywgdGhhdCBkbyBub3QgaGF2ZSBhIGN1c3RvbSB0ZXh0IGNvbmZpZ3VyZWQugrUYEwoRaWFtLnBvbGljeS5kZWxldGWC0+STAiYqJC90ZXh0L21lc3NhZ2UvdmVyaWZ5ZW1haWwve2xhbmd1YWdlfRLdBAogR2V0RGVmYXVsdFZlcmlmeVBob25lTWVzc2FnZVRleHQSOS56aXRhZGVsLmFkbWluLnYxLkdldERlZmF1bHRWZXJpZnlQaG9uZU1lc3NhZ2VUZXh0UmVxdWVzdBo6LnppdGFkZWwuYWRtaW4udjEuR2V0RGVmYXVsdFZlcmlmeVBob25lTWVzc2FnZVRleHRSZXNwb25zZSLBA5JB9AIKDU1lc3NhZ2UgVGV4dHMSJUdldCBEZWZhdWx0IFZlcmlmeSBQaG9uZSBNZXNzYWdlIFRleHQauwJHZXQgdGhlIGRlZmF1bHQgdGV4dCBvZiB0aGUgdmVyaWZ5LXBob25lIG1lc3NhZ2UgdGhhdCBpcyBzdG9yZWQgYXMgdHJhbnNsYXRpb24gZmlsZXMgaW4gWklUQURFTCBpdHNlbGYuIFRoZSB0ZXh0IHdpbGwgYmUgc2VudCB0byB0aGUgdXNlcnMgb2YgYWxsIG9yZ2FuaXphdGlvbnMsIHRoYXQgZG8gbm90IGhhdmUgYSBjdXN0b20gdGV4dCBjb25maWd1cmVkLiBUaGUgbWVzc2FnZSBpcyBzZW50IHdoZW4gYSB1c2VyIGFkZHMgYSBuZXcgbm9uLXZlcmlmaWVkIHBob25lIG51bWJlciBhbmQgYSBub3RpZmljYXRpb24gcHJvdmlkZXIgaXMgY29uZmlndXJlZC6CtRgRCg9pYW0ucG9saWN5LnJlYWSC0+STAi4SLC90ZXh0L2RlZmF1bHQvbWVzc2FnZS92ZXJpZnlwaG9uZS97bGFuZ3VhZ2V9EtMECh9HZXRDdXN0b21WZXJpZnlQaG9uZU1lc3NhZ2VUZXh0Ejgueml0YWRlbC5hZG1pbi52MS5HZXRDdXN0b21WZXJpZnlQaG9uZU1lc3NhZ2VUZXh0UmVxdWVzdBo5LnppdGFkZWwuYWRtaW4udjEuR2V0Q3VzdG9tVmVyaWZ5UGhvbmVNZXNzYWdlVGV4dFJlc3BvbnNlIroDkkH1AgoNTWVzc2FnZSBUZXh0cxIkR2V0IEN1c3RvbSBWZXJpZnkgUGhvbmUgTWVzc2FnZSBUZXh0Gr0CR2V0IHRoZSBjdXN0b20gdGV4dCBvZiB0aGUgdmVyaWZ5LXBob25lIG1lc3NhZ2UgdGhhdCBpcyBvdmVyd3JpdHRlbiBvbiB0aGUgaW5zdGFuY2UgYXMgc2V0dGluZ3MvZGF0YWJhc2UuIFRoZSB0ZXh0IHdpbGwgYmUgc2VudCB0byB0aGUgdXNlcnMgb2YgYWxsIG9yZ2FuaXphdGlvbnMsIHRoYXQgZG8gbm90IGhhdmUgYSBjdXN0b20gdGV4dCBjb25maWd1cmVkLiBUaGUgbWVzc2FnZSBpcyBzZW50IHdoZW4gYSB1c2VyIGFkZHMgYSBuZXcgbm9uLXZlcmlmaWVkIHBob25lIG51bWJlciBhbmQgYSBub3RpZmljYXRpb24gcHJvdmlkZXIgaXMgY29uZmlndXJlZC6CtRgRCg9pYW0ucG9saWN5LnJlYWSC0+STAiYSJC90ZXh0L21lc3NhZ2UvdmVyaWZ5cGhvbmUve2xhbmd1YWdlfRLtBgogU2V0RGVmYXVsdFZlcmlmeVBob25lTWVzc2FnZVRleHQSOS56aXRhZGVsLmFkbWluLnYxLlNldERlZmF1bHRWZXJpZnlQaG9uZU1lc3NhZ2VUZXh0UmVxdWVzdBo6LnppdGFkZWwuYWRtaW4udjEuU2V0RGVmYXVsdFZlcmlmeVBob25lTWVzc2FnZVRleHRSZXNwb25zZSLRBZJBiAUKDU1lc3NhZ2UgVGV4dHMSK1NldCBEZWZhdWx0IFZlcmlmeSBQaG9uZSBSZXNldCBNZXNzYWdlIFRleHQayQRTZXQgdGhlIGN1c3RvbSB0ZXh0IG9mIHRoZSB2ZXJpZnktcGhvbmUgdXNlciBtZXNzYWdlIHRoYXQgaXMgb3ZlcndyaXR0ZW4gb24gdGhlIGluc3RhbmNlIGFzIHNldHRpbmdzL2RhdGFiYXNlLiBUaGUgdGV4dCB3aWxsIGJlIHNlbnQgdG8gdGhlIHVzZXJzIG9mIGFsbCBvcmdhbml6YXRpb25zLCB0aGF0IGRvIG5vdCBoYXZlIGEgY3VzdG9tIHRleHQgY29uZmlndXJlZC4gVGhlIG1lc3NhZ2UgaXMgc2VudCB3aGVuIGEgdXNlciBhZGRzIGEgbmV3IG5vbi12ZXJpZmllZCBwaG9uZSBudW1iZXIgYW5kIGEgbm90aWZpY2F0aW9uIHByb3ZpZGVyIGlzIGNvbmZpZ3VyZWQuIFRoZSBGb2xsb3dpbmcgVmFyaWFibGVzIGNhbiBiZSB1c2VkOiB7ey5Db2RlfX0ge3suVXNlck5hbWV9fSB7ey5GaXJzdE5hbWV9fSB7ey5MYXN0TmFtZX19IHt7Lk5pY2tOYW1lfX0ge3suRGlzcGxheU5hbWV9fSB7ey5MYXN0RW1haWx9fSB7ey5WZXJpZmllZEVtYWlsfX0ge3suTGFzdFBob25lfX0ge3suVmVyaWZpZWRQaG9uZX19IHt7LlByZWZlcnJlZExvZ2luTmFtZX19IHt7LkxvZ2luTmFtZXN9fSB7ey5DaGFuZ2VEYXRlfX0ge3suQ3JlYXRpb25EYXRlfX2CtRgSChBpYW0ucG9saWN5LndyaXRlgtPkkwIpOgEqGiQvdGV4dC9tZXNzYWdlL3ZlcmlmeXBob25lL3tsYW5ndWFnZX0SzAQKKlJlc2V0Q3VzdG9tVmVyaWZ5UGhvbmVNZXNzYWdlVGV4dFRvRGVmYXVsdBJDLnppdGFkZWwuYWRtaW4udjEuUmVzZXRDdXN0b21WZXJpZnlQaG9uZU1lc3NhZ2VUZXh0VG9EZWZhdWx0UmVxdWVzdBpELnppdGFkZWwuYWRtaW4udjEuUmVzZXRDdXN0b21WZXJpZnlQaG9uZU1lc3NhZ2VUZXh0VG9EZWZhdWx0UmVzcG9uc2UikgOSQcsCCg1NZXNzYWdlIFRleHRzEjFSZXNldCBDdXN0b20gVmVyaWZ5IFBob25lIE1lc3NhZ2UgVGV4dCB0byBEZWZhdWx0GoYCUmVtb3ZlcyB0aGUgY3VzdG9tIHRleHQgb2YgdGhlIHZlcmlmeS1waG9uZSBtZXNzYWdlIHRoYXQgaXMgb3ZlcndyaXR0ZW4gb24gdGhlIGluc3RhbmNlIGFuZCB0cmlnZ2VycyB0aGUgdGV4dCBmcm9tIHRoZSB0cmFuc2xhdGlvbiBmaWxlcyBzdG9yZWQgaW4gWklUQURFTCBpdHNlbGYuIFRoZSB0ZXh0IHdpbGwgYmUgc2VudCB0byB0aGUgdXNlcnMgb2YgYWxsIG9yZ2FuaXphdGlvbnMsIHRoYXQgZG8gbm90IGhhdmUgYSBjdXN0b20gdGV4dCBjb25maWd1cmVkLoK1GBMKEWlhbS5wb2xpY3kuZGVsZXRlgtPkkwImKiQvdGV4dC9tZXNzYWdlL3ZlcmlmeXBob25lL3tsYW5ndWFnZX0S5QQKIUdldERlZmF1bHRWZXJpZnlTTVNPVFBNZXNzYWdlVGV4dBI6LnppdGFkZWwuYWRtaW4udjEuR2V0RGVmYXVsdFZlcmlmeVNNU09UUE1lc3NhZ2VUZXh0UmVxdWVzdBo7LnppdGFkZWwuYWRtaW4udjEuR2V0RGVmYXVsdFZlcmlmeVNNU09UUE1lc3NhZ2VUZXh0UmVzcG9uc2UixgOSQfgCCg1NZXNzYWdlIFRleHRzEidHZXQgRGVmYXVsdCBWZXJpZnkgU01TIE9UUCBNZXNzYWdlIFRleHQavQJHZXQgdGhlIGRlZmF1bHQgdGV4dCBvZiB0aGUgdmVyaWZ5IFNNUyBPVFAgbWVzc2FnZSB0aGF0IGlzIHN0b3JlZCBhcyB0cmFuc2xhdGlvbiBmaWxlcyBpbiBaSVRBREVMIGl0c2VsZi4gVGhlIHRleHQgd2lsbCBiZSBzZW50IHRvIHRoZSB1c2VycyBvZiBhbGwgb3JnYW5pemF0aW9ucywgdGhhdCBkbyBub3QgaGF2ZSBhIGN1c3RvbSB0ZXh0IGNvbmZpZ3VyZWQuIFRoZSBtZXNzYWdlIGlzIHNlbnQgd2hlbiBhbiBTTVMgT25lLXRpbWUgcGFzc3dvcmQgc2hvdWxkIGJlIHZlcmlmaWVkIGFuZCBhIG5vdGlmaWNhdGlvbiBwcm92aWRlciBpcyBjb25maWd1cmVkLoK1GBEKD2lhbS5wb2xpY3kucmVhZILT5JMCLxItL3RleHQvZGVmYXVsdC9tZXNzYWdlL3ZlcmlmeXNtc290cC97bGFuZ3VhZ2V9EtsECiBHZXRDdXN0b21WZXJpZnlTTVNPVFBNZXNzYWdlVGV4dBI5LnppdGFkZWwuYWRtaW4udjEuR2V0Q3VzdG9tVmVyaWZ5U01TT1RQTWVzc2FnZVRleHRSZXF1ZXN0Gjoueml0YWRlbC5hZG1pbi52MS5HZXRDdXN0b21WZXJpZnlTTVNPVFBNZXNzYWdlVGV4dFJlc3BvbnNlIr8DkkH5AgoNTWVzc2FnZSBUZXh0cxImR2V0IEN1c3RvbSBWZXJpZnkgU01TIE9UUCBNZXNzYWdlIFRleHQavwJHZXQgdGhlIGN1c3RvbSB0ZXh0IG9mIHRoZSB2ZXJpZnkgU01TIE9UUCBtZXNzYWdlIHRoYXQgaXMgb3ZlcndyaXR0ZW4gb24gdGhlIGluc3RhbmNlIGFzIHNldHRpbmdzL2RhdGFiYXNlLiBUaGUgdGV4dCB3aWxsIGJlIHNlbnQgdG8gdGhlIHVzZXJzIG9mIGFsbCBvcmdhbml6YXRpb25zLCB0aGF0IGRvIG5vdCBoYXZlIGEgY3VzdG9tIHRleHQgY29uZmlndXJlZC4gVGhlIG1lc3NhZ2UgaXMgc2VudCB3aGVuIGFuIFNNUyBPbmUtdGltZSBwYXNzd29yZCBzaG91bGQgYmUgdmVyaWZpZWQgYW5kIGEgbm90aWZpY2F0aW9uIHByb3ZpZGVyIGlzIGNvbmZpZ3VyZWQugrUYEQoPaWFtLnBvbGljeS5yZWFkgtPkkwInEiUvdGV4dC9tZXNzYWdlL3ZlcmlmeXNtc290cC97bGFuZ3VhZ2V9EvUGCiFTZXREZWZhdWx0VmVyaWZ5U01TT1RQTWVzc2FnZVRleHQSOi56aXRhZGVsLmFkbWluLnYxLlNldERlZmF1bHRWZXJpZnlTTVNPVFBNZXNzYWdlVGV4dFJlcXVlc3QaOy56aXRhZGVsLmFkbWluLnYxLlNldERlZmF1bHRWZXJpZnlTTVNPVFBNZXNzYWdlVGV4dFJlc3BvbnNlItYFkkGMBQoNTWVzc2FnZSBUZXh0cxItU2V0IERlZmF1bHQgVmVyaWZ5IFNNUyBPVFAgUmVzZXQgTWVzc2FnZSBUZXh0GssEU2V0IHRoZSBjdXN0b20gdGV4dCBvZiB0aGUgdmVyaWZ5IFNNUyBPVFAgdXNlciBtZXNzYWdlIHRoYXQgaXMgb3ZlcndyaXR0ZW4gb24gdGhlIGluc3RhbmNlIGFzIHNldHRpbmdzL2RhdGFiYXNlLiBUaGUgdGV4dCB3aWxsIGJlIHNlbnQgdG8gdGhlIHVzZXJzIG9mIGFsbCBvcmdhbml6YXRpb25zLCB0aGF0IGRvIG5vdCBoYXZlIGEgY3VzdG9tIHRleHQgY29uZmlndXJlZC4gVGhlIG1lc3NhZ2UgaXMgc2VudCB3aGVuIGFuIFNNUyBPbmUtdGltZSBwYXNzd29yZCBzaG91bGQgYmUgdmVyaWZpZWQgYW5kIGEgbm90aWZpY2F0aW9uIHByb3ZpZGVyIGlzIGNvbmZpZ3VyZWQuIFRoZSBGb2xsb3dpbmcgVmFyaWFibGVzIGNhbiBiZSB1c2VkOiB7ey5Db2RlfX0ge3suVXNlck5hbWV9fSB7ey5GaXJzdE5hbWV9fSB7ey5MYXN0TmFtZX19IHt7Lk5pY2tOYW1lfX0ge3suRGlzcGxheU5hbWV9fSB7ey5MYXN0RW1haWx9fSB7ey5WZXJpZmllZEVtYWlsfX0ge3suTGFzdFBob25lfX0ge3suVmVyaWZpZWRQaG9uZX19IHt7LlByZWZlcnJlZExvZ2luTmFtZX19IHt7LkxvZ2luTmFtZXN9fSB7ey5DaGFuZ2VEYXRlfX0ge3suQ3JlYXRpb25EYXRlfX2CtRgSChBpYW0ucG9saWN5LndyaXRlgtPkkwIqOgEqGiUvdGV4dC9tZXNzYWdlL3ZlcmlmeXNtc290cC97bGFuZ3VhZ2V9EtQECitSZXNldEN1c3RvbVZlcmlmeVNNU09UUE1lc3NhZ2VUZXh0VG9EZWZhdWx0EkQueml0YWRlbC5hZG1pbi52MS5SZXNldEN1c3RvbVZlcmlmeVNNU09UUE1lc3NhZ2VUZXh0VG9EZWZhdWx0UmVxdWVzdBpFLnppdGFkZWwuYWRtaW4udjEuUmVzZXRDdXN0b21WZXJpZnlTTVNPVFBNZXNzYWdlVGV4dFRvRGVmYXVsdFJlc3BvbnNlIpcDkkHPAgoNTWVzc2FnZSBUZXh0cxIzUmVzZXQgQ3VzdG9tIFZlcmlmeSBTTVMgT1RQIE1lc3NhZ2UgVGV4dCB0byBEZWZhdWx0GogCUmVtb3ZlcyB0aGUgY3VzdG9tIHRleHQgb2YgdGhlIHZlcmlmeSBTTVMgT1RQIG1lc3NhZ2UgdGhhdCBpcyBvdmVyd3JpdHRlbiBvbiB0aGUgaW5zdGFuY2UgYW5kIHRyaWdnZXJzIHRoZSB0ZXh0IGZyb20gdGhlIHRyYW5zbGF0aW9uIGZpbGVzIHN0b3JlZCBpbiBaSVRBREVMIGl0c2VsZi4gVGhlIHRleHQgd2lsbCBiZSBzZW50IHRvIHRoZSB1c2VycyBvZiBhbGwgb3JnYW5pemF0aW9ucywgdGhhdCBkbyBub3QgaGF2ZSBhIGN1c3RvbSB0ZXh0IGNvbmZpZ3VyZWQugrUYEwoRaWFtLnBvbGljeS5kZWxldGWC0+STAicqJS90ZXh0L21lc3NhZ2UvdmVyaWZ5c21zb3RwL3tsYW5ndWFnZX0S7wQKI0dldERlZmF1bHRWZXJpZnlFbWFpbE9UUE1lc3NhZ2VUZXh0Ejwueml0YWRlbC5hZG1pbi52MS5HZXREZWZhdWx0VmVyaWZ5RW1haWxPVFBNZXNzYWdlVGV4dFJlcXVlc3QaPS56aXRhZGVsLmFkbWluLnYxLkdldERlZmF1bHRWZXJpZnlFbWFpbE9UUE1lc3NhZ2VUZXh0UmVzcG9uc2UiygOSQfoCCg1NZXNzYWdlIFRleHRzEidHZXQgRGVmYXVsdCBWZXJpZnkgU01TIE9UUCBNZXNzYWdlIFRleHQavwJHZXQgdGhlIGRlZmF1bHQgdGV4dCBvZiB0aGUgdmVyaWZ5IEVtYWlsIE9UUCBtZXNzYWdlIHRoYXQgaXMgc3RvcmVkIGFzIHRyYW5zbGF0aW9uIGZpbGVzIGluIFpJVEFERUwgaXRzZWxmLiBUaGUgdGV4dCB3aWxsIGJlIHNlbnQgdG8gdGhlIHVzZXJzIG9mIGFsbCBvcmdhbml6YXRpb25zLCB0aGF0IGRvIG5vdCBoYXZlIGEgY3VzdG9tIHRleHQgY29uZmlndXJlZC4gVGhlIG1lc3NhZ2UgaXMgc2VudCB3aGVuIGFuIFNNUyBPbmUtdGltZSBwYXNzd29yZCBzaG91bGQgYmUgdmVyaWZpZWQgYW5kIGEgbm90aWZpY2F0aW9uIHByb3ZpZGVyIGlzIGNvbmZpZ3VyZWQugrUYEQoPaWFtLnBvbGljeS5yZWFkgtPkkwIxEi8vdGV4dC9kZWZhdWx0L21lc3NhZ2UvdmVyaWZ5ZW1haWxvdHAve2xhbmd1YWdlfRLeBAoiR2V0Q3VzdG9tVmVyaWZ5RW1haWxPVFBNZXNzYWdlVGV4dBI7LnppdGFkZWwuYWRtaW4udjEuR2V0Q3VzdG9tVmVyaWZ5RW1haWxPVFBNZXNzYWdlVGV4dFJlcXVlc3QaPC56aXRhZGVsLmFkbWluLnYxLkdldEN1c3RvbVZlcmlmeUVtYWlsT1RQTWVzc2FnZVRleHRSZXNwb25zZSK8A5JB9AIKDU1lc3NhZ2UgVGV4dHMSJkdldCBDdXN0b20gVmVyaWZ5IFNNUyBPVFAgTWVzc2FnZSBUZXh0GroCR2V0IHRoZSBjdXN0b20gdGV4dCBvZiB0aGUgRW1haWwgT1RQIG1lc3NhZ2UgdGhhdCBpcyBvdmVyd3JpdHRlbiBvbiB0aGUgaW5zdGFuY2UgYXMgc2V0dGluZ3MvZGF0YWJhc2UuIFRoZSB0ZXh0IHdpbGwgYmUgc2VudCB0byB0aGUgdXNlcnMgb2YgYWxsIG9yZ2FuaXphdGlvbnMsIHRoYXQgZG8gbm90IGhhdmUgYSBjdXN0b20gdGV4dCBjb25maWd1cmVkLiBUaGUgbWVzc2FnZSBpcyBzZW50IHdoZW4gYW4gU01TIE9uZS10aW1lIHBhc3N3b3JkIHNob3VsZCBiZSB2ZXJpZmllZCBhbmQgYSBub3RpZmljYXRpb24gcHJvdmlkZXIgaXMgY29uZmlndXJlZC6CtRgRCg9pYW0ucG9saWN5LnJlYWSC0+STAikSJy90ZXh0L21lc3NhZ2UvdmVyaWZ5ZW1haWxvdHAve2xhbmd1YWdlfRL4BgojU2V0RGVmYXVsdFZlcmlmeUVtYWlsT1RQTWVzc2FnZVRleHQSPC56aXRhZGVsLmFkbWluLnYxLlNldERlZmF1bHRWZXJpZnlFbWFpbE9UUE1lc3NhZ2VUZXh0UmVxdWVzdBo9LnppdGFkZWwuYWRtaW4udjEuU2V0RGVmYXVsdFZlcmlmeUVtYWlsT1RQTWVzc2FnZVRleHRSZXNwb25zZSLTBZJBhwUKDU1lc3NhZ2UgVGV4dHMSLVNldCBEZWZhdWx0IFZlcmlmeSBTTVMgT1RQIFJlc2V0IE1lc3NhZ2UgVGV4dBrGBFNldCB0aGUgY3VzdG9tIHRleHQgb2YgdGhlIEVtYWlsIE9UUCB1c2VyIG1lc3NhZ2UgdGhhdCBpcyBvdmVyd3JpdHRlbiBvbiB0aGUgaW5zdGFuY2UgYXMgc2V0dGluZ3MvZGF0YWJhc2UuIFRoZSB0ZXh0IHdpbGwgYmUgc2VudCB0byB0aGUgdXNlcnMgb2YgYWxsIG9yZ2FuaXphdGlvbnMsIHRoYXQgZG8gbm90IGhhdmUgYSBjdXN0b20gdGV4dCBjb25maWd1cmVkLiBUaGUgbWVzc2FnZSBpcyBzZW50IHdoZW4gYW4gU01TIE9uZS10aW1lIHBhc3N3b3JkIHNob3VsZCBiZSB2ZXJpZmllZCBhbmQgYSBub3RpZmljYXRpb24gcHJvdmlkZXIgaXMgY29uZmlndXJlZC4gVGhlIEZvbGxvd2luZyBWYXJpYWJsZXMgY2FuIGJlIHVzZWQ6IHt7LkNvZGV9fSB7ey5Vc2VyTmFtZX19IHt7LkZpcnN0TmFtZX19IHt7Lkxhc3ROYW1lfX0ge3suTmlja05hbWV9fSB7ey5EaXNwbGF5TmFtZX19IHt7Lkxhc3RFbWFpbH19IHt7LlZlcmlmaWVkRW1haWx9fSB7ey5MYXN0UGhvbmV9fSB7ey5WZXJpZmllZFBob25lfX0ge3suUHJlZmVycmVkTG9naW5OYW1lfX0ge3suTG9naW5OYW1lc319IHt7LkNoYW5nZURhdGV9fSB7ey5DcmVhdGlvbkRhdGV9fYK1GBIKEGlhbS5wb2xpY3kud3JpdGWC0+STAiw6ASoaJy90ZXh0L21lc3NhZ2UvdmVyaWZ5ZW1haWxvdHAve2xhbmd1YWdlfRLXBAotUmVzZXRDdXN0b21WZXJpZnlFbWFpbE9UUE1lc3NhZ2VUZXh0VG9EZWZhdWx0EkYueml0YWRlbC5hZG1pbi52MS5SZXNldEN1c3RvbVZlcmlmeUVtYWlsT1RQTWVzc2FnZVRleHRUb0RlZmF1bHRSZXF1ZXN0Gkcueml0YWRlbC5hZG1pbi52MS5SZXNldEN1c3RvbVZlcmlmeUVtYWlsT1RQTWVzc2FnZVRleHRUb0RlZmF1bHRSZXNwb25zZSKUA5JBygIKDU1lc3NhZ2UgVGV4dHMSM1Jlc2V0IEN1c3RvbSBWZXJpZnkgU01TIE9UUCBNZXNzYWdlIFRleHQgdG8gRGVmYXVsdBqDAlJlbW92ZXMgdGhlIGN1c3RvbSB0ZXh0IG9mIHRoZSBFbWFpbCBPVFAgbWVzc2FnZSB0aGF0IGlzIG92ZXJ3cml0dGVuIG9uIHRoZSBpbnN0YW5jZSBhbmQgdHJpZ2dlcnMgdGhlIHRleHQgZnJvbSB0aGUgdHJhbnNsYXRpb24gZmlsZXMgc3RvcmVkIGluIFpJVEFERUwgaXRzZWxmLiBUaGUgdGV4dCB3aWxsIGJlIHNlbnQgdG8gdGhlIHVzZXJzIG9mIGFsbCBvcmdhbml6YXRpb25zLCB0aGF0IGRvIG5vdCBoYXZlIGEgY3VzdG9tIHRleHQgY29uZmlndXJlZC6CtRgTChFpYW0ucG9saWN5LmRlbGV0ZYLT5JMCKSonL3RleHQvbWVzc2FnZS92ZXJpZnllbWFpbG90cC97bGFuZ3VhZ2V9EvIECiJHZXREZWZhdWx0RG9tYWluQ2xhaW1lZE1lc3NhZ2VUZXh0Ejsueml0YWRlbC5hZG1pbi52MS5HZXREZWZhdWx0RG9tYWluQ2xhaW1lZE1lc3NhZ2VUZXh0UmVxdWVzdBo8LnppdGFkZWwuYWRtaW4udjEuR2V0RGVmYXVsdERvbWFpbkNsYWltZWRNZXNzYWdlVGV4dFJlc3BvbnNlItADkkGBAwoNTWVzc2FnZSBUZXh0cxInR2V0IERlZmF1bHQgRG9tYWluIENsYWltZWQgTWVzc2FnZSBUZXh0GsYCR2V0IHRoZSBkZWZhdWx0IHRleHQgb2YgdGhlIGRvbWFpbiBjbGFpbWVkIG1lc3NhZ2UvZW1haWwgdGhhdCBpcyBzdG9yZWQgYXMgdHJhbnNsYXRpb24gZmlsZXMgaW4gWklUQURFTCBpdHNlbGYuIFRoZSB0ZXh0IHdpbGwgYmUgc2VudCB0byB0aGUgdXNlcnMgb2YgYWxsIG9yZ2FuaXphdGlvbnMsIHRoYXQgZG8gbm90IGhhdmUgYSBjdXN0b20gdGV4dCBjb25maWd1cmVkLiBUaGUgbWVzc2FnZSBpcyBzZW50IHdoZW4gYW4gb3JnYW5pemF0aW9uIGNsYWltcyBhIGRvbWFpbiBhbmQgYSB1c2VyIG9mIHRoaXMgZG9tYWluIGV4aXN0cyBpbiBhbm90aGVyIG9yZ2FuaXphdGlvbi6CtRgRCg9pYW0ucG9saWN5LnJlYWSC0+STAjASLi90ZXh0L2RlZmF1bHQvbWVzc2FnZS9kb21haW5jbGFpbWVkL3tsYW5ndWFnZX0S6AQKIUdldEN1c3RvbURvbWFpbkNsYWltZWRNZXNzYWdlVGV4dBI6LnppdGFkZWwuYWRtaW4udjEuR2V0Q3VzdG9tRG9tYWluQ2xhaW1lZE1lc3NhZ2VUZXh0UmVxdWVzdBo7LnppdGFkZWwuYWRtaW4udjEuR2V0Q3VzdG9tRG9tYWluQ2xhaW1lZE1lc3NhZ2VUZXh0UmVzcG9uc2UiyQOSQYIDCg1NZXNzYWdlIFRleHRzEiZHZXQgQ3VzdG9tIERvbWFpbiBDbGFpbWVkIE1lc3NhZ2UgVGV4dBrIAkdldCB0aGUgY3VzdG9tIHRleHQgb2YgdGhlIGRvbWFpbiBjbGFpbWVkIG1lc3NhZ2UvZW1haWwgdGhhdCBpcyBvdmVyd3JpdHRlbiBvbiB0aGUgaW5zdGFuY2UgYXMgc2V0dGluZ3MvZGF0YWJhc2UuIFRoZSB0ZXh0IHdpbGwgYmUgc2VudCB0byB0aGUgdXNlcnMgb2YgYWxsIG9yZ2FuaXphdGlvbnMsIHRoYXQgZG8gbm90IGhhdmUgYSBjdXN0b20gdGV4dCBjb25maWd1cmVkLiBUaGUgbWVzc2FnZSBpcyBzZW50IHdoZW4gYW4gb3JnYW5pemF0aW9uIGNsYWltcyBhIGRvbWFpbiBhbmQgYSB1c2VyIG9mIHRoaXMgZG9tYWluIGV4aXN0cyBpbiBhbm90aGVyIG9yZ2FuaXphdGlvbi6CtRgRCg9pYW0ucG9saWN5LnJlYWSC0+STAigSJi90ZXh0L21lc3NhZ2UvZG9tYWluY2xhaW1lZC97bGFuZ3VhZ2V9EpEHCiJTZXREZWZhdWx0RG9tYWluQ2xhaW1lZE1lc3NhZ2VUZXh0Ejsueml0YWRlbC5hZG1pbi52MS5TZXREZWZhdWx0RG9tYWluQ2xhaW1lZE1lc3NhZ2VUZXh0UmVxdWVzdBo8LnppdGFkZWwuYWRtaW4udjEuU2V0RGVmYXVsdERvbWFpbkNsYWltZWRNZXNzYWdlVGV4dFJlc3BvbnNlIu8FkkGkBQoNTWVzc2FnZSBUZXh0cxInU2V0IERlZmF1bHQgRG9tYWluIENsYWltZWQgTWVzc2FnZSBUZXh0GukEU2V0IHRoZSBjdXN0b20gdGV4dCBvZiB0aGUgZG9tYWluIGNsYWltZWQgbWVzc2FnZS9lbWFpbCB0aGF0IGlzIG92ZXJ3cml0dGVuIG9uIHRoZSBpbnN0YW5jZSBhcyBzZXR0aW5ncy9kYXRhYmFzZS4gVGhlIHRleHQgd2lsbCBiZSBzZW50IHRvIHRoZSB1c2VycyBvZiBhbGwgb3JnYW5pemF0aW9ucywgdGhhdCBkbyBub3QgaGF2ZSBhIGN1c3RvbSB0ZXh0IGNvbmZpZ3VyZWQuIFRoZSBtZXNzYWdlL2VtYWlsIGlzIHNlbnQgd2hlbiBhbiBvcmdhbml6YXRpb24gY2xhaW1zIGEgZG9tYWluIGFuZCBhIHVzZXIgb2YgdGhpcyBkb21haW4gZXhpc3RzIGluIGFub3RoZXIgb3JnYW5pemF0aW9uLiBUaGUgRm9sbG93aW5nIFZhcmlhYmxlcyBjYW4gYmUgdXNlZDoge3suRG9tYWlufX0ge3suVGVtcFVzZXJuYW1lfX0ge3suVXNlck5hbWV9fSB7ey5GaXJzdE5hbWV9fSB7ey5MYXN0TmFtZX19IHt7Lk5pY2tOYW1lfX0ge3suRGlzcGxheU5hbWV9fSB7ey5MYXN0RW1haWx9fSB7ey5WZXJpZmllZEVtYWlsfX0ge3suTGFzdFBob25lfX0ge3suVmVyaWZpZWRQaG9uZX19IHt7LlByZWZlcnJlZExvZ2luTmFtZX19IHt7LkxvZ2luTmFtZXN9fSB7ey5DaGFuZ2VEYXRlfX0ge3suQ3JlYXRpb25EYXRlfX2CtRgSChBpYW0ucG9saWN5LndyaXRlgtPkkwIrOgEqGiYvdGV4dC9tZXNzYWdlL2RvbWFpbmNsYWltZWQve2xhbmd1YWdlfRLYBAosUmVzZXRDdXN0b21Eb21haW5DbGFpbWVkTWVzc2FnZVRleHRUb0RlZmF1bHQSRS56aXRhZGVsLmFkbWluLnYxLlJlc2V0Q3VzdG9tRG9tYWluQ2xhaW1lZE1lc3NhZ2VUZXh0VG9EZWZhdWx0UmVxdWVzdBpGLnppdGFkZWwuYWRtaW4udjEuUmVzZXRDdXN0b21Eb21haW5DbGFpbWVkTWVzc2FnZVRleHRUb0RlZmF1bHRSZXNwb25zZSKYA5JBzwIKDU1lc3NhZ2UgVGV4dHMSM1Jlc2V0IEN1c3RvbSBEb21haW4gQ2xhaW1lZCBNZXNzYWdlIFRleHQgdG8gRGVmYXVsdBqIAlJlbW92ZXMgdGhlIGN1c3RvbSB0ZXh0IG9mIHRoZSBkb21haW4gY2xhaW1lZCBtZXNzYWdlIHRoYXQgaXMgb3ZlcndyaXR0ZW4gb24gdGhlIGluc3RhbmNlIGFuZCB0cmlnZ2VycyB0aGUgdGV4dCBmcm9tIHRoZSB0cmFuc2xhdGlvbiBmaWxlcyBzdG9yZWQgaW4gWklUQURFTCBpdHNlbGYuIFRoZSB0ZXh0IHdpbGwgYmUgc2VudCB0byB0aGUgdXNlcnMgb2YgYWxsIG9yZ2FuaXphdGlvbnMsIHRoYXQgZG8gbm90IGhhdmUgYSBjdXN0b20gdGV4dCBjb25maWd1cmVkLoK1GBMKEWlhbS5wb2xpY3kuZGVsZXRlgtPkkwIoKiYvdGV4dC9tZXNzYWdlL2RvbWFpbmNsYWltZWQve2xhbmd1YWdlfRK3BQotR2V0RGVmYXVsdFBhc3N3b3JkbGVzc1JlZ2lzdHJhdGlvbk1lc3NhZ2VUZXh0EkYueml0YWRlbC5hZG1pbi52MS5HZXREZWZhdWx0UGFzc3dvcmRsZXNzUmVnaXN0cmF0aW9uTWVzc2FnZVRleHRSZXF1ZXN0Gkcueml0YWRlbC5hZG1pbi52MS5HZXREZWZhdWx0UGFzc3dvcmRsZXNzUmVnaXN0cmF0aW9uTWVzc2FnZVRleHRSZXNwb25zZSL0A5JBmQMKDU1lc3NhZ2UgVGV4dHMSMkdldCBEZWZhdWx0IFBhc3N3b3JkbGVzcyBSZWdpc3RyYXRpb24gTWVzc2FnZSBUZXh0GtMCR2V0IHRoZSBkZWZhdWx0IHRleHQgb2YgdGhlIGRvbWFpbiBjbGFpbWVkIG1lc3NhZ2UvZW1haWwgdGhhdCBpcyBzdG9yZWQgYXMgdHJhbnNsYXRpb24gZmlsZXMgaW4gWklUQURFTCBpdHNlbGYuIFRoZSB0ZXh0IHdpbGwgYmUgc2VudCB0byB0aGUgdXNlcnMgb2YgYWxsIG9yZ2FuaXphdGlvbnMsIHRoYXQgZG8gbm90IGhhdmUgYSBjdXN0b20gdGV4dCBjb25maWd1cmVkLiBUaGUgbWVzc2FnZSBpcyBzZW50IHdoZW4gYSB1c2VyIHJlcXVlc3RzIHBhc3N3b3JkbGVzcy9wYXNza2V5IHJlZ2lzdHJhdGlvbiBhcyBlbWFpbCwgdG8gYmUgYWJsZSB0byBjb25maWd1cmUgb24gYW5vdGhlciBkZXZpY2UugrUYEQoPaWFtLnBvbGljeS5yZWFkgtPkkwI8EjovdGV4dC9kZWZhdWx0L21lc3NhZ2UvcGFzc3dvcmRsZXNzX3JlZ2lzdHJhdGlvbi97bGFuZ3VhZ2V9EsAFCixHZXRDdXN0b21QYXNzd29yZGxlc3NSZWdpc3RyYXRpb25NZXNzYWdlVGV4dBJFLnppdGFkZWwuYWRtaW4udjEuR2V0Q3VzdG9tUGFzc3dvcmRsZXNzUmVnaXN0cmF0aW9uTWVzc2FnZVRleHRSZXF1ZXN0GkYueml0YWRlbC5hZG1pbi52MS5HZXRDdXN0b21QYXNzd29yZGxlc3NSZWdpc3RyYXRpb25NZXNzYWdlVGV4dFJlc3BvbnNlIoAEkkGtAwoNTWVzc2FnZSBUZXh0cxIxR2V0IEN1c3RvbSBQYXNzd29yZGxlc3MgUmVnaXN0cmF0aW9uIE1lc3NhZ2UgVGV4dBroAkdldCB0aGUgY3VzdG9tIHRleHQgb2YgdGhlIHBhc3N3b3JkbGVzcy9wYXNza2V5IHJlZ2lzdHJhdGlvbiBtZXNzYWdlL2VtYWlsIHRoYXQgaXMgb3ZlcndyaXR0ZW4gb24gdGhlIGluc3RhbmNlIGFzIHNldHRpbmdzL2RhdGFiYXNlLiBUaGUgdGV4dCB3aWxsIGJlIHNlbnQgdG8gdGhlIHVzZXJzIG9mIGFsbCBvcmdhbml6YXRpb25zLCB0aGF0IGRvIG5vdCBoYXZlIGEgY3VzdG9tIHRleHQgY29uZmlndXJlZC4gVGhlIG1lc3NhZ2UgaXMgc2VudCB3aGVuIGEgdXNlciByZXF1ZXN0cyBwYXNzd29yZGxlc3MvcGFzc2tleSByZWdpc3RyYXRpb24gYXMgZW1haWwsIHRvIGJlIGFibGUgdG8gY29uZmlndXJlIG9uIGFub3RoZXIgZGV2aWNlLoK1GBEKD2lhbS5wb2xpY3kucmVhZILT5JMCNBIyL3RleHQvbWVzc2FnZS9wYXNzd29yZGxlc3NfcmVnaXN0cmF0aW9uL3tsYW5ndWFnZX0SzAcKLVNldERlZmF1bHRQYXNzd29yZGxlc3NSZWdpc3RyYXRpb25NZXNzYWdlVGV4dBJGLnppdGFkZWwuYWRtaW4udjEuU2V0RGVmYXVsdFBhc3N3b3JkbGVzc1JlZ2lzdHJhdGlvbk1lc3NhZ2VUZXh0UmVxdWVzdBpHLnppdGFkZWwuYWRtaW4udjEuU2V0RGVmYXVsdFBhc3N3b3JkbGVzc1JlZ2lzdHJhdGlvbk1lc3NhZ2VUZXh0UmVzcG9uc2UiiQaSQbIFCg1NZXNzYWdlIFRleHRzEjJTZXQgRGVmYXVsdCBQYXNzd29yZGxlc3MgUmVnaXN0cmF0aW9uIE1lc3NhZ2UgVGV4dBrsBFNldCB0aGUgY3VzdG9tIHRleHQgb2YgdGhlIHBhc3N3b3JkbGVzcy9wYXNza2V5IHJlZ2lzdHJhdGlvbiBtZXNzYWdlL2VtYWlsIHRoYXQgaXMgb3ZlcndyaXR0ZW4gb24gdGhlIGluc3RhbmNlIGFzIHNldHRpbmdzL2RhdGFiYXNlLiBUaGUgdGV4dCB3aWxsIGJlIHNlbnQgdG8gdGhlIHVzZXJzIG9mIGFsbCBvcmdhbml6YXRpb25zLCB0aGF0IGRvIG5vdCBoYXZlIGEgY3VzdG9tIHRleHQgY29uZmlndXJlZC4gVGhlIG1lc3NhZ2UvZW1haWwgaXMgc2VudCB3aGVuIGEgdXNlciByZXF1ZXN0cyBwYXNzd29yZGxlc3MvcGFzc2tleSByZWdpc3RyYXRpb24gYXMgZW1haWwsIHRvIGJlIGFibGUgdG8gY29uZmlndXJlIG9uIGFub3RoZXIgZGV2aWNlLiAgVGhlIEZvbGxvd2luZyBWYXJpYWJsZXMgY2FuIGJlIHVzZWQ6IHt7LlVzZXJOYW1lfX0ge3suRmlyc3ROYW1lfX0ge3suTGFzdE5hbWV9fSB7ey5OaWNrTmFtZX19IHt7LkRpc3BsYXlOYW1lfX0ge3suTGFzdEVtYWlsfX0ge3suVmVyaWZpZWRFbWFpbH19IHt7Lkxhc3RQaG9uZX19IHt7LlZlcmlmaWVkUGhvbmV9fSB7ey5QcmVmZXJyZWRMb2dpbk5hbWV9fSB7ey5Mb2dpbk5hbWVzfX0ge3suQ2hhbmdlRGF0ZX19IHt7LkNyZWF0aW9uRGF0ZX19grUYEgoQaWFtLnBvbGljeS53cml0ZYLT5JMCNzoBKhoyL3RleHQvbWVzc2FnZS9wYXNzd29yZGxlc3NfcmVnaXN0cmF0aW9uL3tsYW5ndWFnZX0SowUKN1Jlc2V0Q3VzdG9tUGFzc3dvcmRsZXNzUmVnaXN0cmF0aW9uTWVzc2FnZVRleHRUb0RlZmF1bHQSUC56aXRhZGVsLmFkbWluLnYxLlJlc2V0Q3VzdG9tUGFzc3dvcmRsZXNzUmVnaXN0cmF0aW9uTWVzc2FnZVRleHRUb0RlZmF1bHRSZXF1ZXN0GlEueml0YWRlbC5hZG1pbi52MS5SZXNldEN1c3RvbVBhc3N3b3JkbGVzc1JlZ2lzdHJhdGlvbk1lc3NhZ2VUZXh0VG9EZWZhdWx0UmVzcG9uc2UiwgOSQe0CCg1NZXNzYWdlIFRleHRzEj5SZXNldCBDdXN0b20gUGFzc3dvcmRsZXNzIFJlZ2lzdHJhdGlvbiBNZXNzYWdlIFRleHQgdG8gRGVmYXVsdBqbAlJlbW92ZXMgdGhlIGN1c3RvbSB0ZXh0IG9mIHRoZSBwYXNzd29yZGxlc3MvcGFzc2tleSByZWdpc3RyYXRpb24gbWVzc2FnZSB0aGF0IGlzIG92ZXJ3cml0dGVuIG9uIHRoZSBpbnN0YW5jZSBhbmQgdHJpZ2dlcnMgdGhlIHRleHQgZnJvbSB0aGUgdHJhbnNsYXRpb24gZmlsZXMgc3RvcmVkIGluIFpJVEFERUwgaXRzZWxmLiBUaGUgdGV4dCB3aWxsIGJlIHNlbnQgdG8gdGhlIHVzZXJzIG9mIGFsbCBvcmdhbml6YXRpb25zLCB0aGF0IGRvIG5vdCBoYXZlIGEgY3VzdG9tIHRleHQgY29uZmlndXJlZC6CtRgTChFpYW0ucG9saWN5LmRlbGV0ZYLT5JMCNCoyL3RleHQvbWVzc2FnZS9wYXNzd29yZGxlc3NfcmVnaXN0cmF0aW9uL3tsYW5ndWFnZX0SyQQKI0dldERlZmF1bHRQYXNzd29yZENoYW5nZU1lc3NhZ2VUZXh0Ejwueml0YWRlbC5hZG1pbi52MS5HZXREZWZhdWx0UGFzc3dvcmRDaGFuZ2VNZXNzYWdlVGV4dFJlcXVlc3QaPS56aXRhZGVsLmFkbWluLnYxLkdldERlZmF1bHRQYXNzd29yZENoYW5nZU1lc3NhZ2VUZXh0UmVzcG9uc2UipAOSQdMCCg1NZXNzYWdlIFRleHRzEihHZXQgRGVmYXVsdCBQYXNzd29yZCBDaGFuZ2UgTWVzc2FnZSBUZXh0GpcCR2V0IHRoZSBkZWZhdWx0IHRleHQgb2YgdGhlIHBhc3N3b3JkLWNoYW5nZWQgbWVzc2FnZS9lbWFpbCB0aGF0IGlzIHN0b3JlZCBhcyB0cmFuc2xhdGlvbiBmaWxlcyBpbiBaSVRBREVMIGl0c2VsZi4gVGhlIHRleHQgd2lsbCBiZSBzZW50IHRvIHRoZSB1c2VycyBvZiBhbGwgb3JnYW5pemF0aW9ucywgdGhhdCBkbyBub3QgaGF2ZSBhIGN1c3RvbSB0ZXh0IGNvbmZpZ3VyZWQuIFRoZSBtZXNzYWdlIGlzIHNlbnQgd2hlbiB0aGUgcGFzc3dvcmQgb2YgYSB1c2VyIGhhcyBiZWVuIGNoYW5nZWQugrUYEQoPaWFtLnBvbGljeS5yZWFkgtPkkwIyEjAvdGV4dC9kZWZhdWx0L21lc3NhZ2UvcGFzc3dvcmRfY2hhbmdlL3tsYW5ndWFnZX0SvwQKIkdldEN1c3RvbVBhc3N3b3JkQ2hhbmdlTWVzc2FnZVRleHQSOy56aXRhZGVsLmFkbWluLnYxLkdldEN1c3RvbVBhc3N3b3JkQ2hhbmdlTWVzc2FnZVRleHRSZXF1ZXN0Gjwueml0YWRlbC5hZG1pbi52MS5HZXRDdXN0b21QYXNzd29yZENoYW5nZU1lc3NhZ2VUZXh0UmVzcG9uc2UinQOSQdQCCg1NZXNzYWdlIFRleHRzEidHZXQgQ3VzdG9tIFBhc3N3b3JkIENoYW5nZSBNZXNzYWdlIFRleHQamQJHZXQgdGhlIGN1c3RvbSB0ZXh0IG9mIHRoZSBwYXNzd29yZC1jaGFuZ2VkIG1lc3NhZ2UvZW1haWwgdGhhdCBpcyBvdmVyd3JpdHRlbiBvbiB0aGUgaW5zdGFuY2UgYXMgc2V0dGluZ3MvZGF0YWJhc2UuIFRoZSB0ZXh0IHdpbGwgYmUgc2VudCB0byB0aGUgdXNlcnMgb2YgYWxsIG9yZ2FuaXphdGlvbnMsIHRoYXQgZG8gbm90IGhhdmUgYSBjdXN0b20gdGV4dCBjb25maWd1cmVkLiBUaGUgbWVzc2FnZSBpcyBzZW50IHdoZW4gdGhlIHBhc3N3b3JkIG9mIGEgdXNlciBoYXMgYmVlbiBjaGFuZ2VkLoK1GBEKD2lhbS5wb2xpY3kucmVhZILT5JMCKhIoL3RleHQvbWVzc2FnZS9wYXNzd29yZF9jaGFuZ2Uve2xhbmd1YWdlfRLMBgojU2V0RGVmYXVsdFBhc3N3b3JkQ2hhbmdlTWVzc2FnZVRleHQSPC56aXRhZGVsLmFkbWluLnYxLlNldERlZmF1bHRQYXNzd29yZENoYW5nZU1lc3NhZ2VUZXh0UmVxdWVzdBo9LnppdGFkZWwuYWRtaW4udjEuU2V0RGVmYXVsdFBhc3N3b3JkQ2hhbmdlTWVzc2FnZVRleHRSZXNwb25zZSKnBZJB2gQKDU1lc3NhZ2UgVGV4dHMSKVNldCBEZWZhdWx0IFBhc3N3b3JkIENoYW5nZWQgTWVzc2FnZSBUZXh0Gp0EU2V0IHRoZSBjdXN0b20gdGV4dCBvZiB0aGUgcGFzc3dvcmQtY2hhbmdlZCBtZXNzYWdlL2VtYWlsIHRoYXQgaXMgb3ZlcndyaXR0ZW4gb24gdGhlIGluc3RhbmNlIGFzIHNldHRpbmdzL2RhdGFiYXNlLiBUaGUgdGV4dCB3aWxsIGJlIHNlbnQgdG8gdGhlIHVzZXJzIG9mIGFsbCBvcmdhbml6YXRpb25zLCB0aGF0IGRvIG5vdCBoYXZlIGEgY3VzdG9tIHRleHQgY29uZmlndXJlZC4gVGhlIG1lc3NhZ2UvZW1haWwgaXMgc2VudCB3aGVuIHRoZSBwYXNzd29yZCBvZiBhIHVzZXIgaGFzIGJlZW4gY2hhbmdlZC4gIFRoZSBGb2xsb3dpbmcgVmFyaWFibGVzIGNhbiBiZSB1c2VkOiB7ey5Vc2VyTmFtZX19IHt7LkZpcnN0TmFtZX19IHt7Lkxhc3ROYW1lfX0ge3suTmlja05hbWV9fSB7ey5EaXNwbGF5TmFtZX19IHt7Lkxhc3RFbWFpbH19IHt7LlZlcmlmaWVkRW1haWx9fSB7ey5MYXN0UGhvbmV9fSB7ey5WZXJpZmllZFBob25lfX0ge3suUHJlZmVycmVkTG9naW5OYW1lfX0ge3suTG9naW5OYW1lc319IHt7LkNoYW5nZURhdGV9fSB7ey5DcmVhdGlvbkRhdGV9fYK1GBIKEGlhbS5wb2xpY3kud3JpdGWC0+STAi06ASoaKC90ZXh0L21lc3NhZ2UvcGFzc3dvcmRfY2hhbmdlL3tsYW5ndWFnZX0S4QQKLVJlc2V0Q3VzdG9tUGFzc3dvcmRDaGFuZ2VNZXNzYWdlVGV4dFRvRGVmYXVsdBJGLnppdGFkZWwuYWRtaW4udjEuUmVzZXRDdXN0b21QYXNzd29yZENoYW5nZU1lc3NhZ2VUZXh0VG9EZWZhdWx0UmVxdWVzdBpHLnppdGFkZWwuYWRtaW4udjEuUmVzZXRDdXN0b21QYXNzd29yZENoYW5nZU1lc3NhZ2VUZXh0VG9EZWZhdWx0UmVzcG9uc2UingOSQdMCCg1NZXNzYWdlIFRleHRzEjVSZXNldCBDdXN0b20gUGFzc3dvcmQgQ2hhbmdlZCBNZXNzYWdlIFRleHQgdG8gRGVmYXVsdBqKAlJlbW92ZXMgdGhlIGN1c3RvbSB0ZXh0IG9mIHRoZSBwYXNzd29yZC1jaGFuZ2VkIG1lc3NhZ2UgdGhhdCBpcyBvdmVyd3JpdHRlbiBvbiB0aGUgaW5zdGFuY2UgYW5kIHRyaWdnZXJzIHRoZSB0ZXh0IGZyb20gdGhlIHRyYW5zbGF0aW9uIGZpbGVzIHN0b3JlZCBpbiBaSVRBREVMIGl0c2VsZi4gVGhlIHRleHQgd2lsbCBiZSBzZW50IHRvIHRoZSB1c2VycyBvZiBhbGwgb3JnYW5pemF0aW9ucywgdGhhdCBkbyBub3QgaGF2ZSBhIGN1c3RvbSB0ZXh0IGNvbmZpZ3VyZWQugrUYEwoRaWFtLnBvbGljeS5kZWxldGWC0+STAioqKC90ZXh0L21lc3NhZ2UvcGFzc3dvcmRfY2hhbmdlL3tsYW5ndWFnZX0SqgQKH0dldERlZmF1bHRJbnZpdGVVc2VyTWVzc2FnZVRleHQSOC56aXRhZGVsLmFkbWluLnYxLkdldERlZmF1bHRJbnZpdGVVc2VyTWVzc2FnZVRleHRSZXF1ZXN0Gjkueml0YWRlbC5hZG1pbi52MS5HZXREZWZhdWx0SW52aXRlVXNlck1lc3NhZ2VUZXh0UmVzcG9uc2UikQOSQcQCCg1NZXNzYWdlIFRleHRzEiRHZXQgRGVmYXVsdCBJbnZpdGUgVXNlciBNZXNzYWdlIFRleHQajAJHZXQgdGhlIGRlZmF1bHQgdGV4dCBvZiB0aGUgaW52aXRlIHVzZXIgbWVzc2FnZS9lbWFpbCB0aGF0IGlzIHN0b3JlZCBhcyB0cmFuc2xhdGlvbiBmaWxlcyBpbiBaSVRBREVMIGl0c2VsZi4gVGhlIHRleHQgd2lsbCBiZSBzZW50IHRvIHRoZSB1c2VycyBvZiBhbGwgb3JnYW5pemF0aW9ucywgdGhhdCBkbyBub3QgaGF2ZSBhIGN1c3RvbSB0ZXh0IGNvbmZpZ3VyZWQuIFRoZSBtZXNzYWdlIGlzIHNlbnQgd2hlbiBhbiBpbnZpdGUgY29kZSBlbWFpbCBpcyByZXF1ZXN0ZWQugrUYEQoPaWFtLnBvbGljeS5yZWFkgtPkkwIuEiwvdGV4dC9kZWZhdWx0L21lc3NhZ2UvaW52aXRlX3VzZXIve2xhbmd1YWdlfRKgBAoeR2V0Q3VzdG9tSW52aXRlVXNlck1lc3NhZ2VUZXh0Ejcueml0YWRlbC5hZG1pbi52MS5HZXRDdXN0b21JbnZpdGVVc2VyTWVzc2FnZVRleHRSZXF1ZXN0Gjgueml0YWRlbC5hZG1pbi52MS5HZXRDdXN0b21JbnZpdGVVc2VyTWVzc2FnZVRleHRSZXNwb25zZSKKA5JBxQIKDU1lc3NhZ2UgVGV4dHMSI0dldCBDdXN0b20gSW52aXRlIFVzZXIgTWVzc2FnZSBUZXh0Go4CR2V0IHRoZSBjdXN0b20gdGV4dCBvZiB0aGUgaW52aXRlIHVzZXIgbWVzc2FnZS9lbWFpbCB0aGF0IGlzIG92ZXJ3cml0dGVuIG9uIHRoZSBpbnN0YW5jZSBhcyBzZXR0aW5ncy9kYXRhYmFzZS4gVGhlIHRleHQgd2lsbCBiZSBzZW50IHRvIHRoZSB1c2VycyBvZiBhbGwgb3JnYW5pemF0aW9ucywgdGhhdCBkbyBub3QgaGF2ZSBhIGN1c3RvbSB0ZXh0IGNvbmZpZ3VyZWQuIFRoZSBtZXNzYWdlIGlzIHNlbnQgd2hlbiBhbiBpbnZpdGUgY29kZSBlbWFpbCBpcyByZXF1ZXN0ZWQugrUYEQoPaWFtLnBvbGljeS5yZWFkgtPkkwImEiQvdGV4dC9tZXNzYWdlL2ludml0ZV91c2VyL3tsYW5ndWFnZX0SugYKH1NldERlZmF1bHRJbnZpdGVVc2VyTWVzc2FnZVRleHQSOC56aXRhZGVsLmFkbWluLnYxLlNldERlZmF1bHRJbnZpdGVVc2VyTWVzc2FnZVRleHRSZXF1ZXN0Gjkueml0YWRlbC5hZG1pbi52MS5TZXREZWZhdWx0SW52aXRlVXNlck1lc3NhZ2VUZXh0UmVzcG9uc2UioQWSQdgECg1NZXNzYWdlIFRleHRzEiRTZXQgRGVmYXVsdCBJbnZpdGUgVXNlciBNZXNzYWdlIFRleHQaoARTZXQgdGhlIGN1c3RvbSB0ZXh0IG9mIHRoZSBpbnZpdGUgdXNlciBtZXNzYWdlL2VtYWlsIHRoYXQgaXMgb3ZlcndyaXR0ZW4gb24gdGhlIGluc3RhbmNlIGFzIHNldHRpbmdzL2RhdGFiYXNlLiBUaGUgdGV4dCB3aWxsIGJlIHNlbnQgdG8gdGhlIHVzZXJzIG9mIGFsbCBvcmdhbml6YXRpb25zLCB0aGF0IGRvIG5vdCBoYXZlIGEgY3VzdG9tIHRleHQgY29uZmlndXJlZC4gVGhlIG1lc3NhZ2UgaXMgc2VudCB3aGVuIGFuIGludml0ZSBjb2RlIGVtYWlsIGlzIHJlcXVlc3RlZC4gVGhlIEZvbGxvd2luZyBWYXJpYWJsZXMgY2FuIGJlIHVzZWQ6IHt7LlVzZXJOYW1lfX0ge3suRmlyc3ROYW1lfX0ge3suTGFzdE5hbWV9fSB7ey5OaWNrTmFtZX19IHt7LkRpc3BsYXlOYW1lfX0ge3suTGFzdEVtYWlsfX0ge3suVmVyaWZpZWRFbWFpbH19IHt7Lkxhc3RQaG9uZX19IHt7LlZlcmlmaWVkUGhvbmV9fSB7ey5QcmVmZXJyZWRMb2dpbk5hbWV9fSB7ey5Mb2dpbk5hbWVzfX0ge3suQ2hhbmdlRGF0ZX19IHt7LkNyZWF0aW9uRGF0ZX19IHt7LkFwcGxpY2F0aW9uTmFtZX19grUYEgoQaWFtLnBvbGljeS53cml0ZYLT5JMCKToBKhokL3RleHQvbWVzc2FnZS9pbnZpdGVfdXNlci97bGFuZ3VhZ2V9EscECilSZXNldEN1c3RvbUludml0ZVVzZXJNZXNzYWdlVGV4dFRvRGVmYXVsdBJCLnppdGFkZWwuYWRtaW4udjEuUmVzZXRDdXN0b21JbnZpdGVVc2VyTWVzc2FnZVRleHRUb0RlZmF1bHRSZXF1ZXN0GkMueml0YWRlbC5hZG1pbi52MS5SZXNldEN1c3RvbUludml0ZVVzZXJNZXNzYWdlVGV4dFRvRGVmYXVsdFJlc3BvbnNlIpADkkHJAgoNTWVzc2FnZSBUZXh0cxIwUmVzZXQgQ3VzdG9tIEludml0ZSBVc2VyIE1lc3NhZ2UgVGV4dCB0byBEZWZhdWx0GoUCUmVtb3ZlcyB0aGUgY3VzdG9tIHRleHQgb2YgdGhlIGludml0ZSB1c2VyIG1lc3NhZ2UgdGhhdCBpcyBvdmVyd3JpdHRlbiBvbiB0aGUgaW5zdGFuY2UgYW5kIHRyaWdnZXJzIHRoZSB0ZXh0IGZyb20gdGhlIHRyYW5zbGF0aW9uIGZpbGVzIHN0b3JlZCBpbiBaSVRBREVMIGl0c2VsZi4gVGhlIHRleHQgd2lsbCBiZSBzZW50IHRvIHRoZSB1c2VycyBvZiBhbGwgb3JnYW5pemF0aW9ucywgdGhhdCBkbyBub3QgaGF2ZSBhIGN1c3RvbSB0ZXh0IGNvbmZpZ3VyZWQugrUYEwoRaWFtLnBvbGljeS5kZWxldGWC0+STAiYqJC90ZXh0L21lc3NhZ2UvaW52aXRlX3VzZXIve2xhbmd1YWdlfRK8AwoUR2V0RGVmYXVsdExvZ2luVGV4dHMSLS56aXRhZGVsLmFkbWluLnYxLkdldERlZmF1bHRMb2dpblRleHRzUmVxdWVzdBouLnppdGFkZWwuYWRtaW4udjEuR2V0RGVmYXVsdExvZ2luVGV4dHNSZXNwb25zZSLEApJBhQIKC0xvZ2luIFRleHRzEhZHZXQgRGVmYXVsdCBMb2dpbiBUZXh0Gt0BR2V0IHRoZSBkZWZhdWx0IHRleHRzIGZvciB0aGUgbG9naW4gYW5kIHJlZ2lzdGVyIFVJIG9mIFpJVEFERUwsIHdoaWNoIGFyZSBzdG9yZWQgYXMgdHJhbnNsYXRpb24gZmlsZXMgaW4gWklUQURFTCBpdHNlbGYuIFRoZSB0ZXh0IHdpbGwgYmUgc2hvd24gdG8gdGhlIHVzZXJzIG9mIGFsbCBvcmdhbml6YXRpb25zLCB0aGF0IGRvIG5vdCBoYXZlIGEgY3VzdG9tIHRleHQgY29uZmlndXJlZC6CtRgRCg9pYW0ucG9saWN5LnJlYWSC0+STAiASHi90ZXh0L2RlZmF1bHQvbG9naW4ve2xhbmd1YWdlfRKxAwoTR2V0Q3VzdG9tTG9naW5UZXh0cxIsLnppdGFkZWwuYWRtaW4udjEuR2V0Q3VzdG9tTG9naW5UZXh0c1JlcXVlc3QaLS56aXRhZGVsLmFkbWluLnYxLkdldEN1c3RvbUxvZ2luVGV4dHNSZXNwb25zZSK8ApJBhQIKC0xvZ2luIFRleHRzEhVHZXQgQ3VzdG9tIExvZ2luIFRleHQa3gFHZXQgdGhlIGN1c3RvbSB0ZXh0cyBmb3IgdGhlIGxvZ2luIGFuZCByZWdpc3RlciBVSSBvZiBaSVRBREVMLCB3aGljaCBpcyBvdmVyd3JpdHRlbiBvbiB0aGUgaW5zdGFuY2UgYXMgc2V0dGluZ3MvZGF0YWJhc2UuIFRoZSB0ZXh0IHdpbGwgYmUgc2hvd24gdG8gdGhlIHVzZXJzIG9mIGFsbCBvcmdhbml6YXRpb25zLCB0aGF0IGRvIG5vdCBoYXZlIGEgY3VzdG9tIHRleHQgY29uZmlndXJlZC6CtRgRCg9pYW0ucG9saWN5LnJlYWSC0+STAhgSFi90ZXh0L2xvZ2luL3tsYW5ndWFnZX0StQMKElNldEN1c3RvbUxvZ2luVGV4dBIsLnppdGFkZWwuYWRtaW4udjEuU2V0Q3VzdG9tTG9naW5UZXh0c1JlcXVlc3QaLS56aXRhZGVsLmFkbWluLnYxLlNldEN1c3RvbUxvZ2luVGV4dHNSZXNwb25zZSLBApJBhgIKC0xvZ2luIFRleHRzEhZTZXQgRGVmYXVsdCBMb2dpbiBUZXh0Gt4BU2V0IHRoZSBjdXN0b20gdGV4dHMgZm9yIHRoZSBsb2dpbiBhbmQgcmVnaXN0ZXIgVUkgb2YgWklUQURFTCwgd2hpY2ggaXMgb3ZlcndyaXR0ZW4gb24gdGhlIGluc3RhbmNlIGFzIHNldHRpbmdzL2RhdGFiYXNlLiBUaGUgdGV4dCB3aWxsIGJlIHNob3duIHRvIHRoZSB1c2VycyBvZiBhbGwgb3JnYW5pemF0aW9ucywgdGhhdCBkbyBub3QgaGF2ZSBhIGN1c3RvbSB0ZXh0IGNvbmZpZ3VyZWQugrUYEgoQaWFtLnBvbGljeS53cml0ZYLT5JMCGzoBKhoWL3RleHQvbG9naW4ve2xhbmd1YWdlfRKZBAodUmVzZXRDdXN0b21Mb2dpblRleHRUb0RlZmF1bHQSNy56aXRhZGVsLmFkbWluLnYxLlJlc2V0Q3VzdG9tTG9naW5UZXh0c1RvRGVmYXVsdFJlcXVlc3QaOC56aXRhZGVsLmFkbWluLnYxLlJlc2V0Q3VzdG9tTG9naW5UZXh0c1RvRGVmYXVsdFJlc3BvbnNlIoQDkkHLAgoLTG9naW4gVGV4dHMSIlJlc2V0IEN1c3RvbSBMb2dpbiBUZXh0IHRvIERlZmF1bHQalwJSZW1vdmVzIHRoZSBjdXN0b20gdGV4dHMgZm9yIHRoZSBsb2dpbiBhbmQgcmVnaXN0ZXIgVUkgb2YgWklUQURFTCwgd2hpY2ggaXMgb3ZlcndyaXR0ZW4gb24gdGhlIGluc3RhbmNlIGFuZCB0cmlnZ2VycyB0aGUgdGV4dCBmcm9tIHRoZSB0cmFuc2xhdGlvbiBmaWxlcyBzdG9yZWQgaW4gWklUQURFTCBpdHNlbGYuIFRoZSB0ZXh0IHdpbGwgYmUgc2hvd24gdG8gdGhlIHVzZXJzIG9mIGFsbCBvcmdhbml6YXRpb25zLCB0aGF0IGRvIG5vdCBoYXZlIGEgY3VzdG9tIHRleHQgY29uZmlndXJlZC6CtRgTChFpYW0ucG9saWN5LmRlbGV0ZYLT5JMCGCoWL3RleHQvbG9naW4ve2xhbmd1YWdlfRKtAwoSTGlzdElBTU1lbWJlclJvbGVzEisueml0YWRlbC5hZG1pbi52MS5MaXN0SUFNTWVtYmVyUm9sZXNSZXF1ZXN0Giwueml0YWRlbC5hZG1pbi52MS5MaXN0SUFNTWVtYmVyUm9sZXNSZXNwb25zZSK7ApJBhAIKB01lbWJlcnMKFlpJVEFERUwgQWRtaW5pc3RyYXRvcnMSFUxpc3QgSUFNIE1lbWJlciBSb2xlcxqiAU1lbWJlcnMgYXJlIHVzZXJzIHdpdGggcGVybWlzc2lvbiB0byBhZG1pbmlzdHJhdGUgWklUQURFTCBvbiBkaWZmZXJlbnQgbGV2ZWxzLiBUaGlzIHJlcXVlc3QgcmV0dXJucyBhbGwgcm9sZXMgcG9zc2libGUgZm9yIGEgWklUQURFTCBtZW1iZXIgb24gdGhlIGluc3RhbmNlIGxldmVsLkolCgMyMDASHgoccm9sZXMgb24gdGhlIElBTSBvZiB0aGUgdXNlcoK1GBEKD2lhbS5tZW1iZXIucmVhZILT5JMCGCIWL21lbWJlcnMvcm9sZXMvX3NlYXJjaBLGAwoOTGlzdElBTU1lbWJlcnMSJy56aXRhZGVsLmFkbWluLnYxLkxpc3RJQU1NZW1iZXJzUmVxdWVzdBooLnppdGFkZWwuYWRtaW4udjEuTGlzdElBTU1lbWJlcnNSZXNwb25zZSLgApJBrAIKB01lbWJlcnMKFlpJVEFERUwgQWRtaW5pc3RyYXRvcnMSEExpc3QgSUFNIE1lbWJlcnMa2QFNZW1iZXJzIGFyZSB1c2VycyB3aXRoIHBlcm1pc3Npb24gdG8gYWRtaW5pc3RyYXRlIFpJVEFERUwgb24gZGlmZmVyZW50IGxldmVscy4gVGhpcyByZXF1ZXN0IHJldHVybnMgYWxsIHVzZXJzIHdpdGggbWVtYmVyc2hpcHMgb24gdGhlIGluc3RhbmNlIGxldmVsLCBtYXRjaGluZyB0aGUgc2VhcmNoIHF1ZXJpZXMuIFRoZSBzZWFyY2ggcXVlcmllcyB3aWxsIGJlIEFORCBsaW5rZWQuShsKAzIwMBIUChJtZW1iZXJzIG9mIHRoZSBJQU2CtRgRCg9pYW0ubWVtYmVyLnJlYWSC0+STAhU6ASoiEC9tZW1iZXJzL19zZWFyY2gSxQMKDEFkZElBTU1lbWJlchIlLnppdGFkZWwuYWRtaW4udjEuQWRkSUFNTWVtYmVyUmVxdWVzdBomLnppdGFkZWwuYWRtaW4udjEuQWRkSUFNTWVtYmVyUmVzcG9uc2Ui5QKSQbgCCgdNZW1iZXJzChZaSVRBREVMIEFkbWluaXN0cmF0b3JzEg5BZGQgSUFNIE1lbWJlchqbAU1lbWJlcnMgYXJlIHVzZXJzIHdpdGggcGVybWlzc2lvbiB0byBhZG1pbmlzdHJhdGUgWklUQURFTCBvbiBkaWZmZXJlbnQgbGV2ZWxzLiBUaGlzIHJlcXVlc3QgYWRkcyBhIG5ldyB1c2VyIHRvIHRoZSBtZW1iZXJzIGxpc3Qgd2l0aCBvbmUgb3IgbXVsdGlwbGUgcm9sZXMuSiAKAzIwMBIZChdNZW1iZXIgYWRkZWQgdG8gdGhlIElBTUpFCgM0MDASPgofdXNlciBub3QgZm91bmQgb3IgaW52YWxpZCByb2xlcxIbChkaFyMvZGVmaW5pdGlvbnMvcnBjU3RhdHVzgrUYEgoQaWFtLm1lbWJlci53cml0ZYLT5JMCDToBKiIIL21lbWJlcnMSpQQKD1VwZGF0ZUlBTU1lbWJlchIoLnppdGFkZWwuYWRtaW4udjEuVXBkYXRlSUFNTWVtYmVyUmVxdWVzdBopLnppdGFkZWwuYWRtaW4udjEuVXBkYXRlSUFNTWVtYmVyUmVzcG9uc2UivAOSQYUDCgdNZW1iZXJzChZaSVRBREVMIEFkbWluaXN0cmF0b3JzEhFVcGRhdGUgSUFNIE1lbWJlchrtAU1lbWJlcnMgYXJlIHVzZXJzIHdpdGggcGVybWlzc2lvbiB0byBhZG1pbmlzdHJhdGUgWklUQURFTCBvbiBkaWZmZXJlbnQgbGV2ZWxzLiBUaGlzIHJlcXVlc3QgY2hhbmdlcyB0aGUgcm9sZXMgb2YgYW4gZXhpc3RpbmcgbWVtYmVyLiBUaGUgd2hvbGUgcm9sZXMgbGlzdCB3aWxsIGJlIHVwZGF0ZWQuIE1ha2Ugc3VyZSB0byBpbmNsdWRlIHJvbGVzIHRoYXQgeW91IGRvbid0IHdhbnQgdG8gY2hhbmdlIChyZW1vdmUpLkoiCgMyMDASGwoZTWVtYmVyIG9mIHRoZSBJQU0gdXBkYXRlZEo7CgM0MDASNAoVaW52YWxpZCB1c2VyIG9yIHJvbGVzEhsKGRoXIy9kZWZpbml0aW9ucy9ycGNTdGF0dXOCtRgSChBpYW0ubWVtYmVyLndyaXRlgtPkkwIXOgEqGhIvbWVtYmVycy97dXNlcl9pZH0SigQKD1JlbW92ZUlBTU1lbWJlchIoLnppdGFkZWwuYWRtaW4udjEuUmVtb3ZlSUFNTWVtYmVyUmVxdWVzdBopLnppdGFkZWwuYWRtaW4udjEuUmVtb3ZlSUFNTWVtYmVyUmVzcG9uc2UioQOSQewCCgdNZW1iZXJzChZaSVRBREVMIEFkbWluaXN0cmF0b3JzEhFSZW1vdmUgSUFNIE1lbWJlchrdAU1lbWJlcnMgYXJlIHVzZXJzIHdpdGggcGVybWlzc2lvbiB0byBhZG1pbmlzdHJhdGUgWklUQURFTCBvbiBkaWZmZXJlbnQgbGV2ZWxzLiBUaGlzIHJlcXVlc3QgcmVtb3ZlcyBhIHVzZXIgZnJvbSB0aGUgbWVtYmVycyBsaXN0IG9uIGFuIGluc3RhbmNlIGxldmVsLiBUaGUgdXNlciBjYW4gc3RpbGwgaGF2ZSByb2xlcyBvbiBhbm90aGVyIGxldmVsIChvcmdhbml6YXRpb24sIHByb2plY3QpSiIKAzIwMBIbChlNZW1iZXIgb2YgdGhlIElBTSByZW1vdmVkSjIKAzQwMBIrCgxpbnZhbGlkIHVzZXISGwoZGhcjL2RlZmluaXRpb25zL3JwY1N0YXR1c4K1GBMKEWlhbS5tZW1iZXIuZGVsZXRlgtPkkwIUKhIvbWVtYmVycy97dXNlcl9pZH0SiAMKCUxpc3RWaWV3cxIiLnppdGFkZWwuYWRtaW4udjEuTGlzdFZpZXdzUmVxdWVzdBojLnppdGFkZWwuYWRtaW4udjEuTGlzdFZpZXdzUmVzcG9uc2UisQKSQYkCChFWaWV3cy9Qcm9qZWN0aW9ucxIWTGlzdCBWaWV3cy9Qcm9qZWN0aW9ucxq2AVJldHVybnMgYWxsIHN0b3JlZCByZWFkIG1vZGVscyBvZiBaSVRBREVMLiBWaWV3cyBhcmUgdXNlZCBmb3Igc2VhcmNoIG9wdGltaXphdGlvbiBhbmQgb3B0aW1pemluZyByZXF1ZXN0IGxhdGVuY2llcy4gVGhleSByZXByZXNlbnQgdGhlIGRlbHRhIG9mIHRoZSBldmVudCB0aGF0IGhhcHBlbmVkIG9uIHRoZSBvYmplY3RzSiMKAzIwMBIcChpWaWV3cyBmb3IgcXVlcnkgb3BlcmF0aW9uc4K1GAoKCGlhbS5yZWFkgtPkkwIQIg4vdmlld3MvX3NlYXJjaBLEAwoQTGlzdEZhaWxlZEV2ZW50cxIpLnppdGFkZWwuYWRtaW4udjEuTGlzdEZhaWxlZEV2ZW50c1JlcXVlc3QaKi56aXRhZGVsLmFkbWluLnYxLkxpc3RGYWlsZWRFdmVudHNSZXNwb25zZSLYApJBqQIKDUZhaWxlZCBFdmVudHMSEkxpc3QgRmFpbGVkIEV2ZW50cxrMAVJldHVybnMgYSBsaXN0IG9mIGV2ZW50cyB0aGF0IGNvdWxkIG5vdCBiZSBwcm9jZWVkZWQgaW4gdGhlIHZpZXdzL3Byb2plY3Rpb25zLiBTb21lIGV2ZW50cyBuZWVkIHNldmVyYWwgcmV0cmllcyB0aWxsIHRoZXkgc3VjY2VlZC4gRm9yIGV4YW1wbGUsIGlmIHRoZSBTTVRQLUFQSSB3YXNuJ3QgYWJsZSB0byBzZW5kIGFuIGVtYWlsIHRoZSBmaXJzdCB0aW1lLko1CgMyMDASLgosRXZlbnRzIHdoaWNoIHdlcmUgbm90IHByb2Nlc3NlZCBieSB0aGUgdmlld3OCtRgKCghpYW0ucmVhZILT5JMCFyIVL2ZhaWxlZGV2ZW50cy9fc2VhcmNoEoYFChFSZW1vdmVGYWlsZWRFdmVudBIqLnppdGFkZWwuYWRtaW4udjEuUmVtb3ZlRmFpbGVkRXZlbnRSZXF1ZXN0Gisueml0YWRlbC5hZG1pbi52MS5SZW1vdmVGYWlsZWRFdmVudFJlc3BvbnNlIpcEkkHGAwoNRmFpbGVkIEV2ZW50cxIUUmVtb3ZlIEZhaWxlZCBFdmVudHMauQJSZW1vdmVzIHRoZSBldmVudCBmcm9tIHRoZSBmYWlsZWQgZXZlbnMgdmlldywgYnV0IG5vdCBmcm9tIHRoZSBjaGFuZ2Ugc3RyZWFtLiBUaGlzIGNhbGwgaXMgdXNlZnVsIGlmIHRoZSBzeXN0ZW0gd2FzIGFibGUgdG8gcHJvY2VzcyB0aGUgZXZlbnQgYWZ0ZXIgc29tZSByZXRyaWVzLiBlLmcuIGlmIHRoZSBzZWNvbmQgdHJ5IG9mIHNlbmRpbmcgYW4gZW1haWwgd2FzIHN1Y2Nlc3NmdWwuIHRoZSBmaXJzdCB0cnkgcHJvZHVjZWQgYSBmYWlsZWQgZXZlbnQuIFlvdSBjYW4gZmluZCBvdXQgaWYgaXQgd29ya2VkIG9uIHRoZSBgZmFpbHVyZV9jb3VudGAgSiUKAzIwMBIeChxFdmVudHMgcmVtb3ZlZCBmcm9tIHRoZSBsaXN0SjwKAzQwMBI1ChZmYWlsZWQgZXZlbnQgbm90IGZvdW5kEhsKGRoXIy9kZWZpbml0aW9ucy9ycGNTdGF0dXOCtRgLCglpYW0ud3JpdGWC0+STAjgqNi9mYWlsZWRldmVudHMve2RhdGFiYXNlfS97dmlld19uYW1lfS97ZmFpbGVkX3NlcXVlbmNlfRLGAgoKSW1wb3J0RGF0YRIjLnppdGFkZWwuYWRtaW4udjEuSW1wb3J0RGF0YVJlcXVlc3QaJC56aXRhZGVsLmFkbWluLnYxLkltcG9ydERhdGFSZXNwb25zZSLsAZJBxwEKDUltcG9ydC9FeHBvcnQSC0ltcG9ydCBEYXRhGqgBSW1wb3J0IGRhdGEgb24gYW4gaW5zdGFuY2UgbGV2ZWwgdG8gWklUQURFTC4gSXQgY2FuIGJlIGVpdGhlciBkaXJlY3RseSBpbiB0aGUgcmVxdWVzdCBvciB5b3UgY2FuIHBvaW50IHRvIGEgZmlsZSBvbiBhbiBTMyBzdG9yYWdlLCBmcm9tIHdoaWNoIHRoZSBkYXRhIHNob3VsZCBiZSBsb2FkZWQugrUYCwoJaWFtLndyaXRlgtPkkwIMOgEqIgcvaW1wb3J0EssCCgpFeHBvcnREYXRhEiMueml0YWRlbC5hZG1pbi52MS5FeHBvcnREYXRhUmVxdWVzdBokLnppdGFkZWwuYWRtaW4udjEuRXhwb3J0RGF0YVJlc3BvbnNlIvEBkkHNAQoNSW1wb3J0L0V4cG9ydBILRXhwb3J0IERhdGEargFFeHBvcnQgZGF0YSBvbiBhbiBpbnN0YW5jZSBsZXZlbCB0byBaSVRBREVMLiBJdCBjYW4gYmUgZWl0aGVyIGRpcmVjdGx5IGV4cG9ydGVkIGluIHRoZSByZXNwb25zZSBvciB5b3UgY2FuIHBvaW50IHRvIGEgZmlsZSBvbiBhbiBTMyBzdG9yYWdlLCB3aGVyZSB0aGUgZGF0YSBzaG91bGQgYmUgd3JpdHRlbi6CtRgKCghpYW0ucmVhZILT5JMCDDoBKiIHL2V4cG9ydBKrAgoOTGlzdEV2ZW50VHlwZXMSJy56aXRhZGVsLmFkbWluLnYxLkxpc3RFdmVudFR5cGVzUmVxdWVzdBooLnppdGFkZWwuYWRtaW4udjEuTGlzdEV2ZW50VHlwZXNSZXNwb25zZSLFAZJBkAEKBkV2ZW50cxILRXZlbnQgdHlwZXMaeVJldHVybnMgYSBsaXN0IG9mIHRoZSBwb3NzaWJsZSBldmVudCB0eXBlcyBpbiBaSVRBREVMLiBUaGlzIGlzIHVzZWQgdG8gZmlsdGVyIHRoZSBldmVudCB0eXBlcyBpbiB0aGUgbGlzdCBldmVudHMgcmVxdWVzdC6CtRgNCgtldmVudHMucmVhZILT5JMCGjoBKiIVL2V2ZW50cy90eXBlcy9fc2VhcmNoEpsCCgpMaXN0RXZlbnRzEiMueml0YWRlbC5hZG1pbi52MS5MaXN0RXZlbnRzUmVxdWVzdBokLnppdGFkZWwuYWRtaW4udjEuTGlzdEV2ZW50c1Jlc3BvbnNlIsEBkkGSAQoGRXZlbnRzEg1TZWFyY2ggRXZlbnRzGnlSZXR1cm5zIGEgbGlzdCBvZiB0aGUgcG9zc2libGUgZXZlbnQgdHlwZXMgaW4gWklUQURFTC4gVGhpcyBpcyB1c2VkIHRvIGZpbHRlciB0aGUgZXZlbnQgdHlwZXMgaW4gdGhlIGxpc3QgZXZlbnRzIHJlcXVlc3QugrUYDQoLZXZlbnRzLnJlYWSC0+STAhQ6ASoiDy9ldmVudHMvX3NlYXJjaBLNAgoSTGlzdEFnZ3JlZ2F0ZVR5cGVzEisueml0YWRlbC5hZG1pbi52MS5MaXN0QWdncmVnYXRlVHlwZXNSZXF1ZXN0Giwueml0YWRlbC5hZG1pbi52MS5MaXN0QWdncmVnYXRlVHlwZXNSZXNwb25zZSLbAZJBogEKBkV2ZW50cxIUTGlzdCBBZ2dyZWdhdGUgVHlwZXMagQFSZXR1cm5zIGEgbGlzdCBvZiB0aGUgcG9zc2libGUgYWdncmVnYXRlIHR5cGVzIGluIFpJVEFERUwuIFRoaXMgaXMgdXNlZCB0byBmaWx0ZXIgdGhlIGFnZ3JlZ2F0ZSB0eXBlcyBpbiB0aGUgbGlzdCBldmVudHMgcmVxdWVzdC6CtRgNCgtldmVudHMucmVhZILT5JMCHjoBKiIZL2FnZ3JlZ2F0ZXMvdHlwZXMvX3NlYXJjaBLPAQoeQWN0aXZhdGVGZWF0dXJlTG9naW5EZWZhdWx0T3JnEjcueml0YWRlbC5hZG1pbi52MS5BY3RpdmF0ZUZlYXR1cmVMb2dpbkRlZmF1bHRPcmdSZXF1ZXN0Gjgueml0YWRlbC5hZG1pbi52MS5BY3RpdmF0ZUZlYXR1cmVMb2dpbkRlZmF1bHRPcmdSZXNwb25zZSI6grUYEwoRaWFtLmZlYXR1cmUud3JpdGWC0+STAh0aGy9mZWF0dXJlcy9sb2dpbl9kZWZhdWx0X29yZxLxAQoOTGlzdE1pbGVzdG9uZXMSJy56aXRhZGVsLmFkbWluLnYxLkxpc3RNaWxlc3RvbmVzUmVxdWVzdBooLnppdGFkZWwuYWRtaW4udjEuTGlzdE1pbGVzdG9uZXNSZXNwb25zZSKLAZJBVQoKTWlsZXN0b25lcxIRU2VhcmNoIE1pbGVzdG9uZXMaNFJldHVybnMgYSBsaXN0IG9mIHJlYWNoZWQgaW5zdGFuY2UgdXNhZ2UgbWlsZXN0b25lcy6CtRgRCg9taWxlc3RvbmVzLnJlYWSC0+STAhg6ASoiEy9taWxlc3RvbmVzL19zZWFyY2gS/QIKD1NldFJlc3RyaWN0aW9ucxIoLnppdGFkZWwuYWRtaW4udjEuU2V0UmVzdHJpY3Rpb25zUmVxdWVzdBopLnppdGFkZWwuYWRtaW4udjEuU2V0UmVzdHJpY3Rpb25zUmVzcG9uc2UilAKSQdwBChRGZWF0dXJlIFJlc3RyaWN0aW9ucxIfUmVzdHJpY3QgdGhlIGluc3RhbmNlcyBmZWF0dXJlcxpiVW5kZWZpbmVkIHZhbHVlcyBkb24ndCBjaGFuZ2UgdGhlIGN1cnJlbnQgcmVzdHJpY3Rpb24uIFplcm8gdmFsdWVzIHJlbW92ZSB0aGUgY3VycmVudCByZXN0cmljdGlvbi5KGgoDMjAwEhMKEVJlc3RyaWN0aW9ucyBzZXQuSiMKAzQwMBIcChpObyByZXN0cmljdGlvbiBpcyBkZWZpbmVkLoK1GBgKFmlhbS5yZXN0cmljdGlvbnMud3JpdGWC0+STAhI6ASoaDS9yZXN0cmljdGlvbnMSsgQKD0dldFJlc3RyaWN0aW9ucxIoLnppdGFkZWwuYWRtaW4udjEuR2V0UmVzdHJpY3Rpb25zUmVxdWVzdBopLnppdGFkZWwuYWRtaW4udjEuR2V0UmVzdHJpY3Rpb25zUmVzcG9uc2UiyQOSQZUDChRGZWF0dXJlIFJlc3RyaWN0aW9ucxI1R2V0IHRoZSBjdXJyZW50IGZlYXR1cmUgcmVzdHJpY3Rpb25zIGZvciB0aGUgaW5zdGFuY2UawgFVbmRlZmluZWQgdmFsdWVzIG1lYW4gdGhhdCB0aGUgZmVhdHVyZSBpcyBub3QgcmVzdHJpY3RlZC4gSWYgcmVzdHJpY3Rpb25zIHdlcmUgbmV2ZXIgc2V0LCB0aGUgaW5zdGFuY2VzIGZlYXR1cmVzIGFyZSBub3QgcmVzdHJpY3RlZCwgYWxsIHByb3BlcnRpZXMgYXJlIHVuZGVmaW5lZCBhbmQgdGhlIGRldGFpbHMgb2JqZWN0IGlzIGVtcHR5LkqAAQoDMjAwEnkKd1RoZSBzdGF0dXMgMjAwIGlzIGFsc28gcmV0dXJuZWQgaWYgbm8gcmVzdHJpY3Rpb25zIHdlcmUgZXZlciBzZXQuIEluIHRoaXMgY2FzZSwgYWxsIGZlYXR1cmUgcmVzdHJpY3Rpb25zIGFyZSB1bmRlZmluZWQugrUYFwoVaWFtLnJlc3RyaWN0aW9ucy5yZWFkgtPkkwIPEg0vcmVzdHJpY3Rpb25zQpENChRjb20ueml0YWRlbC5hZG1pbi52MUIKQWRtaW5Qcm90b1ABWilnaXRodWIuY29tL3ppdGFkZWwveml0YWRlbC9wa2cvZ3JwYy9hZG1pbqICA1pBWKoCEFppdGFkZWwuQWRtaW4uVjHKAhBaaXRhZGVsXEFkbWluXFYx4gIcWml0YWRlbFxBZG1pblxWMVxHUEJNZXRhZGF0YeoCElppdGFkZWw6OkFkbWluOjpWMZJB3gsS4wEKHEFkbWluaXN0cmF0aW9uIEFQSSBha2EgQWRtaW4SRVRoaXMgQVBJIGlzIGludGVuZGVkIHRvIGNvbmZpZ3VyZSBhbmQgbWFuYWdlIHRoZSBJQU0gaW5zdGFuY2UgaXRzZWxmLiIuCgdaSVRBREVMEhNodHRwczovL3ppdGFkZWwuY29tGg5oaUB6aXRhZGVsLmNvbSpHCgpBcGFjaGUgMi4wEjlodHRwczovL2dpdGh1Yi5jb20veml0YWRlbC96aXRhZGVsL2Jsb2IvbWFpbi9MSUNFTlNJTkcubWQyAzEuMBoOJENVU1RPTS1ET01BSU4iCS9hZG1pbi92MSoCAgEyEGFwcGxpY2F0aW9uL2pzb24yEGFwcGxpY2F0aW9uL2dycGMyGmFwcGxpY2F0aW9uL2dycGMtd2ViK3Byb3RvOhBhcHBsaWNhdGlvbi9qc29uOhBhcHBsaWNhdGlvbi9ncnBjOhphcHBsaWNhdGlvbi9ncnBjLXdlYitwcm90b1JtCgM0MDMSZgpHUmV0dXJuZWQgd2hlbiB0aGUgdXNlciBkb2VzIG5vdCBoYXZlIHBlcm1pc3Npb24gdG8gYWNjZXNzIHRoZSByZXNvdXJjZS4SGwoZGhcjL2RlZmluaXRpb25zL3JwY1N0YXR1c1JQCgM0MDQSSQoqUmV0dXJuZWQgd2hlbiB0aGUgcmVzb3VyY2UgZG9lcyBub3QgZXhpc3QuEhsKGRoXIy9kZWZpbml0aW9ucy9ycGNTdGF0dXNa0wEKDwoJQmFzaWNBdXRoEgIIAQq/AQoGT0F1dGgyErQBCAMoBDIhJENVU1RPTS1ET01BSU4vb2F1dGgvdjIvYXV0aG9yaXplOh0kQ1VTVE9NLURPTUFJTi9vYXV0aC92Mi90b2tlbkJsChAKBm9wZW5pZBIGb3BlbmlkClgKKnVybjp6aXRhZGVsOmlhbTpvcmc6cHJvamVjdDppZDp6aXRhZGVsOmF1ZBIqdXJuOnppdGFkZWw6aWFtOm9yZzpwcm9qZWN0OmlkOnppdGFkZWw6YXVkYkAKPgoGT0F1dGgyEjQKBm9wZW5pZAoqdXJuOnppdGFkZWw6aWFtOm9yZzpwcm9qZWN0OmlkOnppdGFkZWw6YXVkahgKFkF1dGhlbnRpY2F0aW9uIE1ldGhvZHNqlwEKCEJyYW5kaW5nEooBRGVmaW5lcyB0aGUgbG9vayBvZiB0aGUgbG9naW4gVUksIEUtTWFpbHMsIGFuZCBaSVRBREVMIENvbnNvbGUuIEZvciBhZGRpbmcgYXNzZXRzIGxpa2UgbG9nbywgaWNvbiBhbmQgZm9udCwgaGF2ZSBhIGxvb2sgYXQgdGhlIGFzc2V0cyBBUEkuahEKD0RvbWFpbiBTZXR0aW5nc2oICgZFdmVudHNqDwoNRmFpbGVkIEV2ZW50c2oWChRGZWF0dXJlIFJlc3RyaWN0aW9uc2oJCgdHZW5lcmFsahQKEklkZW50aXR5IFByb3ZpZGVyc2oPCg1JbXBvcnQvRXhwb3J0agoKCEluc3RhbmNlahAKDkxvZ2luIFNldHRpbmdzag0KC0xvZ2luIFRleHRzagkKB01lbWJlcnNqDwoNTWVzc2FnZSBUZXh0c2oYChZOb3RpZmljYXRpb24gUHJvdmlkZXJzahcKFU5vdGlmaWNhdGlvbiBTZXR0aW5nc2oPCg1Pcmdhbml6YXRpb25zahMKEVBhc3N3b3JkIFNldHRpbmdzahIKEFByaXZhY3kgU2V0dGluZ3NqCQoHU2VjcmV0c2oOCgxTTVMgUHJvdmlkZXJqBgoEU01UUGoKCghTZXR0aW5nc2oTChFWaWV3cy9Qcm9qZWN0aW9uc2oYChZaSVRBREVMIEFkbWluaXN0cmF0b3Jzcj4KIkRldGFpbGVkIGluZm9ybWF0aW9uIGFib3V0IFpJVEFERUwSGGh0dHBzOi8veml0YWRlbC5jb20vZG9jc2IGcHJvdG8z", [file_zitadel_idp, file_zitadel_instance, file_zitadel_user, file_zitadel_object, file_zitadel_options, file_zitadel_org, file_zitadel_policy, file_zitadel_settings, file_zitadel_text, file_zitadel_member, file_zitadel_event, file_zitadel_management, file_zitadel_v1, file_zitadel_message, file_zitadel_milestone_v1_milestone, file_google_api_annotations, file_google_api_field_behavior, file_google_protobuf_timestamp, file_google_protobuf_duration, file_protoc_gen_openapiv2_options_annotations, file_validate_validate]);

/**
 * Describes the message zitadel.admin.v1.HealthzRequest.
 * Use `create(HealthzRequestSchema)` to create a new message.
 */
export const HealthzRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 0);

/**
 * Describes the message zitadel.admin.v1.HealthzResponse.
 * Use `create(HealthzResponseSchema)` to create a new message.
 */
export const HealthzResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 1);

/**
 * Describes the message zitadel.admin.v1.GetSupportedLanguagesRequest.
 * Use `create(GetSupportedLanguagesRequestSchema)` to create a new message.
 */
export const GetSupportedLanguagesRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 2);

/**
 * Describes the message zitadel.admin.v1.GetSupportedLanguagesResponse.
 * Use `create(GetSupportedLanguagesResponseSchema)` to create a new message.
 */
export const GetSupportedLanguagesResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 3);

/**
 * Describes the message zitadel.admin.v1.GetAllowedLanguagesRequest.
 * Use `create(GetAllowedLanguagesRequestSchema)` to create a new message.
 */
export const GetAllowedLanguagesRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 4);

/**
 * Describes the message zitadel.admin.v1.GetAllowedLanguagesResponse.
 * Use `create(GetAllowedLanguagesResponseSchema)` to create a new message.
 */
export const GetAllowedLanguagesResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 5);

/**
 * Describes the message zitadel.admin.v1.SetDefaultLanguageRequest.
 * Use `create(SetDefaultLanguageRequestSchema)` to create a new message.
 */
export const SetDefaultLanguageRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 6);

/**
 * Describes the message zitadel.admin.v1.SetDefaultLanguageResponse.
 * Use `create(SetDefaultLanguageResponseSchema)` to create a new message.
 */
export const SetDefaultLanguageResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 7);

/**
 * Describes the message zitadel.admin.v1.GetDefaultLanguageRequest.
 * Use `create(GetDefaultLanguageRequestSchema)` to create a new message.
 */
export const GetDefaultLanguageRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 8);

/**
 * Describes the message zitadel.admin.v1.GetDefaultLanguageResponse.
 * Use `create(GetDefaultLanguageResponseSchema)` to create a new message.
 */
export const GetDefaultLanguageResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 9);

/**
 * Describes the message zitadel.admin.v1.SetDefaultOrgRequest.
 * Use `create(SetDefaultOrgRequestSchema)` to create a new message.
 */
export const SetDefaultOrgRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 10);

/**
 * Describes the message zitadel.admin.v1.SetDefaultOrgResponse.
 * Use `create(SetDefaultOrgResponseSchema)` to create a new message.
 */
export const SetDefaultOrgResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 11);

/**
 * Describes the message zitadel.admin.v1.GetDefaultOrgRequest.
 * Use `create(GetDefaultOrgRequestSchema)` to create a new message.
 */
export const GetDefaultOrgRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 12);

/**
 * Describes the message zitadel.admin.v1.GetDefaultOrgResponse.
 * Use `create(GetDefaultOrgResponseSchema)` to create a new message.
 */
export const GetDefaultOrgResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 13);

/**
 * Describes the message zitadel.admin.v1.GetMyInstanceRequest.
 * Use `create(GetMyInstanceRequestSchema)` to create a new message.
 */
export const GetMyInstanceRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 14);

/**
 * Describes the message zitadel.admin.v1.GetMyInstanceResponse.
 * Use `create(GetMyInstanceResponseSchema)` to create a new message.
 */
export const GetMyInstanceResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 15);

/**
 * Describes the message zitadel.admin.v1.ListInstanceDomainsRequest.
 * Use `create(ListInstanceDomainsRequestSchema)` to create a new message.
 */
export const ListInstanceDomainsRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 16);

/**
 * Describes the message zitadel.admin.v1.ListInstanceDomainsResponse.
 * Use `create(ListInstanceDomainsResponseSchema)` to create a new message.
 */
export const ListInstanceDomainsResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 17);

/**
 * Describes the message zitadel.admin.v1.ListInstanceTrustedDomainsRequest.
 * Use `create(ListInstanceTrustedDomainsRequestSchema)` to create a new message.
 */
export const ListInstanceTrustedDomainsRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 18);

/**
 * Describes the message zitadel.admin.v1.ListInstanceTrustedDomainsResponse.
 * Use `create(ListInstanceTrustedDomainsResponseSchema)` to create a new message.
 */
export const ListInstanceTrustedDomainsResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 19);

/**
 * Describes the message zitadel.admin.v1.AddInstanceTrustedDomainRequest.
 * Use `create(AddInstanceTrustedDomainRequestSchema)` to create a new message.
 */
export const AddInstanceTrustedDomainRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 20);

/**
 * Describes the message zitadel.admin.v1.AddInstanceTrustedDomainResponse.
 * Use `create(AddInstanceTrustedDomainResponseSchema)` to create a new message.
 */
export const AddInstanceTrustedDomainResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 21);

/**
 * Describes the message zitadel.admin.v1.RemoveInstanceTrustedDomainRequest.
 * Use `create(RemoveInstanceTrustedDomainRequestSchema)` to create a new message.
 */
export const RemoveInstanceTrustedDomainRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 22);

/**
 * Describes the message zitadel.admin.v1.RemoveInstanceTrustedDomainResponse.
 * Use `create(RemoveInstanceTrustedDomainResponseSchema)` to create a new message.
 */
export const RemoveInstanceTrustedDomainResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 23);

/**
 * Describes the message zitadel.admin.v1.ListSecretGeneratorsRequest.
 * Use `create(ListSecretGeneratorsRequestSchema)` to create a new message.
 */
export const ListSecretGeneratorsRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 24);

/**
 * Describes the message zitadel.admin.v1.ListSecretGeneratorsResponse.
 * Use `create(ListSecretGeneratorsResponseSchema)` to create a new message.
 */
export const ListSecretGeneratorsResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 25);

/**
 * Describes the message zitadel.admin.v1.GetSecretGeneratorRequest.
 * Use `create(GetSecretGeneratorRequestSchema)` to create a new message.
 */
export const GetSecretGeneratorRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 26);

/**
 * Describes the message zitadel.admin.v1.GetSecretGeneratorResponse.
 * Use `create(GetSecretGeneratorResponseSchema)` to create a new message.
 */
export const GetSecretGeneratorResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 27);

/**
 * Describes the message zitadel.admin.v1.UpdateSecretGeneratorRequest.
 * Use `create(UpdateSecretGeneratorRequestSchema)` to create a new message.
 */
export const UpdateSecretGeneratorRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 28);

/**
 * Describes the message zitadel.admin.v1.UpdateSecretGeneratorResponse.
 * Use `create(UpdateSecretGeneratorResponseSchema)` to create a new message.
 */
export const UpdateSecretGeneratorResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 29);

/**
 * Describes the message zitadel.admin.v1.GetSMTPConfigRequest.
 * Use `create(GetSMTPConfigRequestSchema)` to create a new message.
 */
export const GetSMTPConfigRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 30);

/**
 * Describes the message zitadel.admin.v1.GetSMTPConfigResponse.
 * Use `create(GetSMTPConfigResponseSchema)` to create a new message.
 */
export const GetSMTPConfigResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 31);

/**
 * Describes the message zitadel.admin.v1.GetSMTPConfigByIdRequest.
 * Use `create(GetSMTPConfigByIdRequestSchema)` to create a new message.
 */
export const GetSMTPConfigByIdRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 32);

/**
 * Describes the message zitadel.admin.v1.GetSMTPConfigByIdResponse.
 * Use `create(GetSMTPConfigByIdResponseSchema)` to create a new message.
 */
export const GetSMTPConfigByIdResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 33);

/**
 * Describes the message zitadel.admin.v1.ListSMTPConfigsRequest.
 * Use `create(ListSMTPConfigsRequestSchema)` to create a new message.
 */
export const ListSMTPConfigsRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 34);

/**
 * Describes the message zitadel.admin.v1.ListSMTPConfigsResponse.
 * Use `create(ListSMTPConfigsResponseSchema)` to create a new message.
 */
export const ListSMTPConfigsResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 35);

/**
 * Describes the message zitadel.admin.v1.AddSMTPConfigRequest.
 * Use `create(AddSMTPConfigRequestSchema)` to create a new message.
 */
export const AddSMTPConfigRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 36);

/**
 * Describes the message zitadel.admin.v1.AddSMTPConfigResponse.
 * Use `create(AddSMTPConfigResponseSchema)` to create a new message.
 */
export const AddSMTPConfigResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 37);

/**
 * Describes the message zitadel.admin.v1.UpdateSMTPConfigRequest.
 * Use `create(UpdateSMTPConfigRequestSchema)` to create a new message.
 */
export const UpdateSMTPConfigRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 38);

/**
 * Describes the message zitadel.admin.v1.UpdateSMTPConfigResponse.
 * Use `create(UpdateSMTPConfigResponseSchema)` to create a new message.
 */
export const UpdateSMTPConfigResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 39);

/**
 * Describes the message zitadel.admin.v1.UpdateSMTPConfigPasswordRequest.
 * Use `create(UpdateSMTPConfigPasswordRequestSchema)` to create a new message.
 */
export const UpdateSMTPConfigPasswordRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 40);

/**
 * Describes the message zitadel.admin.v1.UpdateSMTPConfigPasswordResponse.
 * Use `create(UpdateSMTPConfigPasswordResponseSchema)` to create a new message.
 */
export const UpdateSMTPConfigPasswordResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 41);

/**
 * Describes the message zitadel.admin.v1.ActivateSMTPConfigRequest.
 * Use `create(ActivateSMTPConfigRequestSchema)` to create a new message.
 */
export const ActivateSMTPConfigRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 42);

/**
 * Describes the message zitadel.admin.v1.ActivateSMTPConfigResponse.
 * Use `create(ActivateSMTPConfigResponseSchema)` to create a new message.
 */
export const ActivateSMTPConfigResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 43);

/**
 * Describes the message zitadel.admin.v1.DeactivateSMTPConfigRequest.
 * Use `create(DeactivateSMTPConfigRequestSchema)` to create a new message.
 */
export const DeactivateSMTPConfigRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 44);

/**
 * Describes the message zitadel.admin.v1.DeactivateSMTPConfigResponse.
 * Use `create(DeactivateSMTPConfigResponseSchema)` to create a new message.
 */
export const DeactivateSMTPConfigResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 45);

/**
 * Describes the message zitadel.admin.v1.RemoveSMTPConfigRequest.
 * Use `create(RemoveSMTPConfigRequestSchema)` to create a new message.
 */
export const RemoveSMTPConfigRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 46);

/**
 * Describes the message zitadel.admin.v1.RemoveSMTPConfigResponse.
 * Use `create(RemoveSMTPConfigResponseSchema)` to create a new message.
 */
export const RemoveSMTPConfigResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 47);

/**
 * Describes the message zitadel.admin.v1.TestSMTPConfigByIdRequest.
 * Use `create(TestSMTPConfigByIdRequestSchema)` to create a new message.
 */
export const TestSMTPConfigByIdRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 48);

/**
 * Describes the message zitadel.admin.v1.TestSMTPConfigByIdResponse.
 * Use `create(TestSMTPConfigByIdResponseSchema)` to create a new message.
 */
export const TestSMTPConfigByIdResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 49);

/**
 * Describes the message zitadel.admin.v1.TestSMTPConfigRequest.
 * Use `create(TestSMTPConfigRequestSchema)` to create a new message.
 */
export const TestSMTPConfigRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 50);

/**
 * Describes the message zitadel.admin.v1.TestSMTPConfigResponse.
 * Use `create(TestSMTPConfigResponseSchema)` to create a new message.
 */
export const TestSMTPConfigResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 51);

/**
 * Describes the message zitadel.admin.v1.GetEmailProviderRequest.
 * Use `create(GetEmailProviderRequestSchema)` to create a new message.
 */
export const GetEmailProviderRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 52);

/**
 * Describes the message zitadel.admin.v1.GetEmailProviderResponse.
 * Use `create(GetEmailProviderResponseSchema)` to create a new message.
 */
export const GetEmailProviderResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 53);

/**
 * Describes the message zitadel.admin.v1.GetEmailProviderByIdRequest.
 * Use `create(GetEmailProviderByIdRequestSchema)` to create a new message.
 */
export const GetEmailProviderByIdRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 54);

/**
 * Describes the message zitadel.admin.v1.GetEmailProviderByIdResponse.
 * Use `create(GetEmailProviderByIdResponseSchema)` to create a new message.
 */
export const GetEmailProviderByIdResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 55);

/**
 * Describes the message zitadel.admin.v1.ListEmailProvidersRequest.
 * Use `create(ListEmailProvidersRequestSchema)` to create a new message.
 */
export const ListEmailProvidersRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 56);

/**
 * Describes the message zitadel.admin.v1.ListEmailProvidersResponse.
 * Use `create(ListEmailProvidersResponseSchema)` to create a new message.
 */
export const ListEmailProvidersResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 57);

/**
 * Describes the message zitadel.admin.v1.AddEmailProviderSMTPRequest.
 * Use `create(AddEmailProviderSMTPRequestSchema)` to create a new message.
 */
export const AddEmailProviderSMTPRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 58);

/**
 * Describes the message zitadel.admin.v1.AddEmailProviderSMTPResponse.
 * Use `create(AddEmailProviderSMTPResponseSchema)` to create a new message.
 */
export const AddEmailProviderSMTPResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 59);

/**
 * Describes the message zitadel.admin.v1.UpdateEmailProviderSMTPRequest.
 * Use `create(UpdateEmailProviderSMTPRequestSchema)` to create a new message.
 */
export const UpdateEmailProviderSMTPRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 60);

/**
 * Describes the message zitadel.admin.v1.UpdateEmailProviderSMTPResponse.
 * Use `create(UpdateEmailProviderSMTPResponseSchema)` to create a new message.
 */
export const UpdateEmailProviderSMTPResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 61);

/**
 * Describes the message zitadel.admin.v1.UpdateEmailProviderSMTPPasswordRequest.
 * Use `create(UpdateEmailProviderSMTPPasswordRequestSchema)` to create a new message.
 */
export const UpdateEmailProviderSMTPPasswordRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 62);

/**
 * Describes the message zitadel.admin.v1.UpdateEmailProviderSMTPPasswordResponse.
 * Use `create(UpdateEmailProviderSMTPPasswordResponseSchema)` to create a new message.
 */
export const UpdateEmailProviderSMTPPasswordResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 63);

/**
 * Describes the message zitadel.admin.v1.AddEmailProviderHTTPRequest.
 * Use `create(AddEmailProviderHTTPRequestSchema)` to create a new message.
 */
export const AddEmailProviderHTTPRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 64);

/**
 * Describes the message zitadel.admin.v1.AddEmailProviderHTTPResponse.
 * Use `create(AddEmailProviderHTTPResponseSchema)` to create a new message.
 */
export const AddEmailProviderHTTPResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 65);

/**
 * Describes the message zitadel.admin.v1.UpdateEmailProviderHTTPRequest.
 * Use `create(UpdateEmailProviderHTTPRequestSchema)` to create a new message.
 */
export const UpdateEmailProviderHTTPRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 66);

/**
 * Describes the message zitadel.admin.v1.UpdateEmailProviderHTTPResponse.
 * Use `create(UpdateEmailProviderHTTPResponseSchema)` to create a new message.
 */
export const UpdateEmailProviderHTTPResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 67);

/**
 * Describes the message zitadel.admin.v1.ActivateEmailProviderRequest.
 * Use `create(ActivateEmailProviderRequestSchema)` to create a new message.
 */
export const ActivateEmailProviderRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 68);

/**
 * Describes the message zitadel.admin.v1.ActivateEmailProviderResponse.
 * Use `create(ActivateEmailProviderResponseSchema)` to create a new message.
 */
export const ActivateEmailProviderResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 69);

/**
 * Describes the message zitadel.admin.v1.DeactivateEmailProviderRequest.
 * Use `create(DeactivateEmailProviderRequestSchema)` to create a new message.
 */
export const DeactivateEmailProviderRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 70);

/**
 * Describes the message zitadel.admin.v1.DeactivateEmailProviderResponse.
 * Use `create(DeactivateEmailProviderResponseSchema)` to create a new message.
 */
export const DeactivateEmailProviderResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 71);

/**
 * Describes the message zitadel.admin.v1.RemoveEmailProviderRequest.
 * Use `create(RemoveEmailProviderRequestSchema)` to create a new message.
 */
export const RemoveEmailProviderRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 72);

/**
 * Describes the message zitadel.admin.v1.RemoveEmailProviderResponse.
 * Use `create(RemoveEmailProviderResponseSchema)` to create a new message.
 */
export const RemoveEmailProviderResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 73);

/**
 * Describes the message zitadel.admin.v1.TestEmailProviderSMTPByIdRequest.
 * Use `create(TestEmailProviderSMTPByIdRequestSchema)` to create a new message.
 */
export const TestEmailProviderSMTPByIdRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 74);

/**
 * Describes the message zitadel.admin.v1.TestEmailProviderSMTPByIdResponse.
 * Use `create(TestEmailProviderSMTPByIdResponseSchema)` to create a new message.
 */
export const TestEmailProviderSMTPByIdResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 75);

/**
 * Describes the message zitadel.admin.v1.TestEmailProviderSMTPRequest.
 * Use `create(TestEmailProviderSMTPRequestSchema)` to create a new message.
 */
export const TestEmailProviderSMTPRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 76);

/**
 * Describes the message zitadel.admin.v1.TestEmailProviderSMTPResponse.
 * Use `create(TestEmailProviderSMTPResponseSchema)` to create a new message.
 */
export const TestEmailProviderSMTPResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 77);

/**
 * Describes the message zitadel.admin.v1.ListSMSProvidersRequest.
 * Use `create(ListSMSProvidersRequestSchema)` to create a new message.
 */
export const ListSMSProvidersRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 78);

/**
 * Describes the message zitadel.admin.v1.ListSMSProvidersResponse.
 * Use `create(ListSMSProvidersResponseSchema)` to create a new message.
 */
export const ListSMSProvidersResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 79);

/**
 * Describes the message zitadel.admin.v1.GetSMSProviderRequest.
 * Use `create(GetSMSProviderRequestSchema)` to create a new message.
 */
export const GetSMSProviderRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 80);

/**
 * Describes the message zitadel.admin.v1.GetSMSProviderResponse.
 * Use `create(GetSMSProviderResponseSchema)` to create a new message.
 */
export const GetSMSProviderResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 81);

/**
 * Describes the message zitadel.admin.v1.AddSMSProviderTwilioRequest.
 * Use `create(AddSMSProviderTwilioRequestSchema)` to create a new message.
 */
export const AddSMSProviderTwilioRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 82);

/**
 * Describes the message zitadel.admin.v1.AddSMSProviderTwilioResponse.
 * Use `create(AddSMSProviderTwilioResponseSchema)` to create a new message.
 */
export const AddSMSProviderTwilioResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 83);

/**
 * Describes the message zitadel.admin.v1.UpdateSMSProviderTwilioRequest.
 * Use `create(UpdateSMSProviderTwilioRequestSchema)` to create a new message.
 */
export const UpdateSMSProviderTwilioRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 84);

/**
 * Describes the message zitadel.admin.v1.UpdateSMSProviderTwilioResponse.
 * Use `create(UpdateSMSProviderTwilioResponseSchema)` to create a new message.
 */
export const UpdateSMSProviderTwilioResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 85);

/**
 * Describes the message zitadel.admin.v1.UpdateSMSProviderTwilioTokenRequest.
 * Use `create(UpdateSMSProviderTwilioTokenRequestSchema)` to create a new message.
 */
export const UpdateSMSProviderTwilioTokenRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 86);

/**
 * Describes the message zitadel.admin.v1.UpdateSMSProviderTwilioTokenResponse.
 * Use `create(UpdateSMSProviderTwilioTokenResponseSchema)` to create a new message.
 */
export const UpdateSMSProviderTwilioTokenResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 87);

/**
 * Describes the message zitadel.admin.v1.AddSMSProviderHTTPRequest.
 * Use `create(AddSMSProviderHTTPRequestSchema)` to create a new message.
 */
export const AddSMSProviderHTTPRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 88);

/**
 * Describes the message zitadel.admin.v1.AddSMSProviderHTTPResponse.
 * Use `create(AddSMSProviderHTTPResponseSchema)` to create a new message.
 */
export const AddSMSProviderHTTPResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 89);

/**
 * Describes the message zitadel.admin.v1.UpdateSMSProviderHTTPRequest.
 * Use `create(UpdateSMSProviderHTTPRequestSchema)` to create a new message.
 */
export const UpdateSMSProviderHTTPRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 90);

/**
 * Describes the message zitadel.admin.v1.UpdateSMSProviderHTTPResponse.
 * Use `create(UpdateSMSProviderHTTPResponseSchema)` to create a new message.
 */
export const UpdateSMSProviderHTTPResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 91);

/**
 * Describes the message zitadel.admin.v1.ActivateSMSProviderRequest.
 * Use `create(ActivateSMSProviderRequestSchema)` to create a new message.
 */
export const ActivateSMSProviderRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 92);

/**
 * Describes the message zitadel.admin.v1.ActivateSMSProviderResponse.
 * Use `create(ActivateSMSProviderResponseSchema)` to create a new message.
 */
export const ActivateSMSProviderResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 93);

/**
 * Describes the message zitadel.admin.v1.DeactivateSMSProviderRequest.
 * Use `create(DeactivateSMSProviderRequestSchema)` to create a new message.
 */
export const DeactivateSMSProviderRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 94);

/**
 * Describes the message zitadel.admin.v1.DeactivateSMSProviderResponse.
 * Use `create(DeactivateSMSProviderResponseSchema)` to create a new message.
 */
export const DeactivateSMSProviderResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 95);

/**
 * Describes the message zitadel.admin.v1.RemoveSMSProviderRequest.
 * Use `create(RemoveSMSProviderRequestSchema)` to create a new message.
 */
export const RemoveSMSProviderRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 96);

/**
 * Describes the message zitadel.admin.v1.RemoveSMSProviderResponse.
 * Use `create(RemoveSMSProviderResponseSchema)` to create a new message.
 */
export const RemoveSMSProviderResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 97);

/**
 * Describes the message zitadel.admin.v1.GetFileSystemNotificationProviderRequest.
 * Use `create(GetFileSystemNotificationProviderRequestSchema)` to create a new message.
 */
export const GetFileSystemNotificationProviderRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 98);

/**
 * Describes the message zitadel.admin.v1.GetFileSystemNotificationProviderResponse.
 * Use `create(GetFileSystemNotificationProviderResponseSchema)` to create a new message.
 */
export const GetFileSystemNotificationProviderResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 99);

/**
 * Describes the message zitadel.admin.v1.GetLogNotificationProviderRequest.
 * Use `create(GetLogNotificationProviderRequestSchema)` to create a new message.
 */
export const GetLogNotificationProviderRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 100);

/**
 * Describes the message zitadel.admin.v1.GetLogNotificationProviderResponse.
 * Use `create(GetLogNotificationProviderResponseSchema)` to create a new message.
 */
export const GetLogNotificationProviderResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 101);

/**
 * Describes the message zitadel.admin.v1.GetOIDCSettingsRequest.
 * Use `create(GetOIDCSettingsRequestSchema)` to create a new message.
 */
export const GetOIDCSettingsRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 102);

/**
 * Describes the message zitadel.admin.v1.GetOIDCSettingsResponse.
 * Use `create(GetOIDCSettingsResponseSchema)` to create a new message.
 */
export const GetOIDCSettingsResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 103);

/**
 * Describes the message zitadel.admin.v1.AddOIDCSettingsRequest.
 * Use `create(AddOIDCSettingsRequestSchema)` to create a new message.
 */
export const AddOIDCSettingsRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 104);

/**
 * Describes the message zitadel.admin.v1.AddOIDCSettingsResponse.
 * Use `create(AddOIDCSettingsResponseSchema)` to create a new message.
 */
export const AddOIDCSettingsResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 105);

/**
 * Describes the message zitadel.admin.v1.UpdateOIDCSettingsRequest.
 * Use `create(UpdateOIDCSettingsRequestSchema)` to create a new message.
 */
export const UpdateOIDCSettingsRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 106);

/**
 * Describes the message zitadel.admin.v1.UpdateOIDCSettingsResponse.
 * Use `create(UpdateOIDCSettingsResponseSchema)` to create a new message.
 */
export const UpdateOIDCSettingsResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 107);

/**
 * Describes the message zitadel.admin.v1.GetSecurityPolicyRequest.
 * Use `create(GetSecurityPolicyRequestSchema)` to create a new message.
 */
export const GetSecurityPolicyRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 108);

/**
 * Describes the message zitadel.admin.v1.GetSecurityPolicyResponse.
 * Use `create(GetSecurityPolicyResponseSchema)` to create a new message.
 */
export const GetSecurityPolicyResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 109);

/**
 * Describes the message zitadel.admin.v1.SetSecurityPolicyRequest.
 * Use `create(SetSecurityPolicyRequestSchema)` to create a new message.
 */
export const SetSecurityPolicyRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 110);

/**
 * Describes the message zitadel.admin.v1.SetSecurityPolicyResponse.
 * Use `create(SetSecurityPolicyResponseSchema)` to create a new message.
 */
export const SetSecurityPolicyResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 111);

/**
 * Describes the message zitadel.admin.v1.IsOrgUniqueRequest.
 * Use `create(IsOrgUniqueRequestSchema)` to create a new message.
 */
export const IsOrgUniqueRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 112);

/**
 * Describes the message zitadel.admin.v1.IsOrgUniqueResponse.
 * Use `create(IsOrgUniqueResponseSchema)` to create a new message.
 */
export const IsOrgUniqueResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 113);

/**
 * Describes the message zitadel.admin.v1.GetOrgByIDRequest.
 * Use `create(GetOrgByIDRequestSchema)` to create a new message.
 */
export const GetOrgByIDRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 114);

/**
 * Describes the message zitadel.admin.v1.GetOrgByIDResponse.
 * Use `create(GetOrgByIDResponseSchema)` to create a new message.
 */
export const GetOrgByIDResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 115);

/**
 * Describes the message zitadel.admin.v1.ListOrgsRequest.
 * Use `create(ListOrgsRequestSchema)` to create a new message.
 */
export const ListOrgsRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 116);

/**
 * Describes the message zitadel.admin.v1.ListOrgsResponse.
 * Use `create(ListOrgsResponseSchema)` to create a new message.
 */
export const ListOrgsResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 117);

/**
 * Describes the message zitadel.admin.v1.SetUpOrgRequest.
 * Use `create(SetUpOrgRequestSchema)` to create a new message.
 */
export const SetUpOrgRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 118);

/**
 * Describes the message zitadel.admin.v1.SetUpOrgRequest.Org.
 * Use `create(SetUpOrgRequest_OrgSchema)` to create a new message.
 */
export const SetUpOrgRequest_OrgSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 118, 0);

/**
 * Describes the message zitadel.admin.v1.SetUpOrgRequest.Human.
 * Use `create(SetUpOrgRequest_HumanSchema)` to create a new message.
 */
export const SetUpOrgRequest_HumanSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 118, 1);

/**
 * Describes the message zitadel.admin.v1.SetUpOrgRequest.Human.Profile.
 * Use `create(SetUpOrgRequest_Human_ProfileSchema)` to create a new message.
 */
export const SetUpOrgRequest_Human_ProfileSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 118, 1, 0);

/**
 * Describes the message zitadel.admin.v1.SetUpOrgRequest.Human.Email.
 * Use `create(SetUpOrgRequest_Human_EmailSchema)` to create a new message.
 */
export const SetUpOrgRequest_Human_EmailSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 118, 1, 1);

/**
 * Describes the message zitadel.admin.v1.SetUpOrgRequest.Human.Phone.
 * Use `create(SetUpOrgRequest_Human_PhoneSchema)` to create a new message.
 */
export const SetUpOrgRequest_Human_PhoneSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 118, 1, 2);

/**
 * Describes the message zitadel.admin.v1.SetUpOrgResponse.
 * Use `create(SetUpOrgResponseSchema)` to create a new message.
 */
export const SetUpOrgResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 119);

/**
 * Describes the message zitadel.admin.v1.RemoveOrgRequest.
 * Use `create(RemoveOrgRequestSchema)` to create a new message.
 */
export const RemoveOrgRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 120);

/**
 * Describes the message zitadel.admin.v1.RemoveOrgResponse.
 * Use `create(RemoveOrgResponseSchema)` to create a new message.
 */
export const RemoveOrgResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 121);

/**
 * Describes the message zitadel.admin.v1.GetIDPByIDRequest.
 * Use `create(GetIDPByIDRequestSchema)` to create a new message.
 */
export const GetIDPByIDRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 122);

/**
 * Describes the message zitadel.admin.v1.GetIDPByIDResponse.
 * Use `create(GetIDPByIDResponseSchema)` to create a new message.
 */
export const GetIDPByIDResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 123);

/**
 * Describes the message zitadel.admin.v1.ListIDPsRequest.
 * Use `create(ListIDPsRequestSchema)` to create a new message.
 */
export const ListIDPsRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 124);

/**
 * Describes the message zitadel.admin.v1.IDPQuery.
 * Use `create(IDPQuerySchema)` to create a new message.
 */
export const IDPQuerySchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 125);

/**
 * Describes the message zitadel.admin.v1.ListIDPsResponse.
 * Use `create(ListIDPsResponseSchema)` to create a new message.
 */
export const ListIDPsResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 126);

/**
 * Describes the message zitadel.admin.v1.AddOIDCIDPRequest.
 * Use `create(AddOIDCIDPRequestSchema)` to create a new message.
 */
export const AddOIDCIDPRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 127);

/**
 * Describes the message zitadel.admin.v1.AddOIDCIDPResponse.
 * Use `create(AddOIDCIDPResponseSchema)` to create a new message.
 */
export const AddOIDCIDPResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 128);

/**
 * Describes the message zitadel.admin.v1.AddJWTIDPRequest.
 * Use `create(AddJWTIDPRequestSchema)` to create a new message.
 */
export const AddJWTIDPRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 129);

/**
 * Describes the message zitadel.admin.v1.AddJWTIDPResponse.
 * Use `create(AddJWTIDPResponseSchema)` to create a new message.
 */
export const AddJWTIDPResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 130);

/**
 * Describes the message zitadel.admin.v1.UpdateIDPRequest.
 * Use `create(UpdateIDPRequestSchema)` to create a new message.
 */
export const UpdateIDPRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 131);

/**
 * Describes the message zitadel.admin.v1.UpdateIDPResponse.
 * Use `create(UpdateIDPResponseSchema)` to create a new message.
 */
export const UpdateIDPResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 132);

/**
 * Describes the message zitadel.admin.v1.DeactivateIDPRequest.
 * Use `create(DeactivateIDPRequestSchema)` to create a new message.
 */
export const DeactivateIDPRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 133);

/**
 * Describes the message zitadel.admin.v1.DeactivateIDPResponse.
 * Use `create(DeactivateIDPResponseSchema)` to create a new message.
 */
export const DeactivateIDPResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 134);

/**
 * Describes the message zitadel.admin.v1.ReactivateIDPRequest.
 * Use `create(ReactivateIDPRequestSchema)` to create a new message.
 */
export const ReactivateIDPRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 135);

/**
 * Describes the message zitadel.admin.v1.ReactivateIDPResponse.
 * Use `create(ReactivateIDPResponseSchema)` to create a new message.
 */
export const ReactivateIDPResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 136);

/**
 * Describes the message zitadel.admin.v1.RemoveIDPRequest.
 * Use `create(RemoveIDPRequestSchema)` to create a new message.
 */
export const RemoveIDPRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 137);

/**
 * Describes the message zitadel.admin.v1.RemoveIDPResponse.
 * Use `create(RemoveIDPResponseSchema)` to create a new message.
 */
export const RemoveIDPResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 138);

/**
 * Describes the message zitadel.admin.v1.UpdateIDPOIDCConfigRequest.
 * Use `create(UpdateIDPOIDCConfigRequestSchema)` to create a new message.
 */
export const UpdateIDPOIDCConfigRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 139);

/**
 * Describes the message zitadel.admin.v1.UpdateIDPOIDCConfigResponse.
 * Use `create(UpdateIDPOIDCConfigResponseSchema)` to create a new message.
 */
export const UpdateIDPOIDCConfigResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 140);

/**
 * Describes the message zitadel.admin.v1.UpdateIDPJWTConfigRequest.
 * Use `create(UpdateIDPJWTConfigRequestSchema)` to create a new message.
 */
export const UpdateIDPJWTConfigRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 141);

/**
 * Describes the message zitadel.admin.v1.UpdateIDPJWTConfigResponse.
 * Use `create(UpdateIDPJWTConfigResponseSchema)` to create a new message.
 */
export const UpdateIDPJWTConfigResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 142);

/**
 * Describes the message zitadel.admin.v1.ListProvidersRequest.
 * Use `create(ListProvidersRequestSchema)` to create a new message.
 */
export const ListProvidersRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 143);

/**
 * Describes the message zitadel.admin.v1.ProviderQuery.
 * Use `create(ProviderQuerySchema)` to create a new message.
 */
export const ProviderQuerySchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 144);

/**
 * Describes the message zitadel.admin.v1.ListProvidersResponse.
 * Use `create(ListProvidersResponseSchema)` to create a new message.
 */
export const ListProvidersResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 145);

/**
 * Describes the message zitadel.admin.v1.GetProviderByIDRequest.
 * Use `create(GetProviderByIDRequestSchema)` to create a new message.
 */
export const GetProviderByIDRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 146);

/**
 * Describes the message zitadel.admin.v1.GetProviderByIDResponse.
 * Use `create(GetProviderByIDResponseSchema)` to create a new message.
 */
export const GetProviderByIDResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 147);

/**
 * Describes the message zitadel.admin.v1.AddGenericOAuthProviderRequest.
 * Use `create(AddGenericOAuthProviderRequestSchema)` to create a new message.
 */
export const AddGenericOAuthProviderRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 148);

/**
 * Describes the message zitadel.admin.v1.AddGenericOAuthProviderResponse.
 * Use `create(AddGenericOAuthProviderResponseSchema)` to create a new message.
 */
export const AddGenericOAuthProviderResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 149);

/**
 * Describes the message zitadel.admin.v1.UpdateGenericOAuthProviderRequest.
 * Use `create(UpdateGenericOAuthProviderRequestSchema)` to create a new message.
 */
export const UpdateGenericOAuthProviderRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 150);

/**
 * Describes the message zitadel.admin.v1.UpdateGenericOAuthProviderResponse.
 * Use `create(UpdateGenericOAuthProviderResponseSchema)` to create a new message.
 */
export const UpdateGenericOAuthProviderResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 151);

/**
 * Describes the message zitadel.admin.v1.AddGenericOIDCProviderRequest.
 * Use `create(AddGenericOIDCProviderRequestSchema)` to create a new message.
 */
export const AddGenericOIDCProviderRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 152);

/**
 * Describes the message zitadel.admin.v1.AddGenericOIDCProviderResponse.
 * Use `create(AddGenericOIDCProviderResponseSchema)` to create a new message.
 */
export const AddGenericOIDCProviderResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 153);

/**
 * Describes the message zitadel.admin.v1.UpdateGenericOIDCProviderRequest.
 * Use `create(UpdateGenericOIDCProviderRequestSchema)` to create a new message.
 */
export const UpdateGenericOIDCProviderRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 154);

/**
 * Describes the message zitadel.admin.v1.UpdateGenericOIDCProviderResponse.
 * Use `create(UpdateGenericOIDCProviderResponseSchema)` to create a new message.
 */
export const UpdateGenericOIDCProviderResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 155);

/**
 * Describes the message zitadel.admin.v1.MigrateGenericOIDCProviderRequest.
 * Use `create(MigrateGenericOIDCProviderRequestSchema)` to create a new message.
 */
export const MigrateGenericOIDCProviderRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 156);

/**
 * Describes the message zitadel.admin.v1.MigrateGenericOIDCProviderResponse.
 * Use `create(MigrateGenericOIDCProviderResponseSchema)` to create a new message.
 */
export const MigrateGenericOIDCProviderResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 157);

/**
 * Describes the message zitadel.admin.v1.AddJWTProviderRequest.
 * Use `create(AddJWTProviderRequestSchema)` to create a new message.
 */
export const AddJWTProviderRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 158);

/**
 * Describes the message zitadel.admin.v1.AddJWTProviderResponse.
 * Use `create(AddJWTProviderResponseSchema)` to create a new message.
 */
export const AddJWTProviderResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 159);

/**
 * Describes the message zitadel.admin.v1.UpdateJWTProviderRequest.
 * Use `create(UpdateJWTProviderRequestSchema)` to create a new message.
 */
export const UpdateJWTProviderRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 160);

/**
 * Describes the message zitadel.admin.v1.UpdateJWTProviderResponse.
 * Use `create(UpdateJWTProviderResponseSchema)` to create a new message.
 */
export const UpdateJWTProviderResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 161);

/**
 * Describes the message zitadel.admin.v1.AddAzureADProviderRequest.
 * Use `create(AddAzureADProviderRequestSchema)` to create a new message.
 */
export const AddAzureADProviderRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 162);

/**
 * Describes the message zitadel.admin.v1.AddAzureADProviderResponse.
 * Use `create(AddAzureADProviderResponseSchema)` to create a new message.
 */
export const AddAzureADProviderResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 163);

/**
 * Describes the message zitadel.admin.v1.UpdateAzureADProviderRequest.
 * Use `create(UpdateAzureADProviderRequestSchema)` to create a new message.
 */
export const UpdateAzureADProviderRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 164);

/**
 * Describes the message zitadel.admin.v1.UpdateAzureADProviderResponse.
 * Use `create(UpdateAzureADProviderResponseSchema)` to create a new message.
 */
export const UpdateAzureADProviderResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 165);

/**
 * Describes the message zitadel.admin.v1.AddGitHubProviderRequest.
 * Use `create(AddGitHubProviderRequestSchema)` to create a new message.
 */
export const AddGitHubProviderRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 166);

/**
 * Describes the message zitadel.admin.v1.AddGitHubProviderResponse.
 * Use `create(AddGitHubProviderResponseSchema)` to create a new message.
 */
export const AddGitHubProviderResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 167);

/**
 * Describes the message zitadel.admin.v1.UpdateGitHubProviderRequest.
 * Use `create(UpdateGitHubProviderRequestSchema)` to create a new message.
 */
export const UpdateGitHubProviderRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 168);

/**
 * Describes the message zitadel.admin.v1.UpdateGitHubProviderResponse.
 * Use `create(UpdateGitHubProviderResponseSchema)` to create a new message.
 */
export const UpdateGitHubProviderResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 169);

/**
 * Describes the message zitadel.admin.v1.AddGitHubEnterpriseServerProviderRequest.
 * Use `create(AddGitHubEnterpriseServerProviderRequestSchema)` to create a new message.
 */
export const AddGitHubEnterpriseServerProviderRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 170);

/**
 * Describes the message zitadel.admin.v1.AddGitHubEnterpriseServerProviderResponse.
 * Use `create(AddGitHubEnterpriseServerProviderResponseSchema)` to create a new message.
 */
export const AddGitHubEnterpriseServerProviderResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 171);

/**
 * Describes the message zitadel.admin.v1.UpdateGitHubEnterpriseServerProviderRequest.
 * Use `create(UpdateGitHubEnterpriseServerProviderRequestSchema)` to create a new message.
 */
export const UpdateGitHubEnterpriseServerProviderRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 172);

/**
 * Describes the message zitadel.admin.v1.UpdateGitHubEnterpriseServerProviderResponse.
 * Use `create(UpdateGitHubEnterpriseServerProviderResponseSchema)` to create a new message.
 */
export const UpdateGitHubEnterpriseServerProviderResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 173);

/**
 * Describes the message zitadel.admin.v1.AddGitLabProviderRequest.
 * Use `create(AddGitLabProviderRequestSchema)` to create a new message.
 */
export const AddGitLabProviderRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 174);

/**
 * Describes the message zitadel.admin.v1.AddGitLabProviderResponse.
 * Use `create(AddGitLabProviderResponseSchema)` to create a new message.
 */
export const AddGitLabProviderResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 175);

/**
 * Describes the message zitadel.admin.v1.UpdateGitLabProviderRequest.
 * Use `create(UpdateGitLabProviderRequestSchema)` to create a new message.
 */
export const UpdateGitLabProviderRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 176);

/**
 * Describes the message zitadel.admin.v1.UpdateGitLabProviderResponse.
 * Use `create(UpdateGitLabProviderResponseSchema)` to create a new message.
 */
export const UpdateGitLabProviderResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 177);

/**
 * Describes the message zitadel.admin.v1.AddGitLabSelfHostedProviderRequest.
 * Use `create(AddGitLabSelfHostedProviderRequestSchema)` to create a new message.
 */
export const AddGitLabSelfHostedProviderRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 178);

/**
 * Describes the message zitadel.admin.v1.AddGitLabSelfHostedProviderResponse.
 * Use `create(AddGitLabSelfHostedProviderResponseSchema)` to create a new message.
 */
export const AddGitLabSelfHostedProviderResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 179);

/**
 * Describes the message zitadel.admin.v1.UpdateGitLabSelfHostedProviderRequest.
 * Use `create(UpdateGitLabSelfHostedProviderRequestSchema)` to create a new message.
 */
export const UpdateGitLabSelfHostedProviderRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 180);

/**
 * Describes the message zitadel.admin.v1.UpdateGitLabSelfHostedProviderResponse.
 * Use `create(UpdateGitLabSelfHostedProviderResponseSchema)` to create a new message.
 */
export const UpdateGitLabSelfHostedProviderResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 181);

/**
 * Describes the message zitadel.admin.v1.AddGoogleProviderRequest.
 * Use `create(AddGoogleProviderRequestSchema)` to create a new message.
 */
export const AddGoogleProviderRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 182);

/**
 * Describes the message zitadel.admin.v1.AddGoogleProviderResponse.
 * Use `create(AddGoogleProviderResponseSchema)` to create a new message.
 */
export const AddGoogleProviderResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 183);

/**
 * Describes the message zitadel.admin.v1.UpdateGoogleProviderRequest.
 * Use `create(UpdateGoogleProviderRequestSchema)` to create a new message.
 */
export const UpdateGoogleProviderRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 184);

/**
 * Describes the message zitadel.admin.v1.UpdateGoogleProviderResponse.
 * Use `create(UpdateGoogleProviderResponseSchema)` to create a new message.
 */
export const UpdateGoogleProviderResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 185);

/**
 * Describes the message zitadel.admin.v1.AddLDAPProviderRequest.
 * Use `create(AddLDAPProviderRequestSchema)` to create a new message.
 */
export const AddLDAPProviderRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 186);

/**
 * Describes the message zitadel.admin.v1.AddLDAPProviderResponse.
 * Use `create(AddLDAPProviderResponseSchema)` to create a new message.
 */
export const AddLDAPProviderResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 187);

/**
 * Describes the message zitadel.admin.v1.UpdateLDAPProviderRequest.
 * Use `create(UpdateLDAPProviderRequestSchema)` to create a new message.
 */
export const UpdateLDAPProviderRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 188);

/**
 * Describes the message zitadel.admin.v1.UpdateLDAPProviderResponse.
 * Use `create(UpdateLDAPProviderResponseSchema)` to create a new message.
 */
export const UpdateLDAPProviderResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 189);

/**
 * Describes the message zitadel.admin.v1.AddAppleProviderRequest.
 * Use `create(AddAppleProviderRequestSchema)` to create a new message.
 */
export const AddAppleProviderRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 190);

/**
 * Describes the message zitadel.admin.v1.AddAppleProviderResponse.
 * Use `create(AddAppleProviderResponseSchema)` to create a new message.
 */
export const AddAppleProviderResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 191);

/**
 * Describes the message zitadel.admin.v1.UpdateAppleProviderRequest.
 * Use `create(UpdateAppleProviderRequestSchema)` to create a new message.
 */
export const UpdateAppleProviderRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 192);

/**
 * Describes the message zitadel.admin.v1.UpdateAppleProviderResponse.
 * Use `create(UpdateAppleProviderResponseSchema)` to create a new message.
 */
export const UpdateAppleProviderResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 193);

/**
 * Describes the message zitadel.admin.v1.AddSAMLProviderRequest.
 * Use `create(AddSAMLProviderRequestSchema)` to create a new message.
 */
export const AddSAMLProviderRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 194);

/**
 * Describes the message zitadel.admin.v1.AddSAMLProviderResponse.
 * Use `create(AddSAMLProviderResponseSchema)` to create a new message.
 */
export const AddSAMLProviderResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 195);

/**
 * Describes the message zitadel.admin.v1.UpdateSAMLProviderRequest.
 * Use `create(UpdateSAMLProviderRequestSchema)` to create a new message.
 */
export const UpdateSAMLProviderRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 196);

/**
 * Describes the message zitadel.admin.v1.UpdateSAMLProviderResponse.
 * Use `create(UpdateSAMLProviderResponseSchema)` to create a new message.
 */
export const UpdateSAMLProviderResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 197);

/**
 * Describes the message zitadel.admin.v1.RegenerateSAMLProviderCertificateRequest.
 * Use `create(RegenerateSAMLProviderCertificateRequestSchema)` to create a new message.
 */
export const RegenerateSAMLProviderCertificateRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 198);

/**
 * Describes the message zitadel.admin.v1.RegenerateSAMLProviderCertificateResponse.
 * Use `create(RegenerateSAMLProviderCertificateResponseSchema)` to create a new message.
 */
export const RegenerateSAMLProviderCertificateResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 199);

/**
 * Describes the message zitadel.admin.v1.DeleteProviderRequest.
 * Use `create(DeleteProviderRequestSchema)` to create a new message.
 */
export const DeleteProviderRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 200);

/**
 * Describes the message zitadel.admin.v1.DeleteProviderResponse.
 * Use `create(DeleteProviderResponseSchema)` to create a new message.
 */
export const DeleteProviderResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 201);

/**
 * Describes the message zitadel.admin.v1.GetOrgIAMPolicyRequest.
 * Use `create(GetOrgIAMPolicyRequestSchema)` to create a new message.
 */
export const GetOrgIAMPolicyRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 202);

/**
 * Describes the message zitadel.admin.v1.GetOrgIAMPolicyResponse.
 * Use `create(GetOrgIAMPolicyResponseSchema)` to create a new message.
 */
export const GetOrgIAMPolicyResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 203);

/**
 * Describes the message zitadel.admin.v1.UpdateOrgIAMPolicyRequest.
 * Use `create(UpdateOrgIAMPolicyRequestSchema)` to create a new message.
 */
export const UpdateOrgIAMPolicyRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 204);

/**
 * Describes the message zitadel.admin.v1.UpdateOrgIAMPolicyResponse.
 * Use `create(UpdateOrgIAMPolicyResponseSchema)` to create a new message.
 */
export const UpdateOrgIAMPolicyResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 205);

/**
 * Describes the message zitadel.admin.v1.GetCustomOrgIAMPolicyRequest.
 * Use `create(GetCustomOrgIAMPolicyRequestSchema)` to create a new message.
 */
export const GetCustomOrgIAMPolicyRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 206);

/**
 * Describes the message zitadel.admin.v1.GetCustomOrgIAMPolicyResponse.
 * Use `create(GetCustomOrgIAMPolicyResponseSchema)` to create a new message.
 */
export const GetCustomOrgIAMPolicyResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 207);

/**
 * Describes the message zitadel.admin.v1.AddCustomOrgIAMPolicyRequest.
 * Use `create(AddCustomOrgIAMPolicyRequestSchema)` to create a new message.
 */
export const AddCustomOrgIAMPolicyRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 208);

/**
 * Describes the message zitadel.admin.v1.AddCustomOrgIAMPolicyResponse.
 * Use `create(AddCustomOrgIAMPolicyResponseSchema)` to create a new message.
 */
export const AddCustomOrgIAMPolicyResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 209);

/**
 * Describes the message zitadel.admin.v1.UpdateCustomOrgIAMPolicyRequest.
 * Use `create(UpdateCustomOrgIAMPolicyRequestSchema)` to create a new message.
 */
export const UpdateCustomOrgIAMPolicyRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 210);

/**
 * Describes the message zitadel.admin.v1.UpdateCustomOrgIAMPolicyResponse.
 * Use `create(UpdateCustomOrgIAMPolicyResponseSchema)` to create a new message.
 */
export const UpdateCustomOrgIAMPolicyResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 211);

/**
 * Describes the message zitadel.admin.v1.ResetCustomOrgIAMPolicyToDefaultRequest.
 * Use `create(ResetCustomOrgIAMPolicyToDefaultRequestSchema)` to create a new message.
 */
export const ResetCustomOrgIAMPolicyToDefaultRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 212);

/**
 * Describes the message zitadel.admin.v1.ResetCustomOrgIAMPolicyToDefaultResponse.
 * Use `create(ResetCustomOrgIAMPolicyToDefaultResponseSchema)` to create a new message.
 */
export const ResetCustomOrgIAMPolicyToDefaultResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 213);

/**
 * Describes the message zitadel.admin.v1.GetDomainPolicyRequest.
 * Use `create(GetDomainPolicyRequestSchema)` to create a new message.
 */
export const GetDomainPolicyRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 214);

/**
 * Describes the message zitadel.admin.v1.GetDomainPolicyResponse.
 * Use `create(GetDomainPolicyResponseSchema)` to create a new message.
 */
export const GetDomainPolicyResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 215);

/**
 * Describes the message zitadel.admin.v1.UpdateDomainPolicyRequest.
 * Use `create(UpdateDomainPolicyRequestSchema)` to create a new message.
 */
export const UpdateDomainPolicyRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 216);

/**
 * Describes the message zitadel.admin.v1.UpdateDomainPolicyResponse.
 * Use `create(UpdateDomainPolicyResponseSchema)` to create a new message.
 */
export const UpdateDomainPolicyResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 217);

/**
 * Describes the message zitadel.admin.v1.GetCustomDomainPolicyRequest.
 * Use `create(GetCustomDomainPolicyRequestSchema)` to create a new message.
 */
export const GetCustomDomainPolicyRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 218);

/**
 * Describes the message zitadel.admin.v1.GetCustomDomainPolicyResponse.
 * Use `create(GetCustomDomainPolicyResponseSchema)` to create a new message.
 */
export const GetCustomDomainPolicyResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 219);

/**
 * Describes the message zitadel.admin.v1.AddCustomDomainPolicyRequest.
 * Use `create(AddCustomDomainPolicyRequestSchema)` to create a new message.
 */
export const AddCustomDomainPolicyRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 220);

/**
 * Describes the message zitadel.admin.v1.AddCustomDomainPolicyResponse.
 * Use `create(AddCustomDomainPolicyResponseSchema)` to create a new message.
 */
export const AddCustomDomainPolicyResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 221);

/**
 * Describes the message zitadel.admin.v1.UpdateCustomDomainPolicyRequest.
 * Use `create(UpdateCustomDomainPolicyRequestSchema)` to create a new message.
 */
export const UpdateCustomDomainPolicyRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 222);

/**
 * Describes the message zitadel.admin.v1.UpdateCustomDomainPolicyResponse.
 * Use `create(UpdateCustomDomainPolicyResponseSchema)` to create a new message.
 */
export const UpdateCustomDomainPolicyResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 223);

/**
 * Describes the message zitadel.admin.v1.ResetCustomDomainPolicyToDefaultRequest.
 * Use `create(ResetCustomDomainPolicyToDefaultRequestSchema)` to create a new message.
 */
export const ResetCustomDomainPolicyToDefaultRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 224);

/**
 * Describes the message zitadel.admin.v1.ResetCustomDomainPolicyToDefaultResponse.
 * Use `create(ResetCustomDomainPolicyToDefaultResponseSchema)` to create a new message.
 */
export const ResetCustomDomainPolicyToDefaultResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 225);

/**
 * Describes the message zitadel.admin.v1.GetLabelPolicyRequest.
 * Use `create(GetLabelPolicyRequestSchema)` to create a new message.
 */
export const GetLabelPolicyRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 226);

/**
 * Describes the message zitadel.admin.v1.GetLabelPolicyResponse.
 * Use `create(GetLabelPolicyResponseSchema)` to create a new message.
 */
export const GetLabelPolicyResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 227);

/**
 * Describes the message zitadel.admin.v1.GetPreviewLabelPolicyRequest.
 * Use `create(GetPreviewLabelPolicyRequestSchema)` to create a new message.
 */
export const GetPreviewLabelPolicyRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 228);

/**
 * Describes the message zitadel.admin.v1.GetPreviewLabelPolicyResponse.
 * Use `create(GetPreviewLabelPolicyResponseSchema)` to create a new message.
 */
export const GetPreviewLabelPolicyResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 229);

/**
 * Describes the message zitadel.admin.v1.UpdateLabelPolicyRequest.
 * Use `create(UpdateLabelPolicyRequestSchema)` to create a new message.
 */
export const UpdateLabelPolicyRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 230);

/**
 * Describes the message zitadel.admin.v1.UpdateLabelPolicyResponse.
 * Use `create(UpdateLabelPolicyResponseSchema)` to create a new message.
 */
export const UpdateLabelPolicyResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 231);

/**
 * Describes the message zitadel.admin.v1.ActivateLabelPolicyRequest.
 * Use `create(ActivateLabelPolicyRequestSchema)` to create a new message.
 */
export const ActivateLabelPolicyRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 232);

/**
 * Describes the message zitadel.admin.v1.ActivateLabelPolicyResponse.
 * Use `create(ActivateLabelPolicyResponseSchema)` to create a new message.
 */
export const ActivateLabelPolicyResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 233);

/**
 * Describes the message zitadel.admin.v1.RemoveLabelPolicyLogoRequest.
 * Use `create(RemoveLabelPolicyLogoRequestSchema)` to create a new message.
 */
export const RemoveLabelPolicyLogoRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 234);

/**
 * Describes the message zitadel.admin.v1.RemoveLabelPolicyLogoResponse.
 * Use `create(RemoveLabelPolicyLogoResponseSchema)` to create a new message.
 */
export const RemoveLabelPolicyLogoResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 235);

/**
 * Describes the message zitadel.admin.v1.RemoveLabelPolicyLogoDarkRequest.
 * Use `create(RemoveLabelPolicyLogoDarkRequestSchema)` to create a new message.
 */
export const RemoveLabelPolicyLogoDarkRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 236);

/**
 * Describes the message zitadel.admin.v1.RemoveLabelPolicyLogoDarkResponse.
 * Use `create(RemoveLabelPolicyLogoDarkResponseSchema)` to create a new message.
 */
export const RemoveLabelPolicyLogoDarkResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 237);

/**
 * Describes the message zitadel.admin.v1.RemoveLabelPolicyIconRequest.
 * Use `create(RemoveLabelPolicyIconRequestSchema)` to create a new message.
 */
export const RemoveLabelPolicyIconRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 238);

/**
 * Describes the message zitadel.admin.v1.RemoveLabelPolicyIconResponse.
 * Use `create(RemoveLabelPolicyIconResponseSchema)` to create a new message.
 */
export const RemoveLabelPolicyIconResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 239);

/**
 * Describes the message zitadel.admin.v1.RemoveLabelPolicyIconDarkRequest.
 * Use `create(RemoveLabelPolicyIconDarkRequestSchema)` to create a new message.
 */
export const RemoveLabelPolicyIconDarkRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 240);

/**
 * Describes the message zitadel.admin.v1.RemoveLabelPolicyIconDarkResponse.
 * Use `create(RemoveLabelPolicyIconDarkResponseSchema)` to create a new message.
 */
export const RemoveLabelPolicyIconDarkResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 241);

/**
 * Describes the message zitadel.admin.v1.RemoveLabelPolicyFontRequest.
 * Use `create(RemoveLabelPolicyFontRequestSchema)` to create a new message.
 */
export const RemoveLabelPolicyFontRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 242);

/**
 * Describes the message zitadel.admin.v1.RemoveLabelPolicyFontResponse.
 * Use `create(RemoveLabelPolicyFontResponseSchema)` to create a new message.
 */
export const RemoveLabelPolicyFontResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 243);

/**
 * Describes the message zitadel.admin.v1.GetLoginPolicyRequest.
 * Use `create(GetLoginPolicyRequestSchema)` to create a new message.
 */
export const GetLoginPolicyRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 244);

/**
 * Describes the message zitadel.admin.v1.GetLoginPolicyResponse.
 * Use `create(GetLoginPolicyResponseSchema)` to create a new message.
 */
export const GetLoginPolicyResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 245);

/**
 * Describes the message zitadel.admin.v1.UpdateLoginPolicyRequest.
 * Use `create(UpdateLoginPolicyRequestSchema)` to create a new message.
 */
export const UpdateLoginPolicyRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 246);

/**
 * Describes the message zitadel.admin.v1.UpdateLoginPolicyResponse.
 * Use `create(UpdateLoginPolicyResponseSchema)` to create a new message.
 */
export const UpdateLoginPolicyResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 247);

/**
 * Describes the message zitadel.admin.v1.ListLoginPolicyIDPsRequest.
 * Use `create(ListLoginPolicyIDPsRequestSchema)` to create a new message.
 */
export const ListLoginPolicyIDPsRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 248);

/**
 * Describes the message zitadel.admin.v1.ListLoginPolicyIDPsResponse.
 * Use `create(ListLoginPolicyIDPsResponseSchema)` to create a new message.
 */
export const ListLoginPolicyIDPsResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 249);

/**
 * Describes the message zitadel.admin.v1.AddIDPToLoginPolicyRequest.
 * Use `create(AddIDPToLoginPolicyRequestSchema)` to create a new message.
 */
export const AddIDPToLoginPolicyRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 250);

/**
 * Describes the message zitadel.admin.v1.AddIDPToLoginPolicyResponse.
 * Use `create(AddIDPToLoginPolicyResponseSchema)` to create a new message.
 */
export const AddIDPToLoginPolicyResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 251);

/**
 * Describes the message zitadel.admin.v1.RemoveIDPFromLoginPolicyRequest.
 * Use `create(RemoveIDPFromLoginPolicyRequestSchema)` to create a new message.
 */
export const RemoveIDPFromLoginPolicyRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 252);

/**
 * Describes the message zitadel.admin.v1.RemoveIDPFromLoginPolicyResponse.
 * Use `create(RemoveIDPFromLoginPolicyResponseSchema)` to create a new message.
 */
export const RemoveIDPFromLoginPolicyResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 253);

/**
 * Describes the message zitadel.admin.v1.ListLoginPolicySecondFactorsRequest.
 * Use `create(ListLoginPolicySecondFactorsRequestSchema)` to create a new message.
 */
export const ListLoginPolicySecondFactorsRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 254);

/**
 * Describes the message zitadel.admin.v1.ListLoginPolicySecondFactorsResponse.
 * Use `create(ListLoginPolicySecondFactorsResponseSchema)` to create a new message.
 */
export const ListLoginPolicySecondFactorsResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 255);

/**
 * Describes the message zitadel.admin.v1.AddSecondFactorToLoginPolicyRequest.
 * Use `create(AddSecondFactorToLoginPolicyRequestSchema)` to create a new message.
 */
export const AddSecondFactorToLoginPolicyRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 256);

/**
 * Describes the message zitadel.admin.v1.AddSecondFactorToLoginPolicyResponse.
 * Use `create(AddSecondFactorToLoginPolicyResponseSchema)` to create a new message.
 */
export const AddSecondFactorToLoginPolicyResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 257);

/**
 * Describes the message zitadel.admin.v1.RemoveSecondFactorFromLoginPolicyRequest.
 * Use `create(RemoveSecondFactorFromLoginPolicyRequestSchema)` to create a new message.
 */
export const RemoveSecondFactorFromLoginPolicyRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 258);

/**
 * Describes the message zitadel.admin.v1.RemoveSecondFactorFromLoginPolicyResponse.
 * Use `create(RemoveSecondFactorFromLoginPolicyResponseSchema)` to create a new message.
 */
export const RemoveSecondFactorFromLoginPolicyResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 259);

/**
 * Describes the message zitadel.admin.v1.ListLoginPolicyMultiFactorsRequest.
 * Use `create(ListLoginPolicyMultiFactorsRequestSchema)` to create a new message.
 */
export const ListLoginPolicyMultiFactorsRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 260);

/**
 * Describes the message zitadel.admin.v1.ListLoginPolicyMultiFactorsResponse.
 * Use `create(ListLoginPolicyMultiFactorsResponseSchema)` to create a new message.
 */
export const ListLoginPolicyMultiFactorsResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 261);

/**
 * Describes the message zitadel.admin.v1.AddMultiFactorToLoginPolicyRequest.
 * Use `create(AddMultiFactorToLoginPolicyRequestSchema)` to create a new message.
 */
export const AddMultiFactorToLoginPolicyRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 262);

/**
 * Describes the message zitadel.admin.v1.AddMultiFactorToLoginPolicyResponse.
 * Use `create(AddMultiFactorToLoginPolicyResponseSchema)` to create a new message.
 */
export const AddMultiFactorToLoginPolicyResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 263);

/**
 * Describes the message zitadel.admin.v1.RemoveMultiFactorFromLoginPolicyRequest.
 * Use `create(RemoveMultiFactorFromLoginPolicyRequestSchema)` to create a new message.
 */
export const RemoveMultiFactorFromLoginPolicyRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 264);

/**
 * Describes the message zitadel.admin.v1.RemoveMultiFactorFromLoginPolicyResponse.
 * Use `create(RemoveMultiFactorFromLoginPolicyResponseSchema)` to create a new message.
 */
export const RemoveMultiFactorFromLoginPolicyResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 265);

/**
 * Describes the message zitadel.admin.v1.GetPasswordComplexityPolicyRequest.
 * Use `create(GetPasswordComplexityPolicyRequestSchema)` to create a new message.
 */
export const GetPasswordComplexityPolicyRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 266);

/**
 * Describes the message zitadel.admin.v1.GetPasswordComplexityPolicyResponse.
 * Use `create(GetPasswordComplexityPolicyResponseSchema)` to create a new message.
 */
export const GetPasswordComplexityPolicyResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 267);

/**
 * Describes the message zitadel.admin.v1.UpdatePasswordComplexityPolicyRequest.
 * Use `create(UpdatePasswordComplexityPolicyRequestSchema)` to create a new message.
 */
export const UpdatePasswordComplexityPolicyRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 268);

/**
 * Describes the message zitadel.admin.v1.UpdatePasswordComplexityPolicyResponse.
 * Use `create(UpdatePasswordComplexityPolicyResponseSchema)` to create a new message.
 */
export const UpdatePasswordComplexityPolicyResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 269);

/**
 * Describes the message zitadel.admin.v1.GetPasswordAgePolicyRequest.
 * Use `create(GetPasswordAgePolicyRequestSchema)` to create a new message.
 */
export const GetPasswordAgePolicyRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 270);

/**
 * Describes the message zitadel.admin.v1.GetPasswordAgePolicyResponse.
 * Use `create(GetPasswordAgePolicyResponseSchema)` to create a new message.
 */
export const GetPasswordAgePolicyResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 271);

/**
 * Describes the message zitadel.admin.v1.UpdatePasswordAgePolicyRequest.
 * Use `create(UpdatePasswordAgePolicyRequestSchema)` to create a new message.
 */
export const UpdatePasswordAgePolicyRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 272);

/**
 * Describes the message zitadel.admin.v1.UpdatePasswordAgePolicyResponse.
 * Use `create(UpdatePasswordAgePolicyResponseSchema)` to create a new message.
 */
export const UpdatePasswordAgePolicyResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 273);

/**
 * Describes the message zitadel.admin.v1.GetLockoutPolicyRequest.
 * Use `create(GetLockoutPolicyRequestSchema)` to create a new message.
 */
export const GetLockoutPolicyRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 274);

/**
 * Describes the message zitadel.admin.v1.GetLockoutPolicyResponse.
 * Use `create(GetLockoutPolicyResponseSchema)` to create a new message.
 */
export const GetLockoutPolicyResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 275);

/**
 * Describes the message zitadel.admin.v1.UpdateLockoutPolicyRequest.
 * Use `create(UpdateLockoutPolicyRequestSchema)` to create a new message.
 */
export const UpdateLockoutPolicyRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 276);

/**
 * Describes the message zitadel.admin.v1.UpdateLockoutPolicyResponse.
 * Use `create(UpdateLockoutPolicyResponseSchema)` to create a new message.
 */
export const UpdateLockoutPolicyResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 277);

/**
 * Describes the message zitadel.admin.v1.GetPrivacyPolicyRequest.
 * Use `create(GetPrivacyPolicyRequestSchema)` to create a new message.
 */
export const GetPrivacyPolicyRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 278);

/**
 * Describes the message zitadel.admin.v1.GetPrivacyPolicyResponse.
 * Use `create(GetPrivacyPolicyResponseSchema)` to create a new message.
 */
export const GetPrivacyPolicyResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 279);

/**
 * Describes the message zitadel.admin.v1.UpdatePrivacyPolicyRequest.
 * Use `create(UpdatePrivacyPolicyRequestSchema)` to create a new message.
 */
export const UpdatePrivacyPolicyRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 280);

/**
 * Describes the message zitadel.admin.v1.UpdatePrivacyPolicyResponse.
 * Use `create(UpdatePrivacyPolicyResponseSchema)` to create a new message.
 */
export const UpdatePrivacyPolicyResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 281);

/**
 * Describes the message zitadel.admin.v1.AddNotificationPolicyRequest.
 * Use `create(AddNotificationPolicyRequestSchema)` to create a new message.
 */
export const AddNotificationPolicyRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 282);

/**
 * Describes the message zitadel.admin.v1.AddNotificationPolicyResponse.
 * Use `create(AddNotificationPolicyResponseSchema)` to create a new message.
 */
export const AddNotificationPolicyResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 283);

/**
 * Describes the message zitadel.admin.v1.GetNotificationPolicyRequest.
 * Use `create(GetNotificationPolicyRequestSchema)` to create a new message.
 */
export const GetNotificationPolicyRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 284);

/**
 * Describes the message zitadel.admin.v1.GetNotificationPolicyResponse.
 * Use `create(GetNotificationPolicyResponseSchema)` to create a new message.
 */
export const GetNotificationPolicyResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 285);

/**
 * Describes the message zitadel.admin.v1.UpdateNotificationPolicyRequest.
 * Use `create(UpdateNotificationPolicyRequestSchema)` to create a new message.
 */
export const UpdateNotificationPolicyRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 286);

/**
 * Describes the message zitadel.admin.v1.UpdateNotificationPolicyResponse.
 * Use `create(UpdateNotificationPolicyResponseSchema)` to create a new message.
 */
export const UpdateNotificationPolicyResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 287);

/**
 * Describes the message zitadel.admin.v1.GetDefaultInitMessageTextRequest.
 * Use `create(GetDefaultInitMessageTextRequestSchema)` to create a new message.
 */
export const GetDefaultInitMessageTextRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 288);

/**
 * Describes the message zitadel.admin.v1.GetDefaultInitMessageTextResponse.
 * Use `create(GetDefaultInitMessageTextResponseSchema)` to create a new message.
 */
export const GetDefaultInitMessageTextResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 289);

/**
 * Describes the message zitadel.admin.v1.GetCustomInitMessageTextRequest.
 * Use `create(GetCustomInitMessageTextRequestSchema)` to create a new message.
 */
export const GetCustomInitMessageTextRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 290);

/**
 * Describes the message zitadel.admin.v1.GetCustomInitMessageTextResponse.
 * Use `create(GetCustomInitMessageTextResponseSchema)` to create a new message.
 */
export const GetCustomInitMessageTextResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 291);

/**
 * Describes the message zitadel.admin.v1.SetDefaultInitMessageTextRequest.
 * Use `create(SetDefaultInitMessageTextRequestSchema)` to create a new message.
 */
export const SetDefaultInitMessageTextRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 292);

/**
 * Describes the message zitadel.admin.v1.SetDefaultInitMessageTextResponse.
 * Use `create(SetDefaultInitMessageTextResponseSchema)` to create a new message.
 */
export const SetDefaultInitMessageTextResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 293);

/**
 * Describes the message zitadel.admin.v1.ResetCustomInitMessageTextToDefaultRequest.
 * Use `create(ResetCustomInitMessageTextToDefaultRequestSchema)` to create a new message.
 */
export const ResetCustomInitMessageTextToDefaultRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 294);

/**
 * Describes the message zitadel.admin.v1.ResetCustomInitMessageTextToDefaultResponse.
 * Use `create(ResetCustomInitMessageTextToDefaultResponseSchema)` to create a new message.
 */
export const ResetCustomInitMessageTextToDefaultResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 295);

/**
 * Describes the message zitadel.admin.v1.GetDefaultPasswordResetMessageTextRequest.
 * Use `create(GetDefaultPasswordResetMessageTextRequestSchema)` to create a new message.
 */
export const GetDefaultPasswordResetMessageTextRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 296);

/**
 * Describes the message zitadel.admin.v1.GetDefaultPasswordResetMessageTextResponse.
 * Use `create(GetDefaultPasswordResetMessageTextResponseSchema)` to create a new message.
 */
export const GetDefaultPasswordResetMessageTextResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 297);

/**
 * Describes the message zitadel.admin.v1.GetCustomPasswordResetMessageTextRequest.
 * Use `create(GetCustomPasswordResetMessageTextRequestSchema)` to create a new message.
 */
export const GetCustomPasswordResetMessageTextRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 298);

/**
 * Describes the message zitadel.admin.v1.GetCustomPasswordResetMessageTextResponse.
 * Use `create(GetCustomPasswordResetMessageTextResponseSchema)` to create a new message.
 */
export const GetCustomPasswordResetMessageTextResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 299);

/**
 * Describes the message zitadel.admin.v1.SetDefaultPasswordResetMessageTextRequest.
 * Use `create(SetDefaultPasswordResetMessageTextRequestSchema)` to create a new message.
 */
export const SetDefaultPasswordResetMessageTextRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 300);

/**
 * Describes the message zitadel.admin.v1.SetDefaultPasswordResetMessageTextResponse.
 * Use `create(SetDefaultPasswordResetMessageTextResponseSchema)` to create a new message.
 */
export const SetDefaultPasswordResetMessageTextResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 301);

/**
 * Describes the message zitadel.admin.v1.ResetCustomPasswordResetMessageTextToDefaultRequest.
 * Use `create(ResetCustomPasswordResetMessageTextToDefaultRequestSchema)` to create a new message.
 */
export const ResetCustomPasswordResetMessageTextToDefaultRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 302);

/**
 * Describes the message zitadel.admin.v1.ResetCustomPasswordResetMessageTextToDefaultResponse.
 * Use `create(ResetCustomPasswordResetMessageTextToDefaultResponseSchema)` to create a new message.
 */
export const ResetCustomPasswordResetMessageTextToDefaultResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 303);

/**
 * Describes the message zitadel.admin.v1.GetDefaultVerifyEmailMessageTextRequest.
 * Use `create(GetDefaultVerifyEmailMessageTextRequestSchema)` to create a new message.
 */
export const GetDefaultVerifyEmailMessageTextRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 304);

/**
 * Describes the message zitadel.admin.v1.GetDefaultVerifyEmailMessageTextResponse.
 * Use `create(GetDefaultVerifyEmailMessageTextResponseSchema)` to create a new message.
 */
export const GetDefaultVerifyEmailMessageTextResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 305);

/**
 * Describes the message zitadel.admin.v1.GetCustomVerifyEmailMessageTextRequest.
 * Use `create(GetCustomVerifyEmailMessageTextRequestSchema)` to create a new message.
 */
export const GetCustomVerifyEmailMessageTextRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 306);

/**
 * Describes the message zitadel.admin.v1.GetCustomVerifyEmailMessageTextResponse.
 * Use `create(GetCustomVerifyEmailMessageTextResponseSchema)` to create a new message.
 */
export const GetCustomVerifyEmailMessageTextResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 307);

/**
 * Describes the message zitadel.admin.v1.SetDefaultVerifyEmailMessageTextRequest.
 * Use `create(SetDefaultVerifyEmailMessageTextRequestSchema)` to create a new message.
 */
export const SetDefaultVerifyEmailMessageTextRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 308);

/**
 * Describes the message zitadel.admin.v1.SetDefaultVerifyEmailMessageTextResponse.
 * Use `create(SetDefaultVerifyEmailMessageTextResponseSchema)` to create a new message.
 */
export const SetDefaultVerifyEmailMessageTextResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 309);

/**
 * Describes the message zitadel.admin.v1.ResetCustomVerifyEmailMessageTextToDefaultRequest.
 * Use `create(ResetCustomVerifyEmailMessageTextToDefaultRequestSchema)` to create a new message.
 */
export const ResetCustomVerifyEmailMessageTextToDefaultRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 310);

/**
 * Describes the message zitadel.admin.v1.ResetCustomVerifyEmailMessageTextToDefaultResponse.
 * Use `create(ResetCustomVerifyEmailMessageTextToDefaultResponseSchema)` to create a new message.
 */
export const ResetCustomVerifyEmailMessageTextToDefaultResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 311);

/**
 * Describes the message zitadel.admin.v1.GetDefaultVerifyPhoneMessageTextRequest.
 * Use `create(GetDefaultVerifyPhoneMessageTextRequestSchema)` to create a new message.
 */
export const GetDefaultVerifyPhoneMessageTextRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 312);

/**
 * Describes the message zitadel.admin.v1.GetDefaultVerifyPhoneMessageTextResponse.
 * Use `create(GetDefaultVerifyPhoneMessageTextResponseSchema)` to create a new message.
 */
export const GetDefaultVerifyPhoneMessageTextResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 313);

/**
 * Describes the message zitadel.admin.v1.GetCustomVerifyPhoneMessageTextRequest.
 * Use `create(GetCustomVerifyPhoneMessageTextRequestSchema)` to create a new message.
 */
export const GetCustomVerifyPhoneMessageTextRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 314);

/**
 * Describes the message zitadel.admin.v1.GetCustomVerifyPhoneMessageTextResponse.
 * Use `create(GetCustomVerifyPhoneMessageTextResponseSchema)` to create a new message.
 */
export const GetCustomVerifyPhoneMessageTextResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 315);

/**
 * Describes the message zitadel.admin.v1.SetDefaultVerifyPhoneMessageTextRequest.
 * Use `create(SetDefaultVerifyPhoneMessageTextRequestSchema)` to create a new message.
 */
export const SetDefaultVerifyPhoneMessageTextRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 316);

/**
 * Describes the message zitadel.admin.v1.SetDefaultVerifyPhoneMessageTextResponse.
 * Use `create(SetDefaultVerifyPhoneMessageTextResponseSchema)` to create a new message.
 */
export const SetDefaultVerifyPhoneMessageTextResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 317);

/**
 * Describes the message zitadel.admin.v1.ResetCustomVerifyPhoneMessageTextToDefaultRequest.
 * Use `create(ResetCustomVerifyPhoneMessageTextToDefaultRequestSchema)` to create a new message.
 */
export const ResetCustomVerifyPhoneMessageTextToDefaultRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 318);

/**
 * Describes the message zitadel.admin.v1.ResetCustomVerifyPhoneMessageTextToDefaultResponse.
 * Use `create(ResetCustomVerifyPhoneMessageTextToDefaultResponseSchema)` to create a new message.
 */
export const ResetCustomVerifyPhoneMessageTextToDefaultResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 319);

/**
 * Describes the message zitadel.admin.v1.GetCustomVerifySMSOTPMessageTextRequest.
 * Use `create(GetCustomVerifySMSOTPMessageTextRequestSchema)` to create a new message.
 */
export const GetCustomVerifySMSOTPMessageTextRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 320);

/**
 * Describes the message zitadel.admin.v1.GetCustomVerifySMSOTPMessageTextResponse.
 * Use `create(GetCustomVerifySMSOTPMessageTextResponseSchema)` to create a new message.
 */
export const GetCustomVerifySMSOTPMessageTextResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 321);

/**
 * Describes the message zitadel.admin.v1.GetDefaultVerifySMSOTPMessageTextRequest.
 * Use `create(GetDefaultVerifySMSOTPMessageTextRequestSchema)` to create a new message.
 */
export const GetDefaultVerifySMSOTPMessageTextRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 322);

/**
 * Describes the message zitadel.admin.v1.GetDefaultVerifySMSOTPMessageTextResponse.
 * Use `create(GetDefaultVerifySMSOTPMessageTextResponseSchema)` to create a new message.
 */
export const GetDefaultVerifySMSOTPMessageTextResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 323);

/**
 * Describes the message zitadel.admin.v1.SetDefaultVerifySMSOTPMessageTextRequest.
 * Use `create(SetDefaultVerifySMSOTPMessageTextRequestSchema)` to create a new message.
 */
export const SetDefaultVerifySMSOTPMessageTextRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 324);

/**
 * Describes the message zitadel.admin.v1.SetDefaultVerifySMSOTPMessageTextResponse.
 * Use `create(SetDefaultVerifySMSOTPMessageTextResponseSchema)` to create a new message.
 */
export const SetDefaultVerifySMSOTPMessageTextResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 325);

/**
 * Describes the message zitadel.admin.v1.ResetCustomVerifySMSOTPMessageTextToDefaultRequest.
 * Use `create(ResetCustomVerifySMSOTPMessageTextToDefaultRequestSchema)` to create a new message.
 */
export const ResetCustomVerifySMSOTPMessageTextToDefaultRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 326);

/**
 * Describes the message zitadel.admin.v1.ResetCustomVerifySMSOTPMessageTextToDefaultResponse.
 * Use `create(ResetCustomVerifySMSOTPMessageTextToDefaultResponseSchema)` to create a new message.
 */
export const ResetCustomVerifySMSOTPMessageTextToDefaultResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 327);

/**
 * Describes the message zitadel.admin.v1.GetCustomVerifyEmailOTPMessageTextRequest.
 * Use `create(GetCustomVerifyEmailOTPMessageTextRequestSchema)` to create a new message.
 */
export const GetCustomVerifyEmailOTPMessageTextRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 328);

/**
 * Describes the message zitadel.admin.v1.GetCustomVerifyEmailOTPMessageTextResponse.
 * Use `create(GetCustomVerifyEmailOTPMessageTextResponseSchema)` to create a new message.
 */
export const GetCustomVerifyEmailOTPMessageTextResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 329);

/**
 * Describes the message zitadel.admin.v1.GetDefaultVerifyEmailOTPMessageTextRequest.
 * Use `create(GetDefaultVerifyEmailOTPMessageTextRequestSchema)` to create a new message.
 */
export const GetDefaultVerifyEmailOTPMessageTextRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 330);

/**
 * Describes the message zitadel.admin.v1.GetDefaultVerifyEmailOTPMessageTextResponse.
 * Use `create(GetDefaultVerifyEmailOTPMessageTextResponseSchema)` to create a new message.
 */
export const GetDefaultVerifyEmailOTPMessageTextResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 331);

/**
 * Describes the message zitadel.admin.v1.SetDefaultVerifyEmailOTPMessageTextRequest.
 * Use `create(SetDefaultVerifyEmailOTPMessageTextRequestSchema)` to create a new message.
 */
export const SetDefaultVerifyEmailOTPMessageTextRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 332);

/**
 * Describes the message zitadel.admin.v1.SetDefaultVerifyEmailOTPMessageTextResponse.
 * Use `create(SetDefaultVerifyEmailOTPMessageTextResponseSchema)` to create a new message.
 */
export const SetDefaultVerifyEmailOTPMessageTextResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 333);

/**
 * Describes the message zitadel.admin.v1.ResetCustomVerifyEmailOTPMessageTextToDefaultRequest.
 * Use `create(ResetCustomVerifyEmailOTPMessageTextToDefaultRequestSchema)` to create a new message.
 */
export const ResetCustomVerifyEmailOTPMessageTextToDefaultRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 334);

/**
 * Describes the message zitadel.admin.v1.ResetCustomVerifyEmailOTPMessageTextToDefaultResponse.
 * Use `create(ResetCustomVerifyEmailOTPMessageTextToDefaultResponseSchema)` to create a new message.
 */
export const ResetCustomVerifyEmailOTPMessageTextToDefaultResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 335);

/**
 * Describes the message zitadel.admin.v1.GetDefaultDomainClaimedMessageTextRequest.
 * Use `create(GetDefaultDomainClaimedMessageTextRequestSchema)` to create a new message.
 */
export const GetDefaultDomainClaimedMessageTextRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 336);

/**
 * Describes the message zitadel.admin.v1.GetDefaultDomainClaimedMessageTextResponse.
 * Use `create(GetDefaultDomainClaimedMessageTextResponseSchema)` to create a new message.
 */
export const GetDefaultDomainClaimedMessageTextResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 337);

/**
 * Describes the message zitadel.admin.v1.GetCustomDomainClaimedMessageTextRequest.
 * Use `create(GetCustomDomainClaimedMessageTextRequestSchema)` to create a new message.
 */
export const GetCustomDomainClaimedMessageTextRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 338);

/**
 * Describes the message zitadel.admin.v1.GetCustomDomainClaimedMessageTextResponse.
 * Use `create(GetCustomDomainClaimedMessageTextResponseSchema)` to create a new message.
 */
export const GetCustomDomainClaimedMessageTextResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 339);

/**
 * Describes the message zitadel.admin.v1.SetDefaultDomainClaimedMessageTextRequest.
 * Use `create(SetDefaultDomainClaimedMessageTextRequestSchema)` to create a new message.
 */
export const SetDefaultDomainClaimedMessageTextRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 340);

/**
 * Describes the message zitadel.admin.v1.SetDefaultDomainClaimedMessageTextResponse.
 * Use `create(SetDefaultDomainClaimedMessageTextResponseSchema)` to create a new message.
 */
export const SetDefaultDomainClaimedMessageTextResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 341);

/**
 * Describes the message zitadel.admin.v1.ResetCustomDomainClaimedMessageTextToDefaultRequest.
 * Use `create(ResetCustomDomainClaimedMessageTextToDefaultRequestSchema)` to create a new message.
 */
export const ResetCustomDomainClaimedMessageTextToDefaultRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 342);

/**
 * Describes the message zitadel.admin.v1.ResetCustomDomainClaimedMessageTextToDefaultResponse.
 * Use `create(ResetCustomDomainClaimedMessageTextToDefaultResponseSchema)` to create a new message.
 */
export const ResetCustomDomainClaimedMessageTextToDefaultResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 343);

/**
 * Describes the message zitadel.admin.v1.GetDefaultPasswordChangeMessageTextRequest.
 * Use `create(GetDefaultPasswordChangeMessageTextRequestSchema)` to create a new message.
 */
export const GetDefaultPasswordChangeMessageTextRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 344);

/**
 * Describes the message zitadel.admin.v1.GetDefaultPasswordChangeMessageTextResponse.
 * Use `create(GetDefaultPasswordChangeMessageTextResponseSchema)` to create a new message.
 */
export const GetDefaultPasswordChangeMessageTextResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 345);

/**
 * Describes the message zitadel.admin.v1.GetCustomPasswordChangeMessageTextRequest.
 * Use `create(GetCustomPasswordChangeMessageTextRequestSchema)` to create a new message.
 */
export const GetCustomPasswordChangeMessageTextRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 346);

/**
 * Describes the message zitadel.admin.v1.GetCustomPasswordChangeMessageTextResponse.
 * Use `create(GetCustomPasswordChangeMessageTextResponseSchema)` to create a new message.
 */
export const GetCustomPasswordChangeMessageTextResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 347);

/**
 * Describes the message zitadel.admin.v1.SetDefaultPasswordChangeMessageTextRequest.
 * Use `create(SetDefaultPasswordChangeMessageTextRequestSchema)` to create a new message.
 */
export const SetDefaultPasswordChangeMessageTextRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 348);

/**
 * Describes the message zitadel.admin.v1.SetDefaultPasswordChangeMessageTextResponse.
 * Use `create(SetDefaultPasswordChangeMessageTextResponseSchema)` to create a new message.
 */
export const SetDefaultPasswordChangeMessageTextResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 349);

/**
 * Describes the message zitadel.admin.v1.ResetCustomPasswordChangeMessageTextToDefaultRequest.
 * Use `create(ResetCustomPasswordChangeMessageTextToDefaultRequestSchema)` to create a new message.
 */
export const ResetCustomPasswordChangeMessageTextToDefaultRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 350);

/**
 * Describes the message zitadel.admin.v1.ResetCustomPasswordChangeMessageTextToDefaultResponse.
 * Use `create(ResetCustomPasswordChangeMessageTextToDefaultResponseSchema)` to create a new message.
 */
export const ResetCustomPasswordChangeMessageTextToDefaultResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 351);

/**
 * Describes the message zitadel.admin.v1.GetDefaultInviteUserMessageTextRequest.
 * Use `create(GetDefaultInviteUserMessageTextRequestSchema)` to create a new message.
 */
export const GetDefaultInviteUserMessageTextRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 352);

/**
 * Describes the message zitadel.admin.v1.GetDefaultInviteUserMessageTextResponse.
 * Use `create(GetDefaultInviteUserMessageTextResponseSchema)` to create a new message.
 */
export const GetDefaultInviteUserMessageTextResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 353);

/**
 * Describes the message zitadel.admin.v1.GetCustomInviteUserMessageTextRequest.
 * Use `create(GetCustomInviteUserMessageTextRequestSchema)` to create a new message.
 */
export const GetCustomInviteUserMessageTextRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 354);

/**
 * Describes the message zitadel.admin.v1.GetCustomInviteUserMessageTextResponse.
 * Use `create(GetCustomInviteUserMessageTextResponseSchema)` to create a new message.
 */
export const GetCustomInviteUserMessageTextResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 355);

/**
 * Describes the message zitadel.admin.v1.SetDefaultInviteUserMessageTextRequest.
 * Use `create(SetDefaultInviteUserMessageTextRequestSchema)` to create a new message.
 */
export const SetDefaultInviteUserMessageTextRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 356);

/**
 * Describes the message zitadel.admin.v1.SetDefaultInviteUserMessageTextResponse.
 * Use `create(SetDefaultInviteUserMessageTextResponseSchema)` to create a new message.
 */
export const SetDefaultInviteUserMessageTextResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 357);

/**
 * Describes the message zitadel.admin.v1.ResetCustomInviteUserMessageTextToDefaultRequest.
 * Use `create(ResetCustomInviteUserMessageTextToDefaultRequestSchema)` to create a new message.
 */
export const ResetCustomInviteUserMessageTextToDefaultRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 358);

/**
 * Describes the message zitadel.admin.v1.ResetCustomInviteUserMessageTextToDefaultResponse.
 * Use `create(ResetCustomInviteUserMessageTextToDefaultResponseSchema)` to create a new message.
 */
export const ResetCustomInviteUserMessageTextToDefaultResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 359);

/**
 * Describes the message zitadel.admin.v1.GetDefaultPasswordlessRegistrationMessageTextRequest.
 * Use `create(GetDefaultPasswordlessRegistrationMessageTextRequestSchema)` to create a new message.
 */
export const GetDefaultPasswordlessRegistrationMessageTextRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 360);

/**
 * Describes the message zitadel.admin.v1.GetDefaultPasswordlessRegistrationMessageTextResponse.
 * Use `create(GetDefaultPasswordlessRegistrationMessageTextResponseSchema)` to create a new message.
 */
export const GetDefaultPasswordlessRegistrationMessageTextResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 361);

/**
 * Describes the message zitadel.admin.v1.GetCustomPasswordlessRegistrationMessageTextRequest.
 * Use `create(GetCustomPasswordlessRegistrationMessageTextRequestSchema)` to create a new message.
 */
export const GetCustomPasswordlessRegistrationMessageTextRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 362);

/**
 * Describes the message zitadel.admin.v1.GetCustomPasswordlessRegistrationMessageTextResponse.
 * Use `create(GetCustomPasswordlessRegistrationMessageTextResponseSchema)` to create a new message.
 */
export const GetCustomPasswordlessRegistrationMessageTextResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 363);

/**
 * Describes the message zitadel.admin.v1.SetDefaultPasswordlessRegistrationMessageTextRequest.
 * Use `create(SetDefaultPasswordlessRegistrationMessageTextRequestSchema)` to create a new message.
 */
export const SetDefaultPasswordlessRegistrationMessageTextRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 364);

/**
 * Describes the message zitadel.admin.v1.SetDefaultPasswordlessRegistrationMessageTextResponse.
 * Use `create(SetDefaultPasswordlessRegistrationMessageTextResponseSchema)` to create a new message.
 */
export const SetDefaultPasswordlessRegistrationMessageTextResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 365);

/**
 * Describes the message zitadel.admin.v1.ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest.
 * Use `create(ResetCustomPasswordlessRegistrationMessageTextToDefaultRequestSchema)` to create a new message.
 */
export const ResetCustomPasswordlessRegistrationMessageTextToDefaultRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 366);

/**
 * Describes the message zitadel.admin.v1.ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse.
 * Use `create(ResetCustomPasswordlessRegistrationMessageTextToDefaultResponseSchema)` to create a new message.
 */
export const ResetCustomPasswordlessRegistrationMessageTextToDefaultResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 367);

/**
 * Describes the message zitadel.admin.v1.GetDefaultLoginTextsRequest.
 * Use `create(GetDefaultLoginTextsRequestSchema)` to create a new message.
 */
export const GetDefaultLoginTextsRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 368);

/**
 * Describes the message zitadel.admin.v1.GetDefaultLoginTextsResponse.
 * Use `create(GetDefaultLoginTextsResponseSchema)` to create a new message.
 */
export const GetDefaultLoginTextsResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 369);

/**
 * Describes the message zitadel.admin.v1.GetCustomLoginTextsRequest.
 * Use `create(GetCustomLoginTextsRequestSchema)` to create a new message.
 */
export const GetCustomLoginTextsRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 370);

/**
 * Describes the message zitadel.admin.v1.GetCustomLoginTextsResponse.
 * Use `create(GetCustomLoginTextsResponseSchema)` to create a new message.
 */
export const GetCustomLoginTextsResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 371);

/**
 * Describes the message zitadel.admin.v1.SetCustomLoginTextsRequest.
 * Use `create(SetCustomLoginTextsRequestSchema)` to create a new message.
 */
export const SetCustomLoginTextsRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 372);

/**
 * Describes the message zitadel.admin.v1.SetCustomLoginTextsResponse.
 * Use `create(SetCustomLoginTextsResponseSchema)` to create a new message.
 */
export const SetCustomLoginTextsResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 373);

/**
 * Describes the message zitadel.admin.v1.ResetCustomLoginTextsToDefaultRequest.
 * Use `create(ResetCustomLoginTextsToDefaultRequestSchema)` to create a new message.
 */
export const ResetCustomLoginTextsToDefaultRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 374);

/**
 * Describes the message zitadel.admin.v1.ResetCustomLoginTextsToDefaultResponse.
 * Use `create(ResetCustomLoginTextsToDefaultResponseSchema)` to create a new message.
 */
export const ResetCustomLoginTextsToDefaultResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 375);

/**
 * Describes the message zitadel.admin.v1.AddIAMMemberRequest.
 * Use `create(AddIAMMemberRequestSchema)` to create a new message.
 */
export const AddIAMMemberRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 376);

/**
 * Describes the message zitadel.admin.v1.AddIAMMemberResponse.
 * Use `create(AddIAMMemberResponseSchema)` to create a new message.
 */
export const AddIAMMemberResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 377);

/**
 * Describes the message zitadel.admin.v1.UpdateIAMMemberRequest.
 * Use `create(UpdateIAMMemberRequestSchema)` to create a new message.
 */
export const UpdateIAMMemberRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 378);

/**
 * Describes the message zitadel.admin.v1.UpdateIAMMemberResponse.
 * Use `create(UpdateIAMMemberResponseSchema)` to create a new message.
 */
export const UpdateIAMMemberResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 379);

/**
 * Describes the message zitadel.admin.v1.RemoveIAMMemberRequest.
 * Use `create(RemoveIAMMemberRequestSchema)` to create a new message.
 */
export const RemoveIAMMemberRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 380);

/**
 * Describes the message zitadel.admin.v1.RemoveIAMMemberResponse.
 * Use `create(RemoveIAMMemberResponseSchema)` to create a new message.
 */
export const RemoveIAMMemberResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 381);

/**
 * Describes the message zitadel.admin.v1.ListIAMMemberRolesRequest.
 * Use `create(ListIAMMemberRolesRequestSchema)` to create a new message.
 */
export const ListIAMMemberRolesRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 382);

/**
 * Describes the message zitadel.admin.v1.ListIAMMemberRolesResponse.
 * Use `create(ListIAMMemberRolesResponseSchema)` to create a new message.
 */
export const ListIAMMemberRolesResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 383);

/**
 * Describes the message zitadel.admin.v1.ListIAMMembersRequest.
 * Use `create(ListIAMMembersRequestSchema)` to create a new message.
 */
export const ListIAMMembersRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 384);

/**
 * Describes the message zitadel.admin.v1.ListIAMMembersResponse.
 * Use `create(ListIAMMembersResponseSchema)` to create a new message.
 */
export const ListIAMMembersResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 385);

/**
 * Describes the message zitadel.admin.v1.ListViewsRequest.
 * Use `create(ListViewsRequestSchema)` to create a new message.
 */
export const ListViewsRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 386);

/**
 * Describes the message zitadel.admin.v1.ListViewsResponse.
 * Use `create(ListViewsResponseSchema)` to create a new message.
 */
export const ListViewsResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 387);

/**
 * Describes the message zitadel.admin.v1.ListFailedEventsRequest.
 * Use `create(ListFailedEventsRequestSchema)` to create a new message.
 */
export const ListFailedEventsRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 388);

/**
 * Describes the message zitadel.admin.v1.ListFailedEventsResponse.
 * Use `create(ListFailedEventsResponseSchema)` to create a new message.
 */
export const ListFailedEventsResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 389);

/**
 * Describes the message zitadel.admin.v1.RemoveFailedEventRequest.
 * Use `create(RemoveFailedEventRequestSchema)` to create a new message.
 */
export const RemoveFailedEventRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 390);

/**
 * Describes the message zitadel.admin.v1.RemoveFailedEventResponse.
 * Use `create(RemoveFailedEventResponseSchema)` to create a new message.
 */
export const RemoveFailedEventResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 391);

/**
 * Describes the message zitadel.admin.v1.View.
 * Use `create(ViewSchema)` to create a new message.
 */
export const ViewSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 392);

/**
 * Describes the message zitadel.admin.v1.FailedEvent.
 * Use `create(FailedEventSchema)` to create a new message.
 */
export const FailedEventSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 393);

/**
 * Describes the message zitadel.admin.v1.ImportDataRequest.
 * Use `create(ImportDataRequestSchema)` to create a new message.
 */
export const ImportDataRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 394);

/**
 * Describes the message zitadel.admin.v1.ImportDataRequest.LocalInput.
 * Use `create(ImportDataRequest_LocalInputSchema)` to create a new message.
 */
export const ImportDataRequest_LocalInputSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 394, 0);

/**
 * Describes the message zitadel.admin.v1.ImportDataRequest.S3Input.
 * Use `create(ImportDataRequest_S3InputSchema)` to create a new message.
 */
export const ImportDataRequest_S3InputSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 394, 1);

/**
 * Describes the message zitadel.admin.v1.ImportDataRequest.GCSInput.
 * Use `create(ImportDataRequest_GCSInputSchema)` to create a new message.
 */
export const ImportDataRequest_GCSInputSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 394, 2);

/**
 * Describes the message zitadel.admin.v1.ImportDataOrg.
 * Use `create(ImportDataOrgSchema)` to create a new message.
 */
export const ImportDataOrgSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 395);

/**
 * Describes the message zitadel.admin.v1.DataOrg.
 * Use `create(DataOrgSchema)` to create a new message.
 */
export const DataOrgSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 396);

/**
 * Describes the message zitadel.admin.v1.ImportDataResponse.
 * Use `create(ImportDataResponseSchema)` to create a new message.
 */
export const ImportDataResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 397);

/**
 * Describes the message zitadel.admin.v1.ImportDataError.
 * Use `create(ImportDataErrorSchema)` to create a new message.
 */
export const ImportDataErrorSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 398);

/**
 * Describes the message zitadel.admin.v1.ImportDataSuccess.
 * Use `create(ImportDataSuccessSchema)` to create a new message.
 */
export const ImportDataSuccessSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 399);

/**
 * Describes the message zitadel.admin.v1.ImportDataSuccessOrg.
 * Use `create(ImportDataSuccessOrgSchema)` to create a new message.
 */
export const ImportDataSuccessOrgSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 400);

/**
 * Describes the message zitadel.admin.v1.ImportDataSuccessProjectGrant.
 * Use `create(ImportDataSuccessProjectGrantSchema)` to create a new message.
 */
export const ImportDataSuccessProjectGrantSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 401);

/**
 * Describes the message zitadel.admin.v1.ImportDataSuccessUserGrant.
 * Use `create(ImportDataSuccessUserGrantSchema)` to create a new message.
 */
export const ImportDataSuccessUserGrantSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 402);

/**
 * Describes the message zitadel.admin.v1.ImportDataSuccessProjectMember.
 * Use `create(ImportDataSuccessProjectMemberSchema)` to create a new message.
 */
export const ImportDataSuccessProjectMemberSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 403);

/**
 * Describes the message zitadel.admin.v1.ImportDataSuccessProjectGrantMember.
 * Use `create(ImportDataSuccessProjectGrantMemberSchema)` to create a new message.
 */
export const ImportDataSuccessProjectGrantMemberSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 404);

/**
 * Describes the message zitadel.admin.v1.ImportDataSuccessUserLinks.
 * Use `create(ImportDataSuccessUserLinksSchema)` to create a new message.
 */
export const ImportDataSuccessUserLinksSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 405);

/**
 * Describes the message zitadel.admin.v1.ImportDataSuccessUserMetadata.
 * Use `create(ImportDataSuccessUserMetadataSchema)` to create a new message.
 */
export const ImportDataSuccessUserMetadataSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 406);

/**
 * Describes the message zitadel.admin.v1.ExportDataRequest.
 * Use `create(ExportDataRequestSchema)` to create a new message.
 */
export const ExportDataRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 407);

/**
 * Describes the message zitadel.admin.v1.ExportDataRequest.LocalOutput.
 * Use `create(ExportDataRequest_LocalOutputSchema)` to create a new message.
 */
export const ExportDataRequest_LocalOutputSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 407, 0);

/**
 * Describes the message zitadel.admin.v1.ExportDataRequest.S3Output.
 * Use `create(ExportDataRequest_S3OutputSchema)` to create a new message.
 */
export const ExportDataRequest_S3OutputSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 407, 1);

/**
 * Describes the message zitadel.admin.v1.ExportDataRequest.GCSOutput.
 * Use `create(ExportDataRequest_GCSOutputSchema)` to create a new message.
 */
export const ExportDataRequest_GCSOutputSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 407, 2);

/**
 * Describes the message zitadel.admin.v1.ExportDataResponse.
 * Use `create(ExportDataResponseSchema)` to create a new message.
 */
export const ExportDataResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 408);

/**
 * Describes the message zitadel.admin.v1.ListEventsRequest.
 * Use `create(ListEventsRequestSchema)` to create a new message.
 */
export const ListEventsRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 409);

/**
 * Describes the message zitadel.admin.v1.ListEventsRequest.creation_date_range.
 * Use `create(ListEventsRequest_creation_date_rangeSchema)` to create a new message.
 */
export const ListEventsRequest_creation_date_rangeSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 409, 0);

/**
 * Describes the message zitadel.admin.v1.ListEventsResponse.
 * Use `create(ListEventsResponseSchema)` to create a new message.
 */
export const ListEventsResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 410);

/**
 * Describes the message zitadel.admin.v1.ListEventTypesRequest.
 * Use `create(ListEventTypesRequestSchema)` to create a new message.
 */
export const ListEventTypesRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 411);

/**
 * Describes the message zitadel.admin.v1.ListEventTypesResponse.
 * Use `create(ListEventTypesResponseSchema)` to create a new message.
 */
export const ListEventTypesResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 412);

/**
 * Describes the message zitadel.admin.v1.ListAggregateTypesRequest.
 * Use `create(ListAggregateTypesRequestSchema)` to create a new message.
 */
export const ListAggregateTypesRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 413);

/**
 * Describes the message zitadel.admin.v1.ListAggregateTypesResponse.
 * Use `create(ListAggregateTypesResponseSchema)` to create a new message.
 */
export const ListAggregateTypesResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 414);

/**
 * Describes the message zitadel.admin.v1.ActivateFeatureLoginDefaultOrgRequest.
 * Use `create(ActivateFeatureLoginDefaultOrgRequestSchema)` to create a new message.
 */
export const ActivateFeatureLoginDefaultOrgRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 415);

/**
 * Describes the message zitadel.admin.v1.ActivateFeatureLoginDefaultOrgResponse.
 * Use `create(ActivateFeatureLoginDefaultOrgResponseSchema)` to create a new message.
 */
export const ActivateFeatureLoginDefaultOrgResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 416);

/**
 * Describes the message zitadel.admin.v1.ListMilestonesRequest.
 * Use `create(ListMilestonesRequestSchema)` to create a new message.
 */
export const ListMilestonesRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 417);

/**
 * Describes the message zitadel.admin.v1.ListMilestonesResponse.
 * Use `create(ListMilestonesResponseSchema)` to create a new message.
 */
export const ListMilestonesResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 418);

/**
 * Describes the message zitadel.admin.v1.SetRestrictionsRequest.
 * Use `create(SetRestrictionsRequestSchema)` to create a new message.
 */
export const SetRestrictionsRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 419);

/**
 * Describes the message zitadel.admin.v1.SelectLanguages.
 * Use `create(SelectLanguagesSchema)` to create a new message.
 */
export const SelectLanguagesSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 420);

/**
 * Describes the message zitadel.admin.v1.SetRestrictionsResponse.
 * Use `create(SetRestrictionsResponseSchema)` to create a new message.
 */
export const SetRestrictionsResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 421);

/**
 * Describes the message zitadel.admin.v1.GetRestrictionsRequest.
 * Use `create(GetRestrictionsRequestSchema)` to create a new message.
 */
export const GetRestrictionsRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 422);

/**
 * Describes the message zitadel.admin.v1.GetRestrictionsResponse.
 * Use `create(GetRestrictionsResponseSchema)` to create a new message.
 */
export const GetRestrictionsResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_admin, 423);

/**
 * @generated from service zitadel.admin.v1.AdminService
 */
export const AdminService = /*@__PURE__*/
  serviceDesc(file_zitadel_admin, 0);

