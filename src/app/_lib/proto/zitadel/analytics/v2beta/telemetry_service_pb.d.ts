// @generated by protoc-gen-es v2.6.0 with parameter "json_types=true,import_extension=js"
// @generated from file zitadel/analytics/v2beta/telemetry_service.proto (package zitadel.analytics.v2beta, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import type { Message } from "@bufbuild/protobuf";
import type { InstanceInformation, InstanceInformationJson, ResourceCount, ResourceCountJson } from "./telemetry_pb.js";

/**
 * Describes the file zitadel/analytics/v2beta/telemetry_service.proto.
 */
export declare const file_zitadel_analytics_v2beta_telemetry_service: GenFile;

/**
 * @generated from message zitadel.analytics.v2beta.ReportBaseInformationRequest
 */
export declare type ReportBaseInformationRequest = Message<"zitadel.analytics.v2beta.ReportBaseInformationRequest"> & {
  /**
   * The system ID is a unique identifier for the ZITADEL system.
   *
   * @generated from field: string system_id = 1;
   */
  systemId: string;

  /**
   * The current version of the ZITADEL system.
   *
   * @generated from field: string version = 2;
   */
  version: string;

  /**
   * A list of instances in the ZITADEL system and their information.
   *
   * @generated from field: repeated zitadel.analytics.v2beta.InstanceInformation instances = 3;
   */
  instances: InstanceInformation[];
};

/**
 * @generated from message zitadel.analytics.v2beta.ReportBaseInformationRequest
 */
export declare type ReportBaseInformationRequestJson = {
  /**
   * The system ID is a unique identifier for the ZITADEL system.
   *
   * @generated from field: string system_id = 1;
   */
  systemId?: string;

  /**
   * The current version of the ZITADEL system.
   *
   * @generated from field: string version = 2;
   */
  version?: string;

  /**
   * A list of instances in the ZITADEL system and their information.
   *
   * @generated from field: repeated zitadel.analytics.v2beta.InstanceInformation instances = 3;
   */
  instances?: InstanceInformationJson[];
};

/**
 * Describes the message zitadel.analytics.v2beta.ReportBaseInformationRequest.
 * Use `create(ReportBaseInformationRequestSchema)` to create a new message.
 */
export declare const ReportBaseInformationRequestSchema: GenMessage<ReportBaseInformationRequest, {jsonType: ReportBaseInformationRequestJson}>;

/**
 * @generated from message zitadel.analytics.v2beta.ReportBaseInformationResponse
 */
export declare type ReportBaseInformationResponse = Message<"zitadel.analytics.v2beta.ReportBaseInformationResponse"> & {
  /**
   * The report ID is a unique identifier for the report.
   * It is used to identify the report to be able to link it to the resource counts or other reports.
   * Note that the report ID is only valid for the same system ID.
   *
   * @generated from field: string report_id = 1;
   */
  reportId: string;
};

/**
 * @generated from message zitadel.analytics.v2beta.ReportBaseInformationResponse
 */
export declare type ReportBaseInformationResponseJson = {
  /**
   * The report ID is a unique identifier for the report.
   * It is used to identify the report to be able to link it to the resource counts or other reports.
   * Note that the report ID is only valid for the same system ID.
   *
   * @generated from field: string report_id = 1;
   */
  reportId?: string;
};

/**
 * Describes the message zitadel.analytics.v2beta.ReportBaseInformationResponse.
 * Use `create(ReportBaseInformationResponseSchema)` to create a new message.
 */
export declare const ReportBaseInformationResponseSchema: GenMessage<ReportBaseInformationResponse, {jsonType: ReportBaseInformationResponseJson}>;

/**
 * @generated from message zitadel.analytics.v2beta.ReportResourceCountsRequest
 */
export declare type ReportResourceCountsRequest = Message<"zitadel.analytics.v2beta.ReportResourceCountsRequest"> & {
  /**
   * The system ID is a unique identifier for the ZITADEL system.
   *
   * @generated from field: string system_id = 1;
   */
  systemId: string;

  /**
   * The previously returned report ID from the server to continue reporting.
   * Note that the report ID is only valid for the same system ID.
   *
   * @generated from field: optional string report_id = 2;
   */
  reportId?: string;

  /**
   * A list of resource counts to report.
   *
   * @generated from field: repeated zitadel.analytics.v2beta.ResourceCount resource_counts = 3;
   */
  resourceCounts: ResourceCount[];
};

/**
 * @generated from message zitadel.analytics.v2beta.ReportResourceCountsRequest
 */
export declare type ReportResourceCountsRequestJson = {
  /**
   * The system ID is a unique identifier for the ZITADEL system.
   *
   * @generated from field: string system_id = 1;
   */
  systemId?: string;

  /**
   * The previously returned report ID from the server to continue reporting.
   * Note that the report ID is only valid for the same system ID.
   *
   * @generated from field: optional string report_id = 2;
   */
  reportId?: string;

  /**
   * A list of resource counts to report.
   *
   * @generated from field: repeated zitadel.analytics.v2beta.ResourceCount resource_counts = 3;
   */
  resourceCounts?: ResourceCountJson[];
};

/**
 * Describes the message zitadel.analytics.v2beta.ReportResourceCountsRequest.
 * Use `create(ReportResourceCountsRequestSchema)` to create a new message.
 */
export declare const ReportResourceCountsRequestSchema: GenMessage<ReportResourceCountsRequest, {jsonType: ReportResourceCountsRequestJson}>;

/**
 * @generated from message zitadel.analytics.v2beta.ReportResourceCountsResponse
 */
export declare type ReportResourceCountsResponse = Message<"zitadel.analytics.v2beta.ReportResourceCountsResponse"> & {
  /**
   * The report ID is a unique identifier for the report.
   * It is used to identify the report in case of additional data / pagination.
   * Note that the report ID is only valid for the same system ID.
   *
   * @generated from field: string report_id = 1;
   */
  reportId: string;
};

/**
 * @generated from message zitadel.analytics.v2beta.ReportResourceCountsResponse
 */
export declare type ReportResourceCountsResponseJson = {
  /**
   * The report ID is a unique identifier for the report.
   * It is used to identify the report in case of additional data / pagination.
   * Note that the report ID is only valid for the same system ID.
   *
   * @generated from field: string report_id = 1;
   */
  reportId?: string;
};

/**
 * Describes the message zitadel.analytics.v2beta.ReportResourceCountsResponse.
 * Use `create(ReportResourceCountsResponseSchema)` to create a new message.
 */
export declare const ReportResourceCountsResponseSchema: GenMessage<ReportResourceCountsResponse, {jsonType: ReportResourceCountsResponseJson}>;

/**
 * The TelemetryService is used to report telemetry such as usage statistics of the ZITADEL instance(s).
 * back to a central storage.
 * It is used to collect anonymized data about the usage of ZITADEL features, capabilities, and configurations.
 * ZITADEL acts as a client of the TelemetryService.
 *
 * Reports are sent periodically based on the system's runtime configuration.
 * The content of the reports, respectively the data collected, can be configured in the system's runtime configuration.
 *
 * All endpoints follow the same error and retry handling:
 * In case of a failure to report the usage, ZITADEL will retry to report the usage
 * based on the configured retry policy and error type:
 * - Client side errors will not be retried, as they indicate a misconfiguration or an invalid request:
 *   - `INVALID_ARGUMENT`: The request was malformed.
 *   - `NOT_FOUND`: The TelemetryService's endpoint is likely misconfigured.
 * - Connection / transfer errors will be retried based on the retry policy configured in the system's runtime configuration:
 *   - `DEADLINE_EXCEEDED`: The request took too long to complete, it will be retried.
 *   - `RESOURCE_EXHAUSTED`: The request was rejected due to resource exhaustion, it will be retried after a backoff period.
 *   - `UNAVAILABLE`: The TelemetryService is currently unavailable, it will be retried after a backoff period.
 * Server side errors will also be retried based on the information provided by the server:
 * - `FAILED_PRECONDITION`: The request failed due to a precondition, e.g. the report ID does not exists,
 *    does not correspond to the same system ID or previous reporting is too old, do not retry.
 * - `INTERNAL`: An internal error occurred. Check details and logs.
 *
 * @generated from service zitadel.analytics.v2beta.TelemetryService
 */
export declare const TelemetryService: GenService<{
  /**
   * ReportBaseInformation is used to report the base information of the ZITADEL system,
   * including the version, instances, their creation date and domains.
   * The response contains a report ID to link it to the resource counts or other reports.
   * The report ID is only valid for the same system ID.
   *
   * @generated from rpc zitadel.analytics.v2beta.TelemetryService.ReportBaseInformation
   */
  reportBaseInformation: {
    methodKind: "unary";
    input: typeof ReportBaseInformationRequestSchema;
    output: typeof ReportBaseInformationResponseSchema;
  },
  /**
   * ReportResourceCounts is used to report the resource counts such as amount of organizations
   * or users per organization and much more.
   * Since the resource counts can be reported in multiple batches,
   * the response contains a report ID to continue reporting.
   * The report ID is only valid for the same system ID.
   *
   * @generated from rpc zitadel.analytics.v2beta.TelemetryService.ReportResourceCounts
   */
  reportResourceCounts: {
    methodKind: "unary";
    input: typeof ReportResourceCountsRequestSchema;
    output: typeof ReportResourceCountsResponseSchema;
  },
}>;

