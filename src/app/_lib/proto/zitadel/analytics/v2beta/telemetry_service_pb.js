// @generated by protoc-gen-es v2.6.0 with parameter "json_types=true,import_extension=js"
// @generated from file zitadel/analytics/v2beta/telemetry_service.proto (package zitadel.analytics.v2beta, syntax proto3)
/* eslint-disable */

import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv2";
import { file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import { file_zitadel_analytics_v2beta_telemetry } from "./telemetry_pb.js";

/**
 * Describes the file zitadel/analytics/v2beta/telemetry_service.proto.
 */
export const file_zitadel_analytics_v2beta_telemetry_service = /*@__PURE__*/
  fileDesc("CjB6aXRhZGVsL2FuYWx5dGljcy92MmJldGEvdGVsZW1ldHJ5X3NlcnZpY2UucHJvdG8SGHppdGFkZWwuYW5hbHl0aWNzLnYyYmV0YSKEAQocUmVwb3J0QmFzZUluZm9ybWF0aW9uUmVxdWVzdBIRCglzeXN0ZW1faWQYASABKAkSDwoHdmVyc2lvbhgCIAEoCRJACglpbnN0YW5jZXMYAyADKAsyLS56aXRhZGVsLmFuYWx5dGljcy52MmJldGEuSW5zdGFuY2VJbmZvcm1hdGlvbiIyCh1SZXBvcnRCYXNlSW5mb3JtYXRpb25SZXNwb25zZRIRCglyZXBvcnRfaWQYASABKAkimAEKG1JlcG9ydFJlc291cmNlQ291bnRzUmVxdWVzdBIRCglzeXN0ZW1faWQYASABKAkSFgoJcmVwb3J0X2lkGAIgASgJSACIAQESQAoPcmVzb3VyY2VfY291bnRzGAMgAygLMicueml0YWRlbC5hbmFseXRpY3MudjJiZXRhLlJlc291cmNlQ291bnRCDAoKX3JlcG9ydF9pZCIxChxSZXBvcnRSZXNvdXJjZUNvdW50c1Jlc3BvbnNlEhEKCXJlcG9ydF9pZBgBIAEoCTKpAgoQVGVsZW1ldHJ5U2VydmljZRKKAQoVUmVwb3J0QmFzZUluZm9ybWF0aW9uEjYueml0YWRlbC5hbmFseXRpY3MudjJiZXRhLlJlcG9ydEJhc2VJbmZvcm1hdGlvblJlcXVlc3QaNy56aXRhZGVsLmFuYWx5dGljcy52MmJldGEuUmVwb3J0QmFzZUluZm9ybWF0aW9uUmVzcG9uc2UiABKHAQoUUmVwb3J0UmVzb3VyY2VDb3VudHMSNS56aXRhZGVsLmFuYWx5dGljcy52MmJldGEuUmVwb3J0UmVzb3VyY2VDb3VudHNSZXF1ZXN0GjYueml0YWRlbC5hbmFseXRpY3MudjJiZXRhLlJlcG9ydFJlc291cmNlQ291bnRzUmVzcG9uc2UiAEL3AQocY29tLnppdGFkZWwuYW5hbHl0aWNzLnYyYmV0YUIVVGVsZW1ldHJ5U2VydmljZVByb3RvUAFaPmdpdGh1Yi5jb20veml0YWRlbC96aXRhZGVsL3BrZy9ncnBjL2FuYWx5dGljcy92MmJldGE7YW5hbHl0aWNzogIDWkFYqgIYWml0YWRlbC5BbmFseXRpY3MuVjJiZXRhygIYWml0YWRlbFxBbmFseXRpY3NcVjJiZXRh4gIkWml0YWRlbFxBbmFseXRpY3NcVjJiZXRhXEdQQk1ldGFkYXRh6gIaWml0YWRlbDo6QW5hbHl0aWNzOjpWMmJldGFiBnByb3RvMw", [file_google_protobuf_timestamp, file_zitadel_analytics_v2beta_telemetry]);

/**
 * Describes the message zitadel.analytics.v2beta.ReportBaseInformationRequest.
 * Use `create(ReportBaseInformationRequestSchema)` to create a new message.
 */
export const ReportBaseInformationRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_analytics_v2beta_telemetry_service, 0);

/**
 * Describes the message zitadel.analytics.v2beta.ReportBaseInformationResponse.
 * Use `create(ReportBaseInformationResponseSchema)` to create a new message.
 */
export const ReportBaseInformationResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_analytics_v2beta_telemetry_service, 1);

/**
 * Describes the message zitadel.analytics.v2beta.ReportResourceCountsRequest.
 * Use `create(ReportResourceCountsRequestSchema)` to create a new message.
 */
export const ReportResourceCountsRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_analytics_v2beta_telemetry_service, 2);

/**
 * Describes the message zitadel.analytics.v2beta.ReportResourceCountsResponse.
 * Use `create(ReportResourceCountsResponseSchema)` to create a new message.
 */
export const ReportResourceCountsResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_analytics_v2beta_telemetry_service, 3);

/**
 * The TelemetryService is used to report telemetry such as usage statistics of the ZITADEL instance(s).
 * back to a central storage.
 * It is used to collect anonymized data about the usage of ZITADEL features, capabilities, and configurations.
 * ZITADEL acts as a client of the TelemetryService.
 *
 * Reports are sent periodically based on the system's runtime configuration.
 * The content of the reports, respectively the data collected, can be configured in the system's runtime configuration.
 *
 * All endpoints follow the same error and retry handling:
 * In case of a failure to report the usage, ZITADEL will retry to report the usage
 * based on the configured retry policy and error type:
 * - Client side errors will not be retried, as they indicate a misconfiguration or an invalid request:
 *   - `INVALID_ARGUMENT`: The request was malformed.
 *   - `NOT_FOUND`: The TelemetryService's endpoint is likely misconfigured.
 * - Connection / transfer errors will be retried based on the retry policy configured in the system's runtime configuration:
 *   - `DEADLINE_EXCEEDED`: The request took too long to complete, it will be retried.
 *   - `RESOURCE_EXHAUSTED`: The request was rejected due to resource exhaustion, it will be retried after a backoff period.
 *   - `UNAVAILABLE`: The TelemetryService is currently unavailable, it will be retried after a backoff period.
 * Server side errors will also be retried based on the information provided by the server:
 * - `FAILED_PRECONDITION`: The request failed due to a precondition, e.g. the report ID does not exists,
 *    does not correspond to the same system ID or previous reporting is too old, do not retry.
 * - `INTERNAL`: An internal error occurred. Check details and logs.
 *
 * @generated from service zitadel.analytics.v2beta.TelemetryService
 */
export const TelemetryService = /*@__PURE__*/
  serviceDesc(file_zitadel_analytics_v2beta_telemetry_service, 0);

