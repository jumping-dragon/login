// @generated by protoc-gen-es v2.6.0 with parameter "json_types=true,import_extension=js"
// @generated from file zitadel/app/v2beta/app_service.proto (package zitadel.app.v2beta, syntax proto3)
/* eslint-disable */

import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv2";
import { file_google_api_annotations } from "../../../google/api/annotations_pb.js";
import { file_google_api_field_behavior } from "../../../google/api/field_behavior_pb.js";
import { file_google_protobuf_duration, file_google_protobuf_struct, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import { file_protoc_gen_openapiv2_options_annotations } from "../../../protoc-gen-openapiv2/options/annotations_pb.js";
import { file_validate_validate } from "../../../validate/validate_pb.js";
import { file_zitadel_app_v2beta_login } from "./login_pb.js";
import { file_zitadel_app_v2beta_oidc } from "./oidc_pb.js";
import { file_zitadel_app_v2beta_api } from "./api_pb.js";
import { file_zitadel_app_v2beta_app } from "./app_pb.js";
import { file_zitadel_protoc_gen_zitadel_v2_options } from "../../protoc_gen_zitadel/v2/options_pb.js";
import { file_zitadel_filter_v2_filter } from "../../filter/v2/filter_pb.js";

/**
 * Describes the file zitadel/app/v2beta/app_service.proto.
 */
export const file_zitadel_app_v2beta_app_service = /*@__PURE__*/
  fileDesc("", [file_google_api_annotations, file_google_api_field_behavior, file_google_protobuf_duration, file_google_protobuf_struct, file_protoc_gen_openapiv2_options_annotations, file_validate_validate, file_zitadel_app_v2beta_login, file_zitadel_app_v2beta_oidc, file_zitadel_app_v2beta_api, file_zitadel_app_v2beta_app, file_google_protobuf_timestamp, file_zitadel_protoc_gen_zitadel_v2_options, file_zitadel_filter_v2_filter]);

/**
 * Describes the message zitadel.app.v2beta.CreateApplicationRequest.
 * Use `create(CreateApplicationRequestSchema)` to create a new message.
 */
export const CreateApplicationRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_app_v2beta_app_service, 0);

/**
 * Describes the message zitadel.app.v2beta.CreateApplicationResponse.
 * Use `create(CreateApplicationResponseSchema)` to create a new message.
 */
export const CreateApplicationResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_app_v2beta_app_service, 1);

/**
 * Describes the message zitadel.app.v2beta.CreateOIDCApplicationRequest.
 * Use `create(CreateOIDCApplicationRequestSchema)` to create a new message.
 */
export const CreateOIDCApplicationRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_app_v2beta_app_service, 2);

/**
 * Describes the message zitadel.app.v2beta.CreateOIDCApplicationResponse.
 * Use `create(CreateOIDCApplicationResponseSchema)` to create a new message.
 */
export const CreateOIDCApplicationResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_app_v2beta_app_service, 3);

/**
 * Describes the message zitadel.app.v2beta.CreateSAMLApplicationRequest.
 * Use `create(CreateSAMLApplicationRequestSchema)` to create a new message.
 */
export const CreateSAMLApplicationRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_app_v2beta_app_service, 4);

/**
 * Describes the message zitadel.app.v2beta.CreateSAMLApplicationResponse.
 * Use `create(CreateSAMLApplicationResponseSchema)` to create a new message.
 */
export const CreateSAMLApplicationResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_app_v2beta_app_service, 5);

/**
 * Describes the message zitadel.app.v2beta.CreateAPIApplicationRequest.
 * Use `create(CreateAPIApplicationRequestSchema)` to create a new message.
 */
export const CreateAPIApplicationRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_app_v2beta_app_service, 6);

/**
 * Describes the message zitadel.app.v2beta.CreateAPIApplicationResponse.
 * Use `create(CreateAPIApplicationResponseSchema)` to create a new message.
 */
export const CreateAPIApplicationResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_app_v2beta_app_service, 7);

/**
 * Describes the message zitadel.app.v2beta.UpdateApplicationRequest.
 * Use `create(UpdateApplicationRequestSchema)` to create a new message.
 */
export const UpdateApplicationRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_app_v2beta_app_service, 8);

/**
 * Describes the message zitadel.app.v2beta.UpdateApplicationResponse.
 * Use `create(UpdateApplicationResponseSchema)` to create a new message.
 */
export const UpdateApplicationResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_app_v2beta_app_service, 9);

/**
 * Describes the message zitadel.app.v2beta.UpdateSAMLApplicationConfigurationRequest.
 * Use `create(UpdateSAMLApplicationConfigurationRequestSchema)` to create a new message.
 */
export const UpdateSAMLApplicationConfigurationRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_app_v2beta_app_service, 10);

/**
 * Describes the message zitadel.app.v2beta.UpdateOIDCApplicationConfigurationRequest.
 * Use `create(UpdateOIDCApplicationConfigurationRequestSchema)` to create a new message.
 */
export const UpdateOIDCApplicationConfigurationRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_app_v2beta_app_service, 11);

/**
 * Describes the message zitadel.app.v2beta.UpdateAPIApplicationConfigurationRequest.
 * Use `create(UpdateAPIApplicationConfigurationRequestSchema)` to create a new message.
 */
export const UpdateAPIApplicationConfigurationRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_app_v2beta_app_service, 12);

/**
 * Describes the message zitadel.app.v2beta.GetApplicationRequest.
 * Use `create(GetApplicationRequestSchema)` to create a new message.
 */
export const GetApplicationRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_app_v2beta_app_service, 13);

/**
 * Describes the message zitadel.app.v2beta.GetApplicationResponse.
 * Use `create(GetApplicationResponseSchema)` to create a new message.
 */
export const GetApplicationResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_app_v2beta_app_service, 14);

/**
 * Describes the message zitadel.app.v2beta.DeleteApplicationRequest.
 * Use `create(DeleteApplicationRequestSchema)` to create a new message.
 */
export const DeleteApplicationRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_app_v2beta_app_service, 15);

/**
 * Describes the message zitadel.app.v2beta.DeleteApplicationResponse.
 * Use `create(DeleteApplicationResponseSchema)` to create a new message.
 */
export const DeleteApplicationResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_app_v2beta_app_service, 16);

/**
 * Describes the message zitadel.app.v2beta.DeactivateApplicationRequest.
 * Use `create(DeactivateApplicationRequestSchema)` to create a new message.
 */
export const DeactivateApplicationRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_app_v2beta_app_service, 17);

/**
 * Describes the message zitadel.app.v2beta.DeactivateApplicationResponse.
 * Use `create(DeactivateApplicationResponseSchema)` to create a new message.
 */
export const DeactivateApplicationResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_app_v2beta_app_service, 18);

/**
 * Describes the message zitadel.app.v2beta.ReactivateApplicationRequest.
 * Use `create(ReactivateApplicationRequestSchema)` to create a new message.
 */
export const ReactivateApplicationRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_app_v2beta_app_service, 19);

/**
 * Describes the message zitadel.app.v2beta.ReactivateApplicationResponse.
 * Use `create(ReactivateApplicationResponseSchema)` to create a new message.
 */
export const ReactivateApplicationResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_app_v2beta_app_service, 20);

/**
 * Describes the message zitadel.app.v2beta.RegenerateClientSecretRequest.
 * Use `create(RegenerateClientSecretRequestSchema)` to create a new message.
 */
export const RegenerateClientSecretRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_app_v2beta_app_service, 21);

/**
 * Describes the message zitadel.app.v2beta.RegenerateClientSecretResponse.
 * Use `create(RegenerateClientSecretResponseSchema)` to create a new message.
 */
export const RegenerateClientSecretResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_app_v2beta_app_service, 22);

/**
 * Describes the message zitadel.app.v2beta.ListApplicationsRequest.
 * Use `create(ListApplicationsRequestSchema)` to create a new message.
 */
export const ListApplicationsRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_app_v2beta_app_service, 23);

/**
 * Describes the message zitadel.app.v2beta.ListApplicationsResponse.
 * Use `create(ListApplicationsResponseSchema)` to create a new message.
 */
export const ListApplicationsResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_app_v2beta_app_service, 24);

/**
 * Service to manage apps.
 * The service provides methods to create, update, delete and list apps and app keys.
 *
 * @generated from service zitadel.app.v2beta.AppService
 */
export const AppService = /*@__PURE__*/
  serviceDesc(file_zitadel_app_v2beta_app_service, 0);

