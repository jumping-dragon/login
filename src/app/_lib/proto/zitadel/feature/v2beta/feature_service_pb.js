// @generated by protoc-gen-es v2.6.0 with parameter "json_types=true,import_extension=js"
// @generated from file zitadel/feature/v2beta/feature_service.proto (package zitadel.feature.v2beta, syntax proto3)
/* eslint-disable */

import { fileDesc, serviceDesc } from "@bufbuild/protobuf/codegenv2";
import { file_google_api_annotations } from "../../../google/api/annotations_pb.js";
import { file_protoc_gen_openapiv2_options_annotations } from "../../../protoc-gen-openapiv2/options/annotations_pb.js";
import { file_zitadel_feature_v2beta_system } from "./system_pb.js";
import { file_zitadel_feature_v2beta_instance } from "./instance_pb.js";
import { file_zitadel_feature_v2beta_organization } from "./organization_pb.js";
import { file_zitadel_feature_v2beta_user } from "./user_pb.js";
import { file_zitadel_protoc_gen_zitadel_v2_options } from "../../protoc_gen_zitadel/v2/options_pb.js";

/**
 * Describes the file zitadel/feature/v2beta/feature_service.proto.
 */
export const file_zitadel_feature_v2beta_feature_service = /*@__PURE__*/
  fileDesc("", [file_google_api_annotations, file_protoc_gen_openapiv2_options_annotations, file_zitadel_feature_v2beta_system, file_zitadel_feature_v2beta_instance, file_zitadel_feature_v2beta_organization, file_zitadel_feature_v2beta_user, file_zitadel_protoc_gen_zitadel_v2_options]);

/**
 * FeatureService is intended to manage features for ZITADEL.
 *
 * Feature settings that are available on multiple "levels", such as instance and organization.
 * The higher level (instance) acts as a default for the lower level (organization).
 * When a feature is set on multiple levels, the lower level takes precedence.
 *
 * Features can be experimental where ZITADEL will assume a sane default, such as disabled.
 * When over time confidence in such a feature grows, ZITADEL can default to enabling the feature.
 * As a final step we might choose to always enable a feature and remove the setting from this API,
 * reserving the proto field number. Such removal is not considered a breaking change.
 * Setting a removed field will effectively result in a no-op.
 *
 * @generated from service zitadel.feature.v2beta.FeatureService
 */
export const FeatureService = /*@__PURE__*/
  serviceDesc(file_zitadel_feature_v2beta_feature_service, 0);

