// @generated by protoc-gen-es v2.6.0 with parameter "json_types=true,import_extension=js"
// @generated from file zitadel/idp/v2/idp.proto (package zitadel.idp.v2, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv2";
import type { Message } from "@bufbuild/protobuf";
import type { Details, DetailsJson } from "../../object/v2/object_pb.js";
import type { Duration, DurationJson } from "@bufbuild/protobuf/wkt";

/**
 * Describes the file zitadel/idp/v2/idp.proto.
 */
export declare const file_zitadel_idp_v2_idp: GenFile;

/**
 * @generated from message zitadel.idp.v2.IDP
 */
export declare type IDP = Message<"zitadel.idp.v2.IDP"> & {
  /**
   * Unique identifier for the identity provider.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: zitadel.object.v2.Details details = 2;
   */
  details?: Details;

  /**
   * Current state of the identity provider.
   *
   * @generated from field: zitadel.idp.v2.IDPState state = 3;
   */
  state: IDPState;

  /**
   * @generated from field: string name = 4;
   */
  name: string;

  /**
   * Type of the identity provider, for example OIDC, JWT, LDAP and SAML.
   *
   * @generated from field: zitadel.idp.v2.IDPType type = 5;
   */
  type: IDPType;

  /**
   * Configuration for the type of the identity provider.
   *
   * @generated from field: zitadel.idp.v2.IDPConfig config = 6;
   */
  config?: IDPConfig;
};

/**
 * @generated from message zitadel.idp.v2.IDP
 */
export declare type IDPJson = {
  /**
   * Unique identifier for the identity provider.
   *
   * @generated from field: string id = 1;
   */
  id?: string;

  /**
   * @generated from field: zitadel.object.v2.Details details = 2;
   */
  details?: DetailsJson;

  /**
   * Current state of the identity provider.
   *
   * @generated from field: zitadel.idp.v2.IDPState state = 3;
   */
  state?: IDPStateJson;

  /**
   * @generated from field: string name = 4;
   */
  name?: string;

  /**
   * Type of the identity provider, for example OIDC, JWT, LDAP and SAML.
   *
   * @generated from field: zitadel.idp.v2.IDPType type = 5;
   */
  type?: IDPTypeJson;

  /**
   * Configuration for the type of the identity provider.
   *
   * @generated from field: zitadel.idp.v2.IDPConfig config = 6;
   */
  config?: IDPConfigJson;
};

/**
 * Describes the message zitadel.idp.v2.IDP.
 * Use `create(IDPSchema)` to create a new message.
 */
export declare const IDPSchema: GenMessage<IDP, {jsonType: IDPJson}>;

/**
 * @generated from message zitadel.idp.v2.IDPConfig
 */
export declare type IDPConfig = Message<"zitadel.idp.v2.IDPConfig"> & {
  /**
   * @generated from field: zitadel.idp.v2.Options options = 1;
   */
  options?: Options;

  /**
   * @generated from oneof zitadel.idp.v2.IDPConfig.config
   */
  config: {
    /**
     * @generated from field: zitadel.idp.v2.LDAPConfig ldap = 2;
     */
    value: LDAPConfig;
    case: "ldap";
  } | {
    /**
     * @generated from field: zitadel.idp.v2.GoogleConfig google = 3;
     */
    value: GoogleConfig;
    case: "google";
  } | {
    /**
     * @generated from field: zitadel.idp.v2.OAuthConfig oauth = 4;
     */
    value: OAuthConfig;
    case: "oauth";
  } | {
    /**
     * @generated from field: zitadel.idp.v2.GenericOIDCConfig oidc = 5;
     */
    value: GenericOIDCConfig;
    case: "oidc";
  } | {
    /**
     * @generated from field: zitadel.idp.v2.JWTConfig jwt = 6;
     */
    value: JWTConfig;
    case: "jwt";
  } | {
    /**
     * @generated from field: zitadel.idp.v2.GitHubConfig github = 7;
     */
    value: GitHubConfig;
    case: "github";
  } | {
    /**
     * @generated from field: zitadel.idp.v2.GitHubEnterpriseServerConfig github_es = 8;
     */
    value: GitHubEnterpriseServerConfig;
    case: "githubEs";
  } | {
    /**
     * @generated from field: zitadel.idp.v2.GitLabConfig gitlab = 9;
     */
    value: GitLabConfig;
    case: "gitlab";
  } | {
    /**
     * @generated from field: zitadel.idp.v2.GitLabSelfHostedConfig gitlab_self_hosted = 10;
     */
    value: GitLabSelfHostedConfig;
    case: "gitlabSelfHosted";
  } | {
    /**
     * @generated from field: zitadel.idp.v2.AzureADConfig azure_ad = 11;
     */
    value: AzureADConfig;
    case: "azureAd";
  } | {
    /**
     * @generated from field: zitadel.idp.v2.AppleConfig apple = 12;
     */
    value: AppleConfig;
    case: "apple";
  } | {
    /**
     * @generated from field: zitadel.idp.v2.SAMLConfig saml = 13;
     */
    value: SAMLConfig;
    case: "saml";
  } | { case: undefined; value?: undefined };
};

/**
 * @generated from message zitadel.idp.v2.IDPConfig
 */
export declare type IDPConfigJson = {
  /**
   * @generated from field: zitadel.idp.v2.Options options = 1;
   */
  options?: OptionsJson;

  /**
   * @generated from field: zitadel.idp.v2.LDAPConfig ldap = 2;
   */
  ldap?: LDAPConfigJson;

  /**
   * @generated from field: zitadel.idp.v2.GoogleConfig google = 3;
   */
  google?: GoogleConfigJson;

  /**
   * @generated from field: zitadel.idp.v2.OAuthConfig oauth = 4;
   */
  oauth?: OAuthConfigJson;

  /**
   * @generated from field: zitadel.idp.v2.GenericOIDCConfig oidc = 5;
   */
  oidc?: GenericOIDCConfigJson;

  /**
   * @generated from field: zitadel.idp.v2.JWTConfig jwt = 6;
   */
  jwt?: JWTConfigJson;

  /**
   * @generated from field: zitadel.idp.v2.GitHubConfig github = 7;
   */
  github?: GitHubConfigJson;

  /**
   * @generated from field: zitadel.idp.v2.GitHubEnterpriseServerConfig github_es = 8;
   */
  githubEs?: GitHubEnterpriseServerConfigJson;

  /**
   * @generated from field: zitadel.idp.v2.GitLabConfig gitlab = 9;
   */
  gitlab?: GitLabConfigJson;

  /**
   * @generated from field: zitadel.idp.v2.GitLabSelfHostedConfig gitlab_self_hosted = 10;
   */
  gitlabSelfHosted?: GitLabSelfHostedConfigJson;

  /**
   * @generated from field: zitadel.idp.v2.AzureADConfig azure_ad = 11;
   */
  azureAd?: AzureADConfigJson;

  /**
   * @generated from field: zitadel.idp.v2.AppleConfig apple = 12;
   */
  apple?: AppleConfigJson;

  /**
   * @generated from field: zitadel.idp.v2.SAMLConfig saml = 13;
   */
  saml?: SAMLConfigJson;
};

/**
 * Describes the message zitadel.idp.v2.IDPConfig.
 * Use `create(IDPConfigSchema)` to create a new message.
 */
export declare const IDPConfigSchema: GenMessage<IDPConfig, {jsonType: IDPConfigJson}>;

/**
 * @generated from message zitadel.idp.v2.JWTConfig
 */
export declare type JWTConfig = Message<"zitadel.idp.v2.JWTConfig"> & {
  /**
   * The endpoint where the JWT can be extracted.
   *
   * @generated from field: string jwt_endpoint = 1;
   */
  jwtEndpoint: string;

  /**
   * The issuer of the JWT (for validation).
   *
   * @generated from field: string issuer = 2;
   */
  issuer: string;

  /**
   * The endpoint to the key (JWK) which is used to sign the JWT with.
   *
   * @generated from field: string keys_endpoint = 3;
   */
  keysEndpoint: string;

  /**
   * The name of the header where the JWT is sent in, default is authorization.
   *
   * @generated from field: string header_name = 4;
   */
  headerName: string;
};

/**
 * @generated from message zitadel.idp.v2.JWTConfig
 */
export declare type JWTConfigJson = {
  /**
   * The endpoint where the JWT can be extracted.
   *
   * @generated from field: string jwt_endpoint = 1;
   */
  jwtEndpoint?: string;

  /**
   * The issuer of the JWT (for validation).
   *
   * @generated from field: string issuer = 2;
   */
  issuer?: string;

  /**
   * The endpoint to the key (JWK) which is used to sign the JWT with.
   *
   * @generated from field: string keys_endpoint = 3;
   */
  keysEndpoint?: string;

  /**
   * The name of the header where the JWT is sent in, default is authorization.
   *
   * @generated from field: string header_name = 4;
   */
  headerName?: string;
};

/**
 * Describes the message zitadel.idp.v2.JWTConfig.
 * Use `create(JWTConfigSchema)` to create a new message.
 */
export declare const JWTConfigSchema: GenMessage<JWTConfig, {jsonType: JWTConfigJson}>;

/**
 * @generated from message zitadel.idp.v2.OAuthConfig
 */
export declare type OAuthConfig = Message<"zitadel.idp.v2.OAuthConfig"> & {
  /**
   * Client id generated by the identity provider.
   *
   * @generated from field: string client_id = 1;
   */
  clientId: string;

  /**
   * The endpoint where ZITADEL send the user to authenticate.
   *
   * @generated from field: string authorization_endpoint = 2;
   */
  authorizationEndpoint: string;

  /**
   * The endpoint where ZITADEL can get the token.
   *
   * @generated from field: string token_endpoint = 3;
   */
  tokenEndpoint: string;

  /**
   * The endpoint where ZITADEL can get the user information.
   *
   * @generated from field: string user_endpoint = 4;
   */
  userEndpoint: string;

  /**
   * The scopes requested by ZITADEL during the request on the identity
   * provider.
   *
   * @generated from field: repeated string scopes = 5;
   */
  scopes: string[];

  /**
   * Defines how the attribute is called where ZITADEL can get the id of the
   * user.
   *
   * @generated from field: string id_attribute = 6;
   */
  idAttribute: string;
};

/**
 * @generated from message zitadel.idp.v2.OAuthConfig
 */
export declare type OAuthConfigJson = {
  /**
   * Client id generated by the identity provider.
   *
   * @generated from field: string client_id = 1;
   */
  clientId?: string;

  /**
   * The endpoint where ZITADEL send the user to authenticate.
   *
   * @generated from field: string authorization_endpoint = 2;
   */
  authorizationEndpoint?: string;

  /**
   * The endpoint where ZITADEL can get the token.
   *
   * @generated from field: string token_endpoint = 3;
   */
  tokenEndpoint?: string;

  /**
   * The endpoint where ZITADEL can get the user information.
   *
   * @generated from field: string user_endpoint = 4;
   */
  userEndpoint?: string;

  /**
   * The scopes requested by ZITADEL during the request on the identity
   * provider.
   *
   * @generated from field: repeated string scopes = 5;
   */
  scopes?: string[];

  /**
   * Defines how the attribute is called where ZITADEL can get the id of the
   * user.
   *
   * @generated from field: string id_attribute = 6;
   */
  idAttribute?: string;
};

/**
 * Describes the message zitadel.idp.v2.OAuthConfig.
 * Use `create(OAuthConfigSchema)` to create a new message.
 */
export declare const OAuthConfigSchema: GenMessage<OAuthConfig, {jsonType: OAuthConfigJson}>;

/**
 * @generated from message zitadel.idp.v2.GenericOIDCConfig
 */
export declare type GenericOIDCConfig = Message<"zitadel.idp.v2.GenericOIDCConfig"> & {
  /**
   * The OIDC issuer of the identity provider.
   *
   * @generated from field: string issuer = 1;
   */
  issuer: string;

  /**
   * Client id generated by the identity provider.
   *
   * @generated from field: string client_id = 2;
   */
  clientId: string;

  /**
   * The scopes requested by ZITADEL during the request on the identity
   * provider.
   *
   * @generated from field: repeated string scopes = 3;
   */
  scopes: string[];

  /**
   * If true, provider information get mapped from the id token, not from the
   * userinfo endpoint.
   *
   * @generated from field: bool is_id_token_mapping = 4;
   */
  isIdTokenMapping: boolean;
};

/**
 * @generated from message zitadel.idp.v2.GenericOIDCConfig
 */
export declare type GenericOIDCConfigJson = {
  /**
   * The OIDC issuer of the identity provider.
   *
   * @generated from field: string issuer = 1;
   */
  issuer?: string;

  /**
   * Client id generated by the identity provider.
   *
   * @generated from field: string client_id = 2;
   */
  clientId?: string;

  /**
   * The scopes requested by ZITADEL during the request on the identity
   * provider.
   *
   * @generated from field: repeated string scopes = 3;
   */
  scopes?: string[];

  /**
   * If true, provider information get mapped from the id token, not from the
   * userinfo endpoint.
   *
   * @generated from field: bool is_id_token_mapping = 4;
   */
  isIdTokenMapping?: boolean;
};

/**
 * Describes the message zitadel.idp.v2.GenericOIDCConfig.
 * Use `create(GenericOIDCConfigSchema)` to create a new message.
 */
export declare const GenericOIDCConfigSchema: GenMessage<GenericOIDCConfig, {jsonType: GenericOIDCConfigJson}>;

/**
 * @generated from message zitadel.idp.v2.GitHubConfig
 */
export declare type GitHubConfig = Message<"zitadel.idp.v2.GitHubConfig"> & {
  /**
   * The client ID of the GitHub App.
   *
   * @generated from field: string client_id = 1;
   */
  clientId: string;

  /**
   * The scopes requested by ZITADEL during the request to GitHub.
   *
   * @generated from field: repeated string scopes = 2;
   */
  scopes: string[];
};

/**
 * @generated from message zitadel.idp.v2.GitHubConfig
 */
export declare type GitHubConfigJson = {
  /**
   * The client ID of the GitHub App.
   *
   * @generated from field: string client_id = 1;
   */
  clientId?: string;

  /**
   * The scopes requested by ZITADEL during the request to GitHub.
   *
   * @generated from field: repeated string scopes = 2;
   */
  scopes?: string[];
};

/**
 * Describes the message zitadel.idp.v2.GitHubConfig.
 * Use `create(GitHubConfigSchema)` to create a new message.
 */
export declare const GitHubConfigSchema: GenMessage<GitHubConfig, {jsonType: GitHubConfigJson}>;

/**
 * @generated from message zitadel.idp.v2.GitHubEnterpriseServerConfig
 */
export declare type GitHubEnterpriseServerConfig = Message<"zitadel.idp.v2.GitHubEnterpriseServerConfig"> & {
  /**
   * The client ID of the GitHub App.
   *
   * @generated from field: string client_id = 1;
   */
  clientId: string;

  /**
   * @generated from field: string authorization_endpoint = 2;
   */
  authorizationEndpoint: string;

  /**
   * @generated from field: string token_endpoint = 3;
   */
  tokenEndpoint: string;

  /**
   * @generated from field: string user_endpoint = 4;
   */
  userEndpoint: string;

  /**
   * The scopes requested by ZITADEL during the request to GitHub.
   *
   * @generated from field: repeated string scopes = 5;
   */
  scopes: string[];
};

/**
 * @generated from message zitadel.idp.v2.GitHubEnterpriseServerConfig
 */
export declare type GitHubEnterpriseServerConfigJson = {
  /**
   * The client ID of the GitHub App.
   *
   * @generated from field: string client_id = 1;
   */
  clientId?: string;

  /**
   * @generated from field: string authorization_endpoint = 2;
   */
  authorizationEndpoint?: string;

  /**
   * @generated from field: string token_endpoint = 3;
   */
  tokenEndpoint?: string;

  /**
   * @generated from field: string user_endpoint = 4;
   */
  userEndpoint?: string;

  /**
   * The scopes requested by ZITADEL during the request to GitHub.
   *
   * @generated from field: repeated string scopes = 5;
   */
  scopes?: string[];
};

/**
 * Describes the message zitadel.idp.v2.GitHubEnterpriseServerConfig.
 * Use `create(GitHubEnterpriseServerConfigSchema)` to create a new message.
 */
export declare const GitHubEnterpriseServerConfigSchema: GenMessage<GitHubEnterpriseServerConfig, {jsonType: GitHubEnterpriseServerConfigJson}>;

/**
 * @generated from message zitadel.idp.v2.GoogleConfig
 */
export declare type GoogleConfig = Message<"zitadel.idp.v2.GoogleConfig"> & {
  /**
   * Client id of the Google application.
   *
   * @generated from field: string client_id = 1;
   */
  clientId: string;

  /**
   * The scopes requested by ZITADEL during the request to Google.
   *
   * @generated from field: repeated string scopes = 2;
   */
  scopes: string[];
};

/**
 * @generated from message zitadel.idp.v2.GoogleConfig
 */
export declare type GoogleConfigJson = {
  /**
   * Client id of the Google application.
   *
   * @generated from field: string client_id = 1;
   */
  clientId?: string;

  /**
   * The scopes requested by ZITADEL during the request to Google.
   *
   * @generated from field: repeated string scopes = 2;
   */
  scopes?: string[];
};

/**
 * Describes the message zitadel.idp.v2.GoogleConfig.
 * Use `create(GoogleConfigSchema)` to create a new message.
 */
export declare const GoogleConfigSchema: GenMessage<GoogleConfig, {jsonType: GoogleConfigJson}>;

/**
 * @generated from message zitadel.idp.v2.GitLabConfig
 */
export declare type GitLabConfig = Message<"zitadel.idp.v2.GitLabConfig"> & {
  /**
   * Client id of the GitLab application.
   *
   * @generated from field: string client_id = 1;
   */
  clientId: string;

  /**
   * The scopes requested by ZITADEL during the request to GitLab.
   *
   * @generated from field: repeated string scopes = 2;
   */
  scopes: string[];
};

/**
 * @generated from message zitadel.idp.v2.GitLabConfig
 */
export declare type GitLabConfigJson = {
  /**
   * Client id of the GitLab application.
   *
   * @generated from field: string client_id = 1;
   */
  clientId?: string;

  /**
   * The scopes requested by ZITADEL during the request to GitLab.
   *
   * @generated from field: repeated string scopes = 2;
   */
  scopes?: string[];
};

/**
 * Describes the message zitadel.idp.v2.GitLabConfig.
 * Use `create(GitLabConfigSchema)` to create a new message.
 */
export declare const GitLabConfigSchema: GenMessage<GitLabConfig, {jsonType: GitLabConfigJson}>;

/**
 * @generated from message zitadel.idp.v2.GitLabSelfHostedConfig
 */
export declare type GitLabSelfHostedConfig = Message<"zitadel.idp.v2.GitLabSelfHostedConfig"> & {
  /**
   * @generated from field: string issuer = 1;
   */
  issuer: string;

  /**
   * Client id of the GitLab application.
   *
   * @generated from field: string client_id = 2;
   */
  clientId: string;

  /**
   * The scopes requested by ZITADEL during the request to GitLab.
   *
   * @generated from field: repeated string scopes = 3;
   */
  scopes: string[];
};

/**
 * @generated from message zitadel.idp.v2.GitLabSelfHostedConfig
 */
export declare type GitLabSelfHostedConfigJson = {
  /**
   * @generated from field: string issuer = 1;
   */
  issuer?: string;

  /**
   * Client id of the GitLab application.
   *
   * @generated from field: string client_id = 2;
   */
  clientId?: string;

  /**
   * The scopes requested by ZITADEL during the request to GitLab.
   *
   * @generated from field: repeated string scopes = 3;
   */
  scopes?: string[];
};

/**
 * Describes the message zitadel.idp.v2.GitLabSelfHostedConfig.
 * Use `create(GitLabSelfHostedConfigSchema)` to create a new message.
 */
export declare const GitLabSelfHostedConfigSchema: GenMessage<GitLabSelfHostedConfig, {jsonType: GitLabSelfHostedConfigJson}>;

/**
 * @generated from message zitadel.idp.v2.LDAPConfig
 */
export declare type LDAPConfig = Message<"zitadel.idp.v2.LDAPConfig"> & {
  /**
   * @generated from field: repeated string servers = 1;
   */
  servers: string[];

  /**
   * @generated from field: bool start_tls = 2;
   */
  startTls: boolean;

  /**
   * @generated from field: string base_dn = 3;
   */
  baseDn: string;

  /**
   * @generated from field: string bind_dn = 4;
   */
  bindDn: string;

  /**
   * @generated from field: string user_base = 5;
   */
  userBase: string;

  /**
   * @generated from field: repeated string user_object_classes = 6;
   */
  userObjectClasses: string[];

  /**
   * @generated from field: repeated string user_filters = 7;
   */
  userFilters: string[];

  /**
   * @generated from field: google.protobuf.Duration timeout = 8;
   */
  timeout?: Duration;

  /**
   * @generated from field: zitadel.idp.v2.LDAPAttributes attributes = 9;
   */
  attributes?: LDAPAttributes;

  /**
   * @generated from field: bytes root_ca = 10;
   */
  rootCa: Uint8Array;
};

/**
 * @generated from message zitadel.idp.v2.LDAPConfig
 */
export declare type LDAPConfigJson = {
  /**
   * @generated from field: repeated string servers = 1;
   */
  servers?: string[];

  /**
   * @generated from field: bool start_tls = 2;
   */
  startTls?: boolean;

  /**
   * @generated from field: string base_dn = 3;
   */
  baseDn?: string;

  /**
   * @generated from field: string bind_dn = 4;
   */
  bindDn?: string;

  /**
   * @generated from field: string user_base = 5;
   */
  userBase?: string;

  /**
   * @generated from field: repeated string user_object_classes = 6;
   */
  userObjectClasses?: string[];

  /**
   * @generated from field: repeated string user_filters = 7;
   */
  userFilters?: string[];

  /**
   * @generated from field: google.protobuf.Duration timeout = 8;
   */
  timeout?: DurationJson;

  /**
   * @generated from field: zitadel.idp.v2.LDAPAttributes attributes = 9;
   */
  attributes?: LDAPAttributesJson;

  /**
   * @generated from field: bytes root_ca = 10;
   */
  rootCa?: string;
};

/**
 * Describes the message zitadel.idp.v2.LDAPConfig.
 * Use `create(LDAPConfigSchema)` to create a new message.
 */
export declare const LDAPConfigSchema: GenMessage<LDAPConfig, {jsonType: LDAPConfigJson}>;

/**
 * @generated from message zitadel.idp.v2.SAMLConfig
 */
export declare type SAMLConfig = Message<"zitadel.idp.v2.SAMLConfig"> & {
  /**
   * Metadata of the SAML identity provider.
   *
   * @generated from field: bytes metadata_xml = 1;
   */
  metadataXml: Uint8Array;

  /**
   * Binding which defines the type of communication with the identity provider.
   *
   * @generated from field: zitadel.idp.v2.SAMLBinding binding = 2;
   */
  binding: SAMLBinding;

  /**
   * Boolean which defines if the authentication requests are signed.
   *
   * @generated from field: bool with_signed_request = 3;
   */
  withSignedRequest: boolean;

  /**
   * `nameid-format` for the SAML Request.
   *
   * @generated from field: zitadel.idp.v2.SAMLNameIDFormat name_id_format = 4;
   */
  nameIdFormat: SAMLNameIDFormat;

  /**
   * Optional name of the attribute, which will be used to map the user
   * in case the nameid-format returned is
   * `urn:oasis:names:tc:SAML:2.0:nameid-format:transient`.
   *
   * @generated from field: optional string transient_mapping_attribute_name = 5;
   */
  transientMappingAttributeName?: string;

  /**
   * Boolean weather federated logout is enabled. If enabled, ZITADEL will send a logout request to the identity provider,
   * if the user terminates the session in ZITADEL. Be sure to provide a SLO endpoint as part of the metadata.
   *
   * @generated from field: optional bool federated_logout_enabled = 6;
   */
  federatedLogoutEnabled?: boolean;
};

/**
 * @generated from message zitadel.idp.v2.SAMLConfig
 */
export declare type SAMLConfigJson = {
  /**
   * Metadata of the SAML identity provider.
   *
   * @generated from field: bytes metadata_xml = 1;
   */
  metadataXml?: string;

  /**
   * Binding which defines the type of communication with the identity provider.
   *
   * @generated from field: zitadel.idp.v2.SAMLBinding binding = 2;
   */
  binding?: SAMLBindingJson;

  /**
   * Boolean which defines if the authentication requests are signed.
   *
   * @generated from field: bool with_signed_request = 3;
   */
  withSignedRequest?: boolean;

  /**
   * `nameid-format` for the SAML Request.
   *
   * @generated from field: zitadel.idp.v2.SAMLNameIDFormat name_id_format = 4;
   */
  nameIdFormat?: SAMLNameIDFormatJson;

  /**
   * Optional name of the attribute, which will be used to map the user
   * in case the nameid-format returned is
   * `urn:oasis:names:tc:SAML:2.0:nameid-format:transient`.
   *
   * @generated from field: optional string transient_mapping_attribute_name = 5;
   */
  transientMappingAttributeName?: string;

  /**
   * Boolean weather federated logout is enabled. If enabled, ZITADEL will send a logout request to the identity provider,
   * if the user terminates the session in ZITADEL. Be sure to provide a SLO endpoint as part of the metadata.
   *
   * @generated from field: optional bool federated_logout_enabled = 6;
   */
  federatedLogoutEnabled?: boolean;
};

/**
 * Describes the message zitadel.idp.v2.SAMLConfig.
 * Use `create(SAMLConfigSchema)` to create a new message.
 */
export declare const SAMLConfigSchema: GenMessage<SAMLConfig, {jsonType: SAMLConfigJson}>;

/**
 * @generated from message zitadel.idp.v2.AzureADConfig
 */
export declare type AzureADConfig = Message<"zitadel.idp.v2.AzureADConfig"> & {
  /**
   * Client id of the Azure AD application
   *
   * @generated from field: string client_id = 1;
   */
  clientId: string;

  /**
   * Defines what user accounts should be able to login (Personal,
   * Organizational, All).
   *
   * @generated from field: zitadel.idp.v2.AzureADTenant tenant = 2;
   */
  tenant?: AzureADTenant;

  /**
   * Azure AD doesn't send if the email has been verified. Enable this if the
   * user email should always be added verified in ZITADEL (no verification
   * emails will be sent).
   *
   * @generated from field: bool email_verified = 3;
   */
  emailVerified: boolean;

  /**
   * The scopes requested by ZITADEL during the request to Azure AD.
   *
   * @generated from field: repeated string scopes = 4;
   */
  scopes: string[];
};

/**
 * @generated from message zitadel.idp.v2.AzureADConfig
 */
export declare type AzureADConfigJson = {
  /**
   * Client id of the Azure AD application
   *
   * @generated from field: string client_id = 1;
   */
  clientId?: string;

  /**
   * Defines what user accounts should be able to login (Personal,
   * Organizational, All).
   *
   * @generated from field: zitadel.idp.v2.AzureADTenant tenant = 2;
   */
  tenant?: AzureADTenantJson;

  /**
   * Azure AD doesn't send if the email has been verified. Enable this if the
   * user email should always be added verified in ZITADEL (no verification
   * emails will be sent).
   *
   * @generated from field: bool email_verified = 3;
   */
  emailVerified?: boolean;

  /**
   * The scopes requested by ZITADEL during the request to Azure AD.
   *
   * @generated from field: repeated string scopes = 4;
   */
  scopes?: string[];
};

/**
 * Describes the message zitadel.idp.v2.AzureADConfig.
 * Use `create(AzureADConfigSchema)` to create a new message.
 */
export declare const AzureADConfigSchema: GenMessage<AzureADConfig, {jsonType: AzureADConfigJson}>;

/**
 * @generated from message zitadel.idp.v2.Options
 */
export declare type Options = Message<"zitadel.idp.v2.Options"> & {
  /**
   * Enable if users should be able to link an existing ZITADEL user with an
   * external account.
   *
   * @generated from field: bool is_linking_allowed = 1;
   */
  isLinkingAllowed: boolean;

  /**
   * Enable if users should be able to create a new account in ZITADEL when
   * using an external account.
   *
   * @generated from field: bool is_creation_allowed = 2;
   */
  isCreationAllowed: boolean;

  /**
   * Enable if a new account in ZITADEL should be created automatically when
   * login with an external account.
   *
   * @generated from field: bool is_auto_creation = 3;
   */
  isAutoCreation: boolean;

  /**
   * Enable if a the ZITADEL account fields should be updated automatically on
   * each login.
   *
   * @generated from field: bool is_auto_update = 4;
   */
  isAutoUpdate: boolean;

  /**
   * Enable if users should get prompted to link an existing ZITADEL user to an
   * external account if the selected attribute matches.
   *
   * @generated from field: zitadel.idp.v2.AutoLinkingOption auto_linking = 5;
   */
  autoLinking: AutoLinkingOption;
};

/**
 * @generated from message zitadel.idp.v2.Options
 */
export declare type OptionsJson = {
  /**
   * Enable if users should be able to link an existing ZITADEL user with an
   * external account.
   *
   * @generated from field: bool is_linking_allowed = 1;
   */
  isLinkingAllowed?: boolean;

  /**
   * Enable if users should be able to create a new account in ZITADEL when
   * using an external account.
   *
   * @generated from field: bool is_creation_allowed = 2;
   */
  isCreationAllowed?: boolean;

  /**
   * Enable if a new account in ZITADEL should be created automatically when
   * login with an external account.
   *
   * @generated from field: bool is_auto_creation = 3;
   */
  isAutoCreation?: boolean;

  /**
   * Enable if a the ZITADEL account fields should be updated automatically on
   * each login.
   *
   * @generated from field: bool is_auto_update = 4;
   */
  isAutoUpdate?: boolean;

  /**
   * Enable if users should get prompted to link an existing ZITADEL user to an
   * external account if the selected attribute matches.
   *
   * @generated from field: zitadel.idp.v2.AutoLinkingOption auto_linking = 5;
   */
  autoLinking?: AutoLinkingOptionJson;
};

/**
 * Describes the message zitadel.idp.v2.Options.
 * Use `create(OptionsSchema)` to create a new message.
 */
export declare const OptionsSchema: GenMessage<Options, {jsonType: OptionsJson}>;

/**
 * @generated from message zitadel.idp.v2.LDAPAttributes
 */
export declare type LDAPAttributes = Message<"zitadel.idp.v2.LDAPAttributes"> & {
  /**
   * @generated from field: string id_attribute = 1;
   */
  idAttribute: string;

  /**
   * @generated from field: string first_name_attribute = 2;
   */
  firstNameAttribute: string;

  /**
   * @generated from field: string last_name_attribute = 3;
   */
  lastNameAttribute: string;

  /**
   * @generated from field: string display_name_attribute = 4;
   */
  displayNameAttribute: string;

  /**
   * @generated from field: string nick_name_attribute = 5;
   */
  nickNameAttribute: string;

  /**
   * @generated from field: string preferred_username_attribute = 6;
   */
  preferredUsernameAttribute: string;

  /**
   * @generated from field: string email_attribute = 7;
   */
  emailAttribute: string;

  /**
   * @generated from field: string email_verified_attribute = 8;
   */
  emailVerifiedAttribute: string;

  /**
   * @generated from field: string phone_attribute = 9;
   */
  phoneAttribute: string;

  /**
   * @generated from field: string phone_verified_attribute = 10;
   */
  phoneVerifiedAttribute: string;

  /**
   * @generated from field: string preferred_language_attribute = 11;
   */
  preferredLanguageAttribute: string;

  /**
   * @generated from field: string avatar_url_attribute = 12;
   */
  avatarUrlAttribute: string;

  /**
   * @generated from field: string profile_attribute = 13;
   */
  profileAttribute: string;

  /**
   * @generated from field: string root_ca = 14;
   */
  rootCa: string;
};

/**
 * @generated from message zitadel.idp.v2.LDAPAttributes
 */
export declare type LDAPAttributesJson = {
  /**
   * @generated from field: string id_attribute = 1;
   */
  idAttribute?: string;

  /**
   * @generated from field: string first_name_attribute = 2;
   */
  firstNameAttribute?: string;

  /**
   * @generated from field: string last_name_attribute = 3;
   */
  lastNameAttribute?: string;

  /**
   * @generated from field: string display_name_attribute = 4;
   */
  displayNameAttribute?: string;

  /**
   * @generated from field: string nick_name_attribute = 5;
   */
  nickNameAttribute?: string;

  /**
   * @generated from field: string preferred_username_attribute = 6;
   */
  preferredUsernameAttribute?: string;

  /**
   * @generated from field: string email_attribute = 7;
   */
  emailAttribute?: string;

  /**
   * @generated from field: string email_verified_attribute = 8;
   */
  emailVerifiedAttribute?: string;

  /**
   * @generated from field: string phone_attribute = 9;
   */
  phoneAttribute?: string;

  /**
   * @generated from field: string phone_verified_attribute = 10;
   */
  phoneVerifiedAttribute?: string;

  /**
   * @generated from field: string preferred_language_attribute = 11;
   */
  preferredLanguageAttribute?: string;

  /**
   * @generated from field: string avatar_url_attribute = 12;
   */
  avatarUrlAttribute?: string;

  /**
   * @generated from field: string profile_attribute = 13;
   */
  profileAttribute?: string;

  /**
   * @generated from field: string root_ca = 14;
   */
  rootCa?: string;
};

/**
 * Describes the message zitadel.idp.v2.LDAPAttributes.
 * Use `create(LDAPAttributesSchema)` to create a new message.
 */
export declare const LDAPAttributesSchema: GenMessage<LDAPAttributes, {jsonType: LDAPAttributesJson}>;

/**
 * @generated from message zitadel.idp.v2.AzureADTenant
 */
export declare type AzureADTenant = Message<"zitadel.idp.v2.AzureADTenant"> & {
  /**
   * @generated from oneof zitadel.idp.v2.AzureADTenant.type
   */
  type: {
    /**
     * @generated from field: zitadel.idp.v2.AzureADTenantType tenant_type = 1;
     */
    value: AzureADTenantType;
    case: "tenantType";
  } | {
    /**
     * @generated from field: string tenant_id = 2;
     */
    value: string;
    case: "tenantId";
  } | { case: undefined; value?: undefined };
};

/**
 * @generated from message zitadel.idp.v2.AzureADTenant
 */
export declare type AzureADTenantJson = {
  /**
   * @generated from field: zitadel.idp.v2.AzureADTenantType tenant_type = 1;
   */
  tenantType?: AzureADTenantTypeJson;

  /**
   * @generated from field: string tenant_id = 2;
   */
  tenantId?: string;
};

/**
 * Describes the message zitadel.idp.v2.AzureADTenant.
 * Use `create(AzureADTenantSchema)` to create a new message.
 */
export declare const AzureADTenantSchema: GenMessage<AzureADTenant, {jsonType: AzureADTenantJson}>;

/**
 * @generated from message zitadel.idp.v2.AppleConfig
 */
export declare type AppleConfig = Message<"zitadel.idp.v2.AppleConfig"> & {
  /**
   * Client id (App ID or Service ID) provided by Apple.
   *
   * @generated from field: string client_id = 1;
   */
  clientId: string;

  /**
   * Team ID provided by Apple.
   *
   * @generated from field: string team_id = 2;
   */
  teamId: string;

  /**
   * ID of the private key generated by Apple.
   *
   * @generated from field: string key_id = 3;
   */
  keyId: string;

  /**
   * The scopes requested by ZITADEL during the request to Apple.
   *
   * @generated from field: repeated string scopes = 4;
   */
  scopes: string[];
};

/**
 * @generated from message zitadel.idp.v2.AppleConfig
 */
export declare type AppleConfigJson = {
  /**
   * Client id (App ID or Service ID) provided by Apple.
   *
   * @generated from field: string client_id = 1;
   */
  clientId?: string;

  /**
   * Team ID provided by Apple.
   *
   * @generated from field: string team_id = 2;
   */
  teamId?: string;

  /**
   * ID of the private key generated by Apple.
   *
   * @generated from field: string key_id = 3;
   */
  keyId?: string;

  /**
   * The scopes requested by ZITADEL during the request to Apple.
   *
   * @generated from field: repeated string scopes = 4;
   */
  scopes?: string[];
};

/**
 * Describes the message zitadel.idp.v2.AppleConfig.
 * Use `create(AppleConfigSchema)` to create a new message.
 */
export declare const AppleConfigSchema: GenMessage<AppleConfig, {jsonType: AppleConfigJson}>;

/**
 * @generated from enum zitadel.idp.v2.IDPState
 */
export enum IDPState {
  /**
   * @generated from enum value: IDP_STATE_UNSPECIFIED = 0;
   */
  IDP_STATE_UNSPECIFIED = 0,

  /**
   * @generated from enum value: IDP_STATE_ACTIVE = 1;
   */
  IDP_STATE_ACTIVE = 1,

  /**
   * @generated from enum value: IDP_STATE_INACTIVE = 2;
   */
  IDP_STATE_INACTIVE = 2,

  /**
   * @generated from enum value: IDP_STATE_REMOVED = 3;
   */
  IDP_STATE_REMOVED = 3,

  /**
   * @generated from enum value: IDP_STATE_MIGRATED = 4;
   */
  IDP_STATE_MIGRATED = 4,
}

/**
 * @generated from enum zitadel.idp.v2.IDPState
 */
export declare type IDPStateJson = "IDP_STATE_UNSPECIFIED" | "IDP_STATE_ACTIVE" | "IDP_STATE_INACTIVE" | "IDP_STATE_REMOVED" | "IDP_STATE_MIGRATED";

/**
 * Describes the enum zitadel.idp.v2.IDPState.
 */
export declare const IDPStateSchema: GenEnum<IDPState, IDPStateJson>;

/**
 * @generated from enum zitadel.idp.v2.IDPType
 */
export enum IDPType {
  /**
   * @generated from enum value: IDP_TYPE_UNSPECIFIED = 0;
   */
  IDP_TYPE_UNSPECIFIED = 0,

  /**
   * @generated from enum value: IDP_TYPE_OIDC = 1;
   */
  IDP_TYPE_OIDC = 1,

  /**
   * @generated from enum value: IDP_TYPE_JWT = 2;
   */
  IDP_TYPE_JWT = 2,

  /**
   * @generated from enum value: IDP_TYPE_LDAP = 3;
   */
  IDP_TYPE_LDAP = 3,

  /**
   * @generated from enum value: IDP_TYPE_OAUTH = 4;
   */
  IDP_TYPE_OAUTH = 4,

  /**
   * @generated from enum value: IDP_TYPE_AZURE_AD = 5;
   */
  IDP_TYPE_AZURE_AD = 5,

  /**
   * @generated from enum value: IDP_TYPE_GITHUB = 6;
   */
  IDP_TYPE_GITHUB = 6,

  /**
   * @generated from enum value: IDP_TYPE_GITHUB_ES = 7;
   */
  IDP_TYPE_GITHUB_ES = 7,

  /**
   * @generated from enum value: IDP_TYPE_GITLAB = 8;
   */
  IDP_TYPE_GITLAB = 8,

  /**
   * @generated from enum value: IDP_TYPE_GITLAB_SELF_HOSTED = 9;
   */
  IDP_TYPE_GITLAB_SELF_HOSTED = 9,

  /**
   * @generated from enum value: IDP_TYPE_GOOGLE = 10;
   */
  IDP_TYPE_GOOGLE = 10,

  /**
   * @generated from enum value: IDP_TYPE_APPLE = 11;
   */
  IDP_TYPE_APPLE = 11,

  /**
   * @generated from enum value: IDP_TYPE_SAML = 12;
   */
  IDP_TYPE_SAML = 12,
}

/**
 * @generated from enum zitadel.idp.v2.IDPType
 */
export declare type IDPTypeJson = "IDP_TYPE_UNSPECIFIED" | "IDP_TYPE_OIDC" | "IDP_TYPE_JWT" | "IDP_TYPE_LDAP" | "IDP_TYPE_OAUTH" | "IDP_TYPE_AZURE_AD" | "IDP_TYPE_GITHUB" | "IDP_TYPE_GITHUB_ES" | "IDP_TYPE_GITLAB" | "IDP_TYPE_GITLAB_SELF_HOSTED" | "IDP_TYPE_GOOGLE" | "IDP_TYPE_APPLE" | "IDP_TYPE_SAML";

/**
 * Describes the enum zitadel.idp.v2.IDPType.
 */
export declare const IDPTypeSchema: GenEnum<IDPType, IDPTypeJson>;

/**
 * @generated from enum zitadel.idp.v2.SAMLBinding
 */
export enum SAMLBinding {
  /**
   * @generated from enum value: SAML_BINDING_UNSPECIFIED = 0;
   */
  SAML_BINDING_UNSPECIFIED = 0,

  /**
   * @generated from enum value: SAML_BINDING_POST = 1;
   */
  SAML_BINDING_POST = 1,

  /**
   * @generated from enum value: SAML_BINDING_REDIRECT = 2;
   */
  SAML_BINDING_REDIRECT = 2,

  /**
   * @generated from enum value: SAML_BINDING_ARTIFACT = 3;
   */
  SAML_BINDING_ARTIFACT = 3,
}

/**
 * @generated from enum zitadel.idp.v2.SAMLBinding
 */
export declare type SAMLBindingJson = "SAML_BINDING_UNSPECIFIED" | "SAML_BINDING_POST" | "SAML_BINDING_REDIRECT" | "SAML_BINDING_ARTIFACT";

/**
 * Describes the enum zitadel.idp.v2.SAMLBinding.
 */
export declare const SAMLBindingSchema: GenEnum<SAMLBinding, SAMLBindingJson>;

/**
 * @generated from enum zitadel.idp.v2.SAMLNameIDFormat
 */
export enum SAMLNameIDFormat {
  /**
   * @generated from enum value: SAML_NAME_ID_FORMAT_UNSPECIFIED = 0;
   */
  SAML_NAME_ID_FORMAT_UNSPECIFIED = 0,

  /**
   * @generated from enum value: SAML_NAME_ID_FORMAT_EMAIL_ADDRESS = 1;
   */
  SAML_NAME_ID_FORMAT_EMAIL_ADDRESS = 1,

  /**
   * @generated from enum value: SAML_NAME_ID_FORMAT_PERSISTENT = 2;
   */
  SAML_NAME_ID_FORMAT_PERSISTENT = 2,

  /**
   * @generated from enum value: SAML_NAME_ID_FORMAT_TRANSIENT = 3;
   */
  SAML_NAME_ID_FORMAT_TRANSIENT = 3,
}

/**
 * @generated from enum zitadel.idp.v2.SAMLNameIDFormat
 */
export declare type SAMLNameIDFormatJson = "SAML_NAME_ID_FORMAT_UNSPECIFIED" | "SAML_NAME_ID_FORMAT_EMAIL_ADDRESS" | "SAML_NAME_ID_FORMAT_PERSISTENT" | "SAML_NAME_ID_FORMAT_TRANSIENT";

/**
 * Describes the enum zitadel.idp.v2.SAMLNameIDFormat.
 */
export declare const SAMLNameIDFormatSchema: GenEnum<SAMLNameIDFormat, SAMLNameIDFormatJson>;

/**
 * @generated from enum zitadel.idp.v2.AutoLinkingOption
 */
export enum AutoLinkingOption {
  /**
   * AUTO_LINKING_OPTION_UNSPECIFIED disables the auto linking prompt.
   *
   * @generated from enum value: AUTO_LINKING_OPTION_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * AUTO_LINKING_OPTION_USERNAME will use the username of the external user to
   * check for a corresponding ZITADEL user.
   *
   * @generated from enum value: AUTO_LINKING_OPTION_USERNAME = 1;
   */
  USERNAME = 1,

  /**
   * AUTO_LINKING_OPTION_EMAIL  will use the email of the external user to check
   * for a corresponding ZITADEL user with the same verified email Note that in
   * case multiple users match, no prompt will be shown.
   *
   * @generated from enum value: AUTO_LINKING_OPTION_EMAIL = 2;
   */
  EMAIL = 2,
}

/**
 * @generated from enum zitadel.idp.v2.AutoLinkingOption
 */
export declare type AutoLinkingOptionJson = "AUTO_LINKING_OPTION_UNSPECIFIED" | "AUTO_LINKING_OPTION_USERNAME" | "AUTO_LINKING_OPTION_EMAIL";

/**
 * Describes the enum zitadel.idp.v2.AutoLinkingOption.
 */
export declare const AutoLinkingOptionSchema: GenEnum<AutoLinkingOption, AutoLinkingOptionJson>;

/**
 * @generated from enum zitadel.idp.v2.AzureADTenantType
 */
export enum AzureADTenantType {
  /**
   * @generated from enum value: AZURE_AD_TENANT_TYPE_COMMON = 0;
   */
  AZURE_AD_TENANT_TYPE_COMMON = 0,

  /**
   * @generated from enum value: AZURE_AD_TENANT_TYPE_ORGANISATIONS = 1;
   */
  AZURE_AD_TENANT_TYPE_ORGANISATIONS = 1,

  /**
   * @generated from enum value: AZURE_AD_TENANT_TYPE_CONSUMERS = 2;
   */
  AZURE_AD_TENANT_TYPE_CONSUMERS = 2,
}

/**
 * @generated from enum zitadel.idp.v2.AzureADTenantType
 */
export declare type AzureADTenantTypeJson = "AZURE_AD_TENANT_TYPE_COMMON" | "AZURE_AD_TENANT_TYPE_ORGANISATIONS" | "AZURE_AD_TENANT_TYPE_CONSUMERS";

/**
 * Describes the enum zitadel.idp.v2.AzureADTenantType.
 */
export declare const AzureADTenantTypeSchema: GenEnum<AzureADTenantType, AzureADTenantTypeJson>;

