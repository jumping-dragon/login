// @generated by protoc-gen-es v2.6.0 with parameter "json_types=true,import_extension=js"
// @generated from file zitadel/management.proto (package zitadel.management.v1, syntax proto3)
/* eslint-disable */

import { enumDesc, fileDesc, messageDesc, serviceDesc, tsEnum } from "@bufbuild/protobuf/codegenv2";
import { file_zitadel_app } from "./app_pb.js";
import { file_zitadel_idp } from "./idp_pb.js";
import { file_zitadel_user } from "./user_pb.js";
import { file_zitadel_object } from "./object_pb.js";
import { file_zitadel_options } from "./options_pb.js";
import { file_zitadel_org } from "./org_pb.js";
import { file_zitadel_member } from "./member_pb.js";
import { file_zitadel_project } from "./project_pb.js";
import { file_zitadel_policy } from "./policy_pb.js";
import { file_zitadel_text } from "./text_pb.js";
import { file_zitadel_message } from "./message_pb.js";
import { file_zitadel_change } from "./change_pb.js";
import { file_zitadel_auth_n_key } from "./auth_n_key_pb.js";
import { file_zitadel_metadata } from "./metadata_pb.js";
import { file_zitadel_action } from "./action_pb.js";
import { file_google_api_annotations } from "../google/api/annotations_pb.js";
import { file_google_api_field_behavior } from "../google/api/field_behavior_pb.js";
import { file_google_protobuf_duration, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import { file_protoc_gen_openapiv2_options_annotations } from "../protoc-gen-openapiv2/options/annotations_pb.js";
import { file_validate_validate } from "../validate/validate_pb.js";

/**
 * Describes the file zitadel/management.proto.
 */
export const file_zitadel_management = /*@__PURE__*/
  fileDesc("", [file_zitadel_app, file_zitadel_idp, file_zitadel_user, file_zitadel_object, file_zitadel_options, file_zitadel_org, file_zitadel_member, file_zitadel_project, file_zitadel_policy, file_zitadel_text, file_zitadel_message, file_zitadel_change, file_zitadel_auth_n_key, file_zitadel_metadata, file_zitadel_action, file_google_api_annotations, file_google_api_field_behavior, file_google_protobuf_timestamp, file_google_protobuf_duration, file_protoc_gen_openapiv2_options_annotations, file_validate_validate]);

/**
 * Describes the message zitadel.management.v1.HealthzRequest.
 * Use `create(HealthzRequestSchema)` to create a new message.
 */
export const HealthzRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 0);

/**
 * Describes the message zitadel.management.v1.HealthzResponse.
 * Use `create(HealthzResponseSchema)` to create a new message.
 */
export const HealthzResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 1);

/**
 * Describes the message zitadel.management.v1.GetOIDCInformationRequest.
 * Use `create(GetOIDCInformationRequestSchema)` to create a new message.
 */
export const GetOIDCInformationRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 2);

/**
 * Describes the message zitadel.management.v1.GetOIDCInformationResponse.
 * Use `create(GetOIDCInformationResponseSchema)` to create a new message.
 */
export const GetOIDCInformationResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 3);

/**
 * Describes the message zitadel.management.v1.GetIAMRequest.
 * Use `create(GetIAMRequestSchema)` to create a new message.
 */
export const GetIAMRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 4);

/**
 * Describes the message zitadel.management.v1.GetIAMResponse.
 * Use `create(GetIAMResponseSchema)` to create a new message.
 */
export const GetIAMResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 5);

/**
 * Describes the message zitadel.management.v1.GetSupportedLanguagesRequest.
 * Use `create(GetSupportedLanguagesRequestSchema)` to create a new message.
 */
export const GetSupportedLanguagesRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 6);

/**
 * Describes the message zitadel.management.v1.GetSupportedLanguagesResponse.
 * Use `create(GetSupportedLanguagesResponseSchema)` to create a new message.
 */
export const GetSupportedLanguagesResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 7);

/**
 * Describes the message zitadel.management.v1.GetUserByIDRequest.
 * Use `create(GetUserByIDRequestSchema)` to create a new message.
 */
export const GetUserByIDRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 8);

/**
 * Describes the message zitadel.management.v1.GetUserByIDResponse.
 * Use `create(GetUserByIDResponseSchema)` to create a new message.
 */
export const GetUserByIDResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 9);

/**
 * Describes the message zitadel.management.v1.GetUserByLoginNameGlobalRequest.
 * Use `create(GetUserByLoginNameGlobalRequestSchema)` to create a new message.
 */
export const GetUserByLoginNameGlobalRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 10);

/**
 * Describes the message zitadel.management.v1.GetUserByLoginNameGlobalResponse.
 * Use `create(GetUserByLoginNameGlobalResponseSchema)` to create a new message.
 */
export const GetUserByLoginNameGlobalResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 11);

/**
 * Describes the message zitadel.management.v1.ListUsersRequest.
 * Use `create(ListUsersRequestSchema)` to create a new message.
 */
export const ListUsersRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 12);

/**
 * Describes the message zitadel.management.v1.ListUsersResponse.
 * Use `create(ListUsersResponseSchema)` to create a new message.
 */
export const ListUsersResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 13);

/**
 * Describes the message zitadel.management.v1.ListUserChangesRequest.
 * Use `create(ListUserChangesRequestSchema)` to create a new message.
 */
export const ListUserChangesRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 14);

/**
 * Describes the message zitadel.management.v1.ListUserChangesResponse.
 * Use `create(ListUserChangesResponseSchema)` to create a new message.
 */
export const ListUserChangesResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 15);

/**
 * Describes the message zitadel.management.v1.IsUserUniqueRequest.
 * Use `create(IsUserUniqueRequestSchema)` to create a new message.
 */
export const IsUserUniqueRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 16);

/**
 * Describes the message zitadel.management.v1.IsUserUniqueResponse.
 * Use `create(IsUserUniqueResponseSchema)` to create a new message.
 */
export const IsUserUniqueResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 17);

/**
 * Describes the message zitadel.management.v1.AddHumanUserRequest.
 * Use `create(AddHumanUserRequestSchema)` to create a new message.
 */
export const AddHumanUserRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 18);

/**
 * Describes the message zitadel.management.v1.AddHumanUserRequest.Profile.
 * Use `create(AddHumanUserRequest_ProfileSchema)` to create a new message.
 */
export const AddHumanUserRequest_ProfileSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 18, 0);

/**
 * Describes the message zitadel.management.v1.AddHumanUserRequest.Email.
 * Use `create(AddHumanUserRequest_EmailSchema)` to create a new message.
 */
export const AddHumanUserRequest_EmailSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 18, 1);

/**
 * Describes the message zitadel.management.v1.AddHumanUserRequest.Phone.
 * Use `create(AddHumanUserRequest_PhoneSchema)` to create a new message.
 */
export const AddHumanUserRequest_PhoneSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 18, 2);

/**
 * Describes the message zitadel.management.v1.AddHumanUserResponse.
 * Use `create(AddHumanUserResponseSchema)` to create a new message.
 */
export const AddHumanUserResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 19);

/**
 * Describes the message zitadel.management.v1.ImportHumanUserRequest.
 * Use `create(ImportHumanUserRequestSchema)` to create a new message.
 */
export const ImportHumanUserRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 20);

/**
 * Describes the message zitadel.management.v1.ImportHumanUserRequest.Profile.
 * Use `create(ImportHumanUserRequest_ProfileSchema)` to create a new message.
 */
export const ImportHumanUserRequest_ProfileSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 20, 0);

/**
 * Describes the message zitadel.management.v1.ImportHumanUserRequest.Email.
 * Use `create(ImportHumanUserRequest_EmailSchema)` to create a new message.
 */
export const ImportHumanUserRequest_EmailSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 20, 1);

/**
 * Describes the message zitadel.management.v1.ImportHumanUserRequest.Phone.
 * Use `create(ImportHumanUserRequest_PhoneSchema)` to create a new message.
 */
export const ImportHumanUserRequest_PhoneSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 20, 2);

/**
 * Describes the message zitadel.management.v1.ImportHumanUserRequest.HashedPassword.
 * Use `create(ImportHumanUserRequest_HashedPasswordSchema)` to create a new message.
 */
export const ImportHumanUserRequest_HashedPasswordSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 20, 3);

/**
 * Describes the message zitadel.management.v1.ImportHumanUserRequest.IDP.
 * Use `create(ImportHumanUserRequest_IDPSchema)` to create a new message.
 */
export const ImportHumanUserRequest_IDPSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 20, 4);

/**
 * Describes the message zitadel.management.v1.ImportHumanUserResponse.
 * Use `create(ImportHumanUserResponseSchema)` to create a new message.
 */
export const ImportHumanUserResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 21);

/**
 * Describes the message zitadel.management.v1.ImportHumanUserResponse.PasswordlessRegistration.
 * Use `create(ImportHumanUserResponse_PasswordlessRegistrationSchema)` to create a new message.
 */
export const ImportHumanUserResponse_PasswordlessRegistrationSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 21, 0);

/**
 * Describes the message zitadel.management.v1.AddMachineUserRequest.
 * Use `create(AddMachineUserRequestSchema)` to create a new message.
 */
export const AddMachineUserRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 22);

/**
 * Describes the message zitadel.management.v1.AddMachineUserResponse.
 * Use `create(AddMachineUserResponseSchema)` to create a new message.
 */
export const AddMachineUserResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 23);

/**
 * Describes the message zitadel.management.v1.DeactivateUserRequest.
 * Use `create(DeactivateUserRequestSchema)` to create a new message.
 */
export const DeactivateUserRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 24);

/**
 * Describes the message zitadel.management.v1.DeactivateUserResponse.
 * Use `create(DeactivateUserResponseSchema)` to create a new message.
 */
export const DeactivateUserResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 25);

/**
 * Describes the message zitadel.management.v1.ReactivateUserRequest.
 * Use `create(ReactivateUserRequestSchema)` to create a new message.
 */
export const ReactivateUserRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 26);

/**
 * Describes the message zitadel.management.v1.ReactivateUserResponse.
 * Use `create(ReactivateUserResponseSchema)` to create a new message.
 */
export const ReactivateUserResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 27);

/**
 * Describes the message zitadel.management.v1.LockUserRequest.
 * Use `create(LockUserRequestSchema)` to create a new message.
 */
export const LockUserRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 28);

/**
 * Describes the message zitadel.management.v1.LockUserResponse.
 * Use `create(LockUserResponseSchema)` to create a new message.
 */
export const LockUserResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 29);

/**
 * Describes the message zitadel.management.v1.UnlockUserRequest.
 * Use `create(UnlockUserRequestSchema)` to create a new message.
 */
export const UnlockUserRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 30);

/**
 * Describes the message zitadel.management.v1.UnlockUserResponse.
 * Use `create(UnlockUserResponseSchema)` to create a new message.
 */
export const UnlockUserResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 31);

/**
 * Describes the message zitadel.management.v1.RemoveUserRequest.
 * Use `create(RemoveUserRequestSchema)` to create a new message.
 */
export const RemoveUserRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 32);

/**
 * Describes the message zitadel.management.v1.RemoveUserResponse.
 * Use `create(RemoveUserResponseSchema)` to create a new message.
 */
export const RemoveUserResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 33);

/**
 * Describes the message zitadel.management.v1.UpdateUserNameRequest.
 * Use `create(UpdateUserNameRequestSchema)` to create a new message.
 */
export const UpdateUserNameRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 34);

/**
 * Describes the message zitadel.management.v1.UpdateUserNameResponse.
 * Use `create(UpdateUserNameResponseSchema)` to create a new message.
 */
export const UpdateUserNameResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 35);

/**
 * Describes the message zitadel.management.v1.ListUserMetadataRequest.
 * Use `create(ListUserMetadataRequestSchema)` to create a new message.
 */
export const ListUserMetadataRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 36);

/**
 * Describes the message zitadel.management.v1.ListUserMetadataResponse.
 * Use `create(ListUserMetadataResponseSchema)` to create a new message.
 */
export const ListUserMetadataResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 37);

/**
 * Describes the message zitadel.management.v1.GetUserMetadataRequest.
 * Use `create(GetUserMetadataRequestSchema)` to create a new message.
 */
export const GetUserMetadataRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 38);

/**
 * Describes the message zitadel.management.v1.GetUserMetadataResponse.
 * Use `create(GetUserMetadataResponseSchema)` to create a new message.
 */
export const GetUserMetadataResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 39);

/**
 * Describes the message zitadel.management.v1.SetUserMetadataRequest.
 * Use `create(SetUserMetadataRequestSchema)` to create a new message.
 */
export const SetUserMetadataRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 40);

/**
 * Describes the message zitadel.management.v1.SetUserMetadataResponse.
 * Use `create(SetUserMetadataResponseSchema)` to create a new message.
 */
export const SetUserMetadataResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 41);

/**
 * Describes the message zitadel.management.v1.BulkSetUserMetadataRequest.
 * Use `create(BulkSetUserMetadataRequestSchema)` to create a new message.
 */
export const BulkSetUserMetadataRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 42);

/**
 * Describes the message zitadel.management.v1.BulkSetUserMetadataRequest.Metadata.
 * Use `create(BulkSetUserMetadataRequest_MetadataSchema)` to create a new message.
 */
export const BulkSetUserMetadataRequest_MetadataSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 42, 0);

/**
 * Describes the message zitadel.management.v1.BulkSetUserMetadataResponse.
 * Use `create(BulkSetUserMetadataResponseSchema)` to create a new message.
 */
export const BulkSetUserMetadataResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 43);

/**
 * Describes the message zitadel.management.v1.RemoveUserMetadataRequest.
 * Use `create(RemoveUserMetadataRequestSchema)` to create a new message.
 */
export const RemoveUserMetadataRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 44);

/**
 * Describes the message zitadel.management.v1.RemoveUserMetadataResponse.
 * Use `create(RemoveUserMetadataResponseSchema)` to create a new message.
 */
export const RemoveUserMetadataResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 45);

/**
 * Describes the message zitadel.management.v1.BulkRemoveUserMetadataRequest.
 * Use `create(BulkRemoveUserMetadataRequestSchema)` to create a new message.
 */
export const BulkRemoveUserMetadataRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 46);

/**
 * Describes the message zitadel.management.v1.BulkRemoveUserMetadataResponse.
 * Use `create(BulkRemoveUserMetadataResponseSchema)` to create a new message.
 */
export const BulkRemoveUserMetadataResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 47);

/**
 * Describes the message zitadel.management.v1.GetHumanProfileRequest.
 * Use `create(GetHumanProfileRequestSchema)` to create a new message.
 */
export const GetHumanProfileRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 48);

/**
 * Describes the message zitadel.management.v1.GetHumanProfileResponse.
 * Use `create(GetHumanProfileResponseSchema)` to create a new message.
 */
export const GetHumanProfileResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 49);

/**
 * Describes the message zitadel.management.v1.UpdateHumanProfileRequest.
 * Use `create(UpdateHumanProfileRequestSchema)` to create a new message.
 */
export const UpdateHumanProfileRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 50);

/**
 * Describes the message zitadel.management.v1.UpdateHumanProfileResponse.
 * Use `create(UpdateHumanProfileResponseSchema)` to create a new message.
 */
export const UpdateHumanProfileResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 51);

/**
 * Describes the message zitadel.management.v1.GetHumanEmailRequest.
 * Use `create(GetHumanEmailRequestSchema)` to create a new message.
 */
export const GetHumanEmailRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 52);

/**
 * Describes the message zitadel.management.v1.GetHumanEmailResponse.
 * Use `create(GetHumanEmailResponseSchema)` to create a new message.
 */
export const GetHumanEmailResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 53);

/**
 * Describes the message zitadel.management.v1.UpdateHumanEmailRequest.
 * Use `create(UpdateHumanEmailRequestSchema)` to create a new message.
 */
export const UpdateHumanEmailRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 54);

/**
 * Describes the message zitadel.management.v1.UpdateHumanEmailResponse.
 * Use `create(UpdateHumanEmailResponseSchema)` to create a new message.
 */
export const UpdateHumanEmailResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 55);

/**
 * Describes the message zitadel.management.v1.ResendHumanInitializationRequest.
 * Use `create(ResendHumanInitializationRequestSchema)` to create a new message.
 */
export const ResendHumanInitializationRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 56);

/**
 * Describes the message zitadel.management.v1.ResendHumanInitializationResponse.
 * Use `create(ResendHumanInitializationResponseSchema)` to create a new message.
 */
export const ResendHumanInitializationResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 57);

/**
 * Describes the message zitadel.management.v1.ResendHumanEmailVerificationRequest.
 * Use `create(ResendHumanEmailVerificationRequestSchema)` to create a new message.
 */
export const ResendHumanEmailVerificationRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 58);

/**
 * Describes the message zitadel.management.v1.ResendHumanEmailVerificationResponse.
 * Use `create(ResendHumanEmailVerificationResponseSchema)` to create a new message.
 */
export const ResendHumanEmailVerificationResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 59);

/**
 * Describes the message zitadel.management.v1.GetHumanPhoneRequest.
 * Use `create(GetHumanPhoneRequestSchema)` to create a new message.
 */
export const GetHumanPhoneRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 60);

/**
 * Describes the message zitadel.management.v1.GetHumanPhoneResponse.
 * Use `create(GetHumanPhoneResponseSchema)` to create a new message.
 */
export const GetHumanPhoneResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 61);

/**
 * Describes the message zitadel.management.v1.UpdateHumanPhoneRequest.
 * Use `create(UpdateHumanPhoneRequestSchema)` to create a new message.
 */
export const UpdateHumanPhoneRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 62);

/**
 * Describes the message zitadel.management.v1.UpdateHumanPhoneResponse.
 * Use `create(UpdateHumanPhoneResponseSchema)` to create a new message.
 */
export const UpdateHumanPhoneResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 63);

/**
 * Describes the message zitadel.management.v1.RemoveHumanPhoneRequest.
 * Use `create(RemoveHumanPhoneRequestSchema)` to create a new message.
 */
export const RemoveHumanPhoneRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 64);

/**
 * Describes the message zitadel.management.v1.RemoveHumanPhoneResponse.
 * Use `create(RemoveHumanPhoneResponseSchema)` to create a new message.
 */
export const RemoveHumanPhoneResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 65);

/**
 * Describes the message zitadel.management.v1.ResendHumanPhoneVerificationRequest.
 * Use `create(ResendHumanPhoneVerificationRequestSchema)` to create a new message.
 */
export const ResendHumanPhoneVerificationRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 66);

/**
 * Describes the message zitadel.management.v1.ResendHumanPhoneVerificationResponse.
 * Use `create(ResendHumanPhoneVerificationResponseSchema)` to create a new message.
 */
export const ResendHumanPhoneVerificationResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 67);

/**
 * Describes the message zitadel.management.v1.RemoveHumanAvatarRequest.
 * Use `create(RemoveHumanAvatarRequestSchema)` to create a new message.
 */
export const RemoveHumanAvatarRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 68);

/**
 * Describes the message zitadel.management.v1.RemoveHumanAvatarResponse.
 * Use `create(RemoveHumanAvatarResponseSchema)` to create a new message.
 */
export const RemoveHumanAvatarResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 69);

/**
 * Describes the message zitadel.management.v1.SetHumanInitialPasswordRequest.
 * Use `create(SetHumanInitialPasswordRequestSchema)` to create a new message.
 */
export const SetHumanInitialPasswordRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 70);

/**
 * Describes the message zitadel.management.v1.SetHumanInitialPasswordResponse.
 * Use `create(SetHumanInitialPasswordResponseSchema)` to create a new message.
 */
export const SetHumanInitialPasswordResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 71);

/**
 * Describes the message zitadel.management.v1.SetHumanPasswordRequest.
 * Use `create(SetHumanPasswordRequestSchema)` to create a new message.
 */
export const SetHumanPasswordRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 72);

/**
 * Describes the message zitadel.management.v1.SetHumanPasswordResponse.
 * Use `create(SetHumanPasswordResponseSchema)` to create a new message.
 */
export const SetHumanPasswordResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 73);

/**
 * Describes the message zitadel.management.v1.SendHumanResetPasswordNotificationRequest.
 * Use `create(SendHumanResetPasswordNotificationRequestSchema)` to create a new message.
 */
export const SendHumanResetPasswordNotificationRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 74);

/**
 * Describes the enum zitadel.management.v1.SendHumanResetPasswordNotificationRequest.Type.
 */
export const SendHumanResetPasswordNotificationRequest_TypeSchema = /*@__PURE__*/
  enumDesc(file_zitadel_management, 74, 0);

/**
 * @generated from enum zitadel.management.v1.SendHumanResetPasswordNotificationRequest.Type
 */
export const SendHumanResetPasswordNotificationRequest_Type = /*@__PURE__*/
  tsEnum(SendHumanResetPasswordNotificationRequest_TypeSchema);

/**
 * Describes the message zitadel.management.v1.SendHumanResetPasswordNotificationResponse.
 * Use `create(SendHumanResetPasswordNotificationResponseSchema)` to create a new message.
 */
export const SendHumanResetPasswordNotificationResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 75);

/**
 * Describes the message zitadel.management.v1.ListHumanAuthFactorsRequest.
 * Use `create(ListHumanAuthFactorsRequestSchema)` to create a new message.
 */
export const ListHumanAuthFactorsRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 76);

/**
 * Describes the message zitadel.management.v1.ListHumanAuthFactorsResponse.
 * Use `create(ListHumanAuthFactorsResponseSchema)` to create a new message.
 */
export const ListHumanAuthFactorsResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 77);

/**
 * Describes the message zitadel.management.v1.RemoveHumanAuthFactorOTPRequest.
 * Use `create(RemoveHumanAuthFactorOTPRequestSchema)` to create a new message.
 */
export const RemoveHumanAuthFactorOTPRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 78);

/**
 * Describes the message zitadel.management.v1.RemoveHumanAuthFactorOTPResponse.
 * Use `create(RemoveHumanAuthFactorOTPResponseSchema)` to create a new message.
 */
export const RemoveHumanAuthFactorOTPResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 79);

/**
 * Describes the message zitadel.management.v1.RemoveHumanAuthFactorU2FRequest.
 * Use `create(RemoveHumanAuthFactorU2FRequestSchema)` to create a new message.
 */
export const RemoveHumanAuthFactorU2FRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 80);

/**
 * Describes the message zitadel.management.v1.RemoveHumanAuthFactorU2FResponse.
 * Use `create(RemoveHumanAuthFactorU2FResponseSchema)` to create a new message.
 */
export const RemoveHumanAuthFactorU2FResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 81);

/**
 * Describes the message zitadel.management.v1.RemoveHumanAuthFactorOTPSMSRequest.
 * Use `create(RemoveHumanAuthFactorOTPSMSRequestSchema)` to create a new message.
 */
export const RemoveHumanAuthFactorOTPSMSRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 82);

/**
 * Describes the message zitadel.management.v1.RemoveHumanAuthFactorOTPSMSResponse.
 * Use `create(RemoveHumanAuthFactorOTPSMSResponseSchema)` to create a new message.
 */
export const RemoveHumanAuthFactorOTPSMSResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 83);

/**
 * Describes the message zitadel.management.v1.RemoveHumanAuthFactorOTPEmailRequest.
 * Use `create(RemoveHumanAuthFactorOTPEmailRequestSchema)` to create a new message.
 */
export const RemoveHumanAuthFactorOTPEmailRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 84);

/**
 * Describes the message zitadel.management.v1.RemoveHumanAuthFactorOTPEmailResponse.
 * Use `create(RemoveHumanAuthFactorOTPEmailResponseSchema)` to create a new message.
 */
export const RemoveHumanAuthFactorOTPEmailResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 85);

/**
 * Describes the message zitadel.management.v1.ListHumanPasswordlessRequest.
 * Use `create(ListHumanPasswordlessRequestSchema)` to create a new message.
 */
export const ListHumanPasswordlessRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 86);

/**
 * Describes the message zitadel.management.v1.ListHumanPasswordlessResponse.
 * Use `create(ListHumanPasswordlessResponseSchema)` to create a new message.
 */
export const ListHumanPasswordlessResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 87);

/**
 * Describes the message zitadel.management.v1.AddPasswordlessRegistrationRequest.
 * Use `create(AddPasswordlessRegistrationRequestSchema)` to create a new message.
 */
export const AddPasswordlessRegistrationRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 88);

/**
 * Describes the message zitadel.management.v1.AddPasswordlessRegistrationResponse.
 * Use `create(AddPasswordlessRegistrationResponseSchema)` to create a new message.
 */
export const AddPasswordlessRegistrationResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 89);

/**
 * Describes the message zitadel.management.v1.SendPasswordlessRegistrationRequest.
 * Use `create(SendPasswordlessRegistrationRequestSchema)` to create a new message.
 */
export const SendPasswordlessRegistrationRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 90);

/**
 * Describes the message zitadel.management.v1.SendPasswordlessRegistrationResponse.
 * Use `create(SendPasswordlessRegistrationResponseSchema)` to create a new message.
 */
export const SendPasswordlessRegistrationResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 91);

/**
 * Describes the message zitadel.management.v1.RemoveHumanPasswordlessRequest.
 * Use `create(RemoveHumanPasswordlessRequestSchema)` to create a new message.
 */
export const RemoveHumanPasswordlessRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 92);

/**
 * Describes the message zitadel.management.v1.RemoveHumanPasswordlessResponse.
 * Use `create(RemoveHumanPasswordlessResponseSchema)` to create a new message.
 */
export const RemoveHumanPasswordlessResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 93);

/**
 * Describes the message zitadel.management.v1.UpdateMachineRequest.
 * Use `create(UpdateMachineRequestSchema)` to create a new message.
 */
export const UpdateMachineRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 94);

/**
 * Describes the message zitadel.management.v1.UpdateMachineResponse.
 * Use `create(UpdateMachineResponseSchema)` to create a new message.
 */
export const UpdateMachineResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 95);

/**
 * Describes the message zitadel.management.v1.GenerateMachineSecretRequest.
 * Use `create(GenerateMachineSecretRequestSchema)` to create a new message.
 */
export const GenerateMachineSecretRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 96);

/**
 * Describes the message zitadel.management.v1.GenerateMachineSecretResponse.
 * Use `create(GenerateMachineSecretResponseSchema)` to create a new message.
 */
export const GenerateMachineSecretResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 97);

/**
 * Describes the message zitadel.management.v1.RemoveMachineSecretRequest.
 * Use `create(RemoveMachineSecretRequestSchema)` to create a new message.
 */
export const RemoveMachineSecretRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 98);

/**
 * Describes the message zitadel.management.v1.RemoveMachineSecretResponse.
 * Use `create(RemoveMachineSecretResponseSchema)` to create a new message.
 */
export const RemoveMachineSecretResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 99);

/**
 * Describes the message zitadel.management.v1.GetMachineKeyByIDsRequest.
 * Use `create(GetMachineKeyByIDsRequestSchema)` to create a new message.
 */
export const GetMachineKeyByIDsRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 100);

/**
 * Describes the message zitadel.management.v1.GetMachineKeyByIDsResponse.
 * Use `create(GetMachineKeyByIDsResponseSchema)` to create a new message.
 */
export const GetMachineKeyByIDsResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 101);

/**
 * Describes the message zitadel.management.v1.ListMachineKeysRequest.
 * Use `create(ListMachineKeysRequestSchema)` to create a new message.
 */
export const ListMachineKeysRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 102);

/**
 * Describes the message zitadel.management.v1.ListMachineKeysResponse.
 * Use `create(ListMachineKeysResponseSchema)` to create a new message.
 */
export const ListMachineKeysResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 103);

/**
 * Describes the message zitadel.management.v1.AddMachineKeyRequest.
 * Use `create(AddMachineKeyRequestSchema)` to create a new message.
 */
export const AddMachineKeyRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 104);

/**
 * Describes the message zitadel.management.v1.AddMachineKeyResponse.
 * Use `create(AddMachineKeyResponseSchema)` to create a new message.
 */
export const AddMachineKeyResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 105);

/**
 * Describes the message zitadel.management.v1.RemoveMachineKeyRequest.
 * Use `create(RemoveMachineKeyRequestSchema)` to create a new message.
 */
export const RemoveMachineKeyRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 106);

/**
 * Describes the message zitadel.management.v1.RemoveMachineKeyResponse.
 * Use `create(RemoveMachineKeyResponseSchema)` to create a new message.
 */
export const RemoveMachineKeyResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 107);

/**
 * Describes the message zitadel.management.v1.GetPersonalAccessTokenByIDsRequest.
 * Use `create(GetPersonalAccessTokenByIDsRequestSchema)` to create a new message.
 */
export const GetPersonalAccessTokenByIDsRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 108);

/**
 * Describes the message zitadel.management.v1.GetPersonalAccessTokenByIDsResponse.
 * Use `create(GetPersonalAccessTokenByIDsResponseSchema)` to create a new message.
 */
export const GetPersonalAccessTokenByIDsResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 109);

/**
 * Describes the message zitadel.management.v1.ListPersonalAccessTokensRequest.
 * Use `create(ListPersonalAccessTokensRequestSchema)` to create a new message.
 */
export const ListPersonalAccessTokensRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 110);

/**
 * Describes the message zitadel.management.v1.ListPersonalAccessTokensResponse.
 * Use `create(ListPersonalAccessTokensResponseSchema)` to create a new message.
 */
export const ListPersonalAccessTokensResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 111);

/**
 * Describes the message zitadel.management.v1.AddPersonalAccessTokenRequest.
 * Use `create(AddPersonalAccessTokenRequestSchema)` to create a new message.
 */
export const AddPersonalAccessTokenRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 112);

/**
 * Describes the message zitadel.management.v1.AddPersonalAccessTokenResponse.
 * Use `create(AddPersonalAccessTokenResponseSchema)` to create a new message.
 */
export const AddPersonalAccessTokenResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 113);

/**
 * Describes the message zitadel.management.v1.RemovePersonalAccessTokenRequest.
 * Use `create(RemovePersonalAccessTokenRequestSchema)` to create a new message.
 */
export const RemovePersonalAccessTokenRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 114);

/**
 * Describes the message zitadel.management.v1.RemovePersonalAccessTokenResponse.
 * Use `create(RemovePersonalAccessTokenResponseSchema)` to create a new message.
 */
export const RemovePersonalAccessTokenResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 115);

/**
 * Describes the message zitadel.management.v1.ListHumanLinkedIDPsRequest.
 * Use `create(ListHumanLinkedIDPsRequestSchema)` to create a new message.
 */
export const ListHumanLinkedIDPsRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 116);

/**
 * Describes the message zitadel.management.v1.ListHumanLinkedIDPsResponse.
 * Use `create(ListHumanLinkedIDPsResponseSchema)` to create a new message.
 */
export const ListHumanLinkedIDPsResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 117);

/**
 * Describes the message zitadel.management.v1.RemoveHumanLinkedIDPRequest.
 * Use `create(RemoveHumanLinkedIDPRequestSchema)` to create a new message.
 */
export const RemoveHumanLinkedIDPRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 118);

/**
 * Describes the message zitadel.management.v1.RemoveHumanLinkedIDPResponse.
 * Use `create(RemoveHumanLinkedIDPResponseSchema)` to create a new message.
 */
export const RemoveHumanLinkedIDPResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 119);

/**
 * Describes the message zitadel.management.v1.ListUserMembershipsRequest.
 * Use `create(ListUserMembershipsRequestSchema)` to create a new message.
 */
export const ListUserMembershipsRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 120);

/**
 * Describes the message zitadel.management.v1.ListUserMembershipsResponse.
 * Use `create(ListUserMembershipsResponseSchema)` to create a new message.
 */
export const ListUserMembershipsResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 121);

/**
 * Describes the message zitadel.management.v1.GetMyOrgRequest.
 * Use `create(GetMyOrgRequestSchema)` to create a new message.
 */
export const GetMyOrgRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 122);

/**
 * Describes the message zitadel.management.v1.GetMyOrgResponse.
 * Use `create(GetMyOrgResponseSchema)` to create a new message.
 */
export const GetMyOrgResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 123);

/**
 * Describes the message zitadel.management.v1.GetOrgByDomainGlobalRequest.
 * Use `create(GetOrgByDomainGlobalRequestSchema)` to create a new message.
 */
export const GetOrgByDomainGlobalRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 124);

/**
 * Describes the message zitadel.management.v1.ListOrgChangesRequest.
 * Use `create(ListOrgChangesRequestSchema)` to create a new message.
 */
export const ListOrgChangesRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 125);

/**
 * Describes the message zitadel.management.v1.ListOrgChangesResponse.
 * Use `create(ListOrgChangesResponseSchema)` to create a new message.
 */
export const ListOrgChangesResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 126);

/**
 * Describes the message zitadel.management.v1.GetOrgByDomainGlobalResponse.
 * Use `create(GetOrgByDomainGlobalResponseSchema)` to create a new message.
 */
export const GetOrgByDomainGlobalResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 127);

/**
 * Describes the message zitadel.management.v1.AddOrgRequest.
 * Use `create(AddOrgRequestSchema)` to create a new message.
 */
export const AddOrgRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 128);

/**
 * Describes the message zitadel.management.v1.AddOrgResponse.
 * Use `create(AddOrgResponseSchema)` to create a new message.
 */
export const AddOrgResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 129);

/**
 * Describes the message zitadel.management.v1.UpdateOrgRequest.
 * Use `create(UpdateOrgRequestSchema)` to create a new message.
 */
export const UpdateOrgRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 130);

/**
 * Describes the message zitadel.management.v1.UpdateOrgResponse.
 * Use `create(UpdateOrgResponseSchema)` to create a new message.
 */
export const UpdateOrgResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 131);

/**
 * Describes the message zitadel.management.v1.DeactivateOrgRequest.
 * Use `create(DeactivateOrgRequestSchema)` to create a new message.
 */
export const DeactivateOrgRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 132);

/**
 * Describes the message zitadel.management.v1.DeactivateOrgResponse.
 * Use `create(DeactivateOrgResponseSchema)` to create a new message.
 */
export const DeactivateOrgResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 133);

/**
 * Describes the message zitadel.management.v1.ReactivateOrgRequest.
 * Use `create(ReactivateOrgRequestSchema)` to create a new message.
 */
export const ReactivateOrgRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 134);

/**
 * Describes the message zitadel.management.v1.ReactivateOrgResponse.
 * Use `create(ReactivateOrgResponseSchema)` to create a new message.
 */
export const ReactivateOrgResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 135);

/**
 * Describes the message zitadel.management.v1.RemoveOrgRequest.
 * Use `create(RemoveOrgRequestSchema)` to create a new message.
 */
export const RemoveOrgRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 136);

/**
 * Describes the message zitadel.management.v1.RemoveOrgResponse.
 * Use `create(RemoveOrgResponseSchema)` to create a new message.
 */
export const RemoveOrgResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 137);

/**
 * Describes the message zitadel.management.v1.ListOrgDomainsRequest.
 * Use `create(ListOrgDomainsRequestSchema)` to create a new message.
 */
export const ListOrgDomainsRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 138);

/**
 * Describes the message zitadel.management.v1.ListOrgDomainsResponse.
 * Use `create(ListOrgDomainsResponseSchema)` to create a new message.
 */
export const ListOrgDomainsResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 139);

/**
 * Describes the message zitadel.management.v1.AddOrgDomainRequest.
 * Use `create(AddOrgDomainRequestSchema)` to create a new message.
 */
export const AddOrgDomainRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 140);

/**
 * Describes the message zitadel.management.v1.AddOrgDomainResponse.
 * Use `create(AddOrgDomainResponseSchema)` to create a new message.
 */
export const AddOrgDomainResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 141);

/**
 * Describes the message zitadel.management.v1.RemoveOrgDomainRequest.
 * Use `create(RemoveOrgDomainRequestSchema)` to create a new message.
 */
export const RemoveOrgDomainRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 142);

/**
 * Describes the message zitadel.management.v1.RemoveOrgDomainResponse.
 * Use `create(RemoveOrgDomainResponseSchema)` to create a new message.
 */
export const RemoveOrgDomainResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 143);

/**
 * Describes the message zitadel.management.v1.GenerateOrgDomainValidationRequest.
 * Use `create(GenerateOrgDomainValidationRequestSchema)` to create a new message.
 */
export const GenerateOrgDomainValidationRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 144);

/**
 * Describes the message zitadel.management.v1.GenerateOrgDomainValidationResponse.
 * Use `create(GenerateOrgDomainValidationResponseSchema)` to create a new message.
 */
export const GenerateOrgDomainValidationResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 145);

/**
 * Describes the message zitadel.management.v1.ValidateOrgDomainRequest.
 * Use `create(ValidateOrgDomainRequestSchema)` to create a new message.
 */
export const ValidateOrgDomainRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 146);

/**
 * Describes the message zitadel.management.v1.ValidateOrgDomainResponse.
 * Use `create(ValidateOrgDomainResponseSchema)` to create a new message.
 */
export const ValidateOrgDomainResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 147);

/**
 * Describes the message zitadel.management.v1.SetPrimaryOrgDomainRequest.
 * Use `create(SetPrimaryOrgDomainRequestSchema)` to create a new message.
 */
export const SetPrimaryOrgDomainRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 148);

/**
 * Describes the message zitadel.management.v1.SetPrimaryOrgDomainResponse.
 * Use `create(SetPrimaryOrgDomainResponseSchema)` to create a new message.
 */
export const SetPrimaryOrgDomainResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 149);

/**
 * Describes the message zitadel.management.v1.ListOrgMemberRolesRequest.
 * Use `create(ListOrgMemberRolesRequestSchema)` to create a new message.
 */
export const ListOrgMemberRolesRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 150);

/**
 * Describes the message zitadel.management.v1.ListOrgMemberRolesResponse.
 * Use `create(ListOrgMemberRolesResponseSchema)` to create a new message.
 */
export const ListOrgMemberRolesResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 151);

/**
 * Describes the message zitadel.management.v1.ListOrgMembersRequest.
 * Use `create(ListOrgMembersRequestSchema)` to create a new message.
 */
export const ListOrgMembersRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 152);

/**
 * Describes the message zitadel.management.v1.ListOrgMembersResponse.
 * Use `create(ListOrgMembersResponseSchema)` to create a new message.
 */
export const ListOrgMembersResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 153);

/**
 * Describes the message zitadel.management.v1.AddOrgMemberRequest.
 * Use `create(AddOrgMemberRequestSchema)` to create a new message.
 */
export const AddOrgMemberRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 154);

/**
 * Describes the message zitadel.management.v1.AddOrgMemberResponse.
 * Use `create(AddOrgMemberResponseSchema)` to create a new message.
 */
export const AddOrgMemberResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 155);

/**
 * Describes the message zitadel.management.v1.UpdateOrgMemberRequest.
 * Use `create(UpdateOrgMemberRequestSchema)` to create a new message.
 */
export const UpdateOrgMemberRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 156);

/**
 * Describes the message zitadel.management.v1.UpdateOrgMemberResponse.
 * Use `create(UpdateOrgMemberResponseSchema)` to create a new message.
 */
export const UpdateOrgMemberResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 157);

/**
 * Describes the message zitadel.management.v1.RemoveOrgMemberRequest.
 * Use `create(RemoveOrgMemberRequestSchema)` to create a new message.
 */
export const RemoveOrgMemberRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 158);

/**
 * Describes the message zitadel.management.v1.RemoveOrgMemberResponse.
 * Use `create(RemoveOrgMemberResponseSchema)` to create a new message.
 */
export const RemoveOrgMemberResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 159);

/**
 * Describes the message zitadel.management.v1.ListOrgMetadataRequest.
 * Use `create(ListOrgMetadataRequestSchema)` to create a new message.
 */
export const ListOrgMetadataRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 160);

/**
 * Describes the message zitadel.management.v1.ListOrgMetadataResponse.
 * Use `create(ListOrgMetadataResponseSchema)` to create a new message.
 */
export const ListOrgMetadataResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 161);

/**
 * Describes the message zitadel.management.v1.GetOrgMetadataRequest.
 * Use `create(GetOrgMetadataRequestSchema)` to create a new message.
 */
export const GetOrgMetadataRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 162);

/**
 * Describes the message zitadel.management.v1.GetOrgMetadataResponse.
 * Use `create(GetOrgMetadataResponseSchema)` to create a new message.
 */
export const GetOrgMetadataResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 163);

/**
 * Describes the message zitadel.management.v1.SetOrgMetadataRequest.
 * Use `create(SetOrgMetadataRequestSchema)` to create a new message.
 */
export const SetOrgMetadataRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 164);

/**
 * Describes the message zitadel.management.v1.SetOrgMetadataResponse.
 * Use `create(SetOrgMetadataResponseSchema)` to create a new message.
 */
export const SetOrgMetadataResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 165);

/**
 * Describes the message zitadel.management.v1.BulkSetOrgMetadataRequest.
 * Use `create(BulkSetOrgMetadataRequestSchema)` to create a new message.
 */
export const BulkSetOrgMetadataRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 166);

/**
 * Describes the message zitadel.management.v1.BulkSetOrgMetadataRequest.Metadata.
 * Use `create(BulkSetOrgMetadataRequest_MetadataSchema)` to create a new message.
 */
export const BulkSetOrgMetadataRequest_MetadataSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 166, 0);

/**
 * Describes the message zitadel.management.v1.BulkSetOrgMetadataResponse.
 * Use `create(BulkSetOrgMetadataResponseSchema)` to create a new message.
 */
export const BulkSetOrgMetadataResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 167);

/**
 * Describes the message zitadel.management.v1.RemoveOrgMetadataRequest.
 * Use `create(RemoveOrgMetadataRequestSchema)` to create a new message.
 */
export const RemoveOrgMetadataRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 168);

/**
 * Describes the message zitadel.management.v1.RemoveOrgMetadataResponse.
 * Use `create(RemoveOrgMetadataResponseSchema)` to create a new message.
 */
export const RemoveOrgMetadataResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 169);

/**
 * Describes the message zitadel.management.v1.BulkRemoveOrgMetadataRequest.
 * Use `create(BulkRemoveOrgMetadataRequestSchema)` to create a new message.
 */
export const BulkRemoveOrgMetadataRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 170);

/**
 * Describes the message zitadel.management.v1.BulkRemoveOrgMetadataResponse.
 * Use `create(BulkRemoveOrgMetadataResponseSchema)` to create a new message.
 */
export const BulkRemoveOrgMetadataResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 171);

/**
 * Describes the message zitadel.management.v1.GetProjectByIDRequest.
 * Use `create(GetProjectByIDRequestSchema)` to create a new message.
 */
export const GetProjectByIDRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 172);

/**
 * Describes the message zitadel.management.v1.GetProjectByIDResponse.
 * Use `create(GetProjectByIDResponseSchema)` to create a new message.
 */
export const GetProjectByIDResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 173);

/**
 * Describes the message zitadel.management.v1.GetGrantedProjectByIDRequest.
 * Use `create(GetGrantedProjectByIDRequestSchema)` to create a new message.
 */
export const GetGrantedProjectByIDRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 174);

/**
 * Describes the message zitadel.management.v1.GetGrantedProjectByIDResponse.
 * Use `create(GetGrantedProjectByIDResponseSchema)` to create a new message.
 */
export const GetGrantedProjectByIDResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 175);

/**
 * Describes the message zitadel.management.v1.ListProjectsRequest.
 * Use `create(ListProjectsRequestSchema)` to create a new message.
 */
export const ListProjectsRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 176);

/**
 * Describes the message zitadel.management.v1.ListProjectsResponse.
 * Use `create(ListProjectsResponseSchema)` to create a new message.
 */
export const ListProjectsResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 177);

/**
 * Describes the message zitadel.management.v1.ListGrantedProjectsRequest.
 * Use `create(ListGrantedProjectsRequestSchema)` to create a new message.
 */
export const ListGrantedProjectsRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 178);

/**
 * Describes the message zitadel.management.v1.ListGrantedProjectsResponse.
 * Use `create(ListGrantedProjectsResponseSchema)` to create a new message.
 */
export const ListGrantedProjectsResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 179);

/**
 * Describes the message zitadel.management.v1.ListProjectChangesRequest.
 * Use `create(ListProjectChangesRequestSchema)` to create a new message.
 */
export const ListProjectChangesRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 180);

/**
 * Describes the message zitadel.management.v1.ListProjectChangesResponse.
 * Use `create(ListProjectChangesResponseSchema)` to create a new message.
 */
export const ListProjectChangesResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 181);

/**
 * Describes the message zitadel.management.v1.AddProjectRequest.
 * Use `create(AddProjectRequestSchema)` to create a new message.
 */
export const AddProjectRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 182);

/**
 * Describes the message zitadel.management.v1.AddProjectResponse.
 * Use `create(AddProjectResponseSchema)` to create a new message.
 */
export const AddProjectResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 183);

/**
 * Describes the message zitadel.management.v1.UpdateProjectRequest.
 * Use `create(UpdateProjectRequestSchema)` to create a new message.
 */
export const UpdateProjectRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 184);

/**
 * Describes the message zitadel.management.v1.UpdateProjectResponse.
 * Use `create(UpdateProjectResponseSchema)` to create a new message.
 */
export const UpdateProjectResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 185);

/**
 * Describes the message zitadel.management.v1.DeactivateProjectRequest.
 * Use `create(DeactivateProjectRequestSchema)` to create a new message.
 */
export const DeactivateProjectRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 186);

/**
 * Describes the message zitadel.management.v1.DeactivateProjectResponse.
 * Use `create(DeactivateProjectResponseSchema)` to create a new message.
 */
export const DeactivateProjectResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 187);

/**
 * Describes the message zitadel.management.v1.ReactivateProjectRequest.
 * Use `create(ReactivateProjectRequestSchema)` to create a new message.
 */
export const ReactivateProjectRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 188);

/**
 * Describes the message zitadel.management.v1.ReactivateProjectResponse.
 * Use `create(ReactivateProjectResponseSchema)` to create a new message.
 */
export const ReactivateProjectResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 189);

/**
 * Describes the message zitadel.management.v1.RemoveProjectRequest.
 * Use `create(RemoveProjectRequestSchema)` to create a new message.
 */
export const RemoveProjectRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 190);

/**
 * Describes the message zitadel.management.v1.RemoveProjectResponse.
 * Use `create(RemoveProjectResponseSchema)` to create a new message.
 */
export const RemoveProjectResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 191);

/**
 * Describes the message zitadel.management.v1.ListProjectMemberRolesRequest.
 * Use `create(ListProjectMemberRolesRequestSchema)` to create a new message.
 */
export const ListProjectMemberRolesRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 192);

/**
 * Describes the message zitadel.management.v1.ListProjectMemberRolesResponse.
 * Use `create(ListProjectMemberRolesResponseSchema)` to create a new message.
 */
export const ListProjectMemberRolesResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 193);

/**
 * Describes the message zitadel.management.v1.AddProjectRoleRequest.
 * Use `create(AddProjectRoleRequestSchema)` to create a new message.
 */
export const AddProjectRoleRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 194);

/**
 * Describes the message zitadel.management.v1.AddProjectRoleResponse.
 * Use `create(AddProjectRoleResponseSchema)` to create a new message.
 */
export const AddProjectRoleResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 195);

/**
 * Describes the message zitadel.management.v1.BulkAddProjectRolesRequest.
 * Use `create(BulkAddProjectRolesRequestSchema)` to create a new message.
 */
export const BulkAddProjectRolesRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 196);

/**
 * Describes the message zitadel.management.v1.BulkAddProjectRolesRequest.Role.
 * Use `create(BulkAddProjectRolesRequest_RoleSchema)` to create a new message.
 */
export const BulkAddProjectRolesRequest_RoleSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 196, 0);

/**
 * Describes the message zitadel.management.v1.BulkAddProjectRolesResponse.
 * Use `create(BulkAddProjectRolesResponseSchema)` to create a new message.
 */
export const BulkAddProjectRolesResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 197);

/**
 * Describes the message zitadel.management.v1.UpdateProjectRoleRequest.
 * Use `create(UpdateProjectRoleRequestSchema)` to create a new message.
 */
export const UpdateProjectRoleRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 198);

/**
 * Describes the message zitadel.management.v1.UpdateProjectRoleResponse.
 * Use `create(UpdateProjectRoleResponseSchema)` to create a new message.
 */
export const UpdateProjectRoleResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 199);

/**
 * Describes the message zitadel.management.v1.RemoveProjectRoleRequest.
 * Use `create(RemoveProjectRoleRequestSchema)` to create a new message.
 */
export const RemoveProjectRoleRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 200);

/**
 * Describes the message zitadel.management.v1.RemoveProjectRoleResponse.
 * Use `create(RemoveProjectRoleResponseSchema)` to create a new message.
 */
export const RemoveProjectRoleResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 201);

/**
 * Describes the message zitadel.management.v1.ListProjectRolesRequest.
 * Use `create(ListProjectRolesRequestSchema)` to create a new message.
 */
export const ListProjectRolesRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 202);

/**
 * Describes the message zitadel.management.v1.ListProjectRolesResponse.
 * Use `create(ListProjectRolesResponseSchema)` to create a new message.
 */
export const ListProjectRolesResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 203);

/**
 * Describes the message zitadel.management.v1.ListGrantedProjectRolesRequest.
 * Use `create(ListGrantedProjectRolesRequestSchema)` to create a new message.
 */
export const ListGrantedProjectRolesRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 204);

/**
 * Describes the message zitadel.management.v1.ListGrantedProjectRolesResponse.
 * Use `create(ListGrantedProjectRolesResponseSchema)` to create a new message.
 */
export const ListGrantedProjectRolesResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 205);

/**
 * Describes the message zitadel.management.v1.ListProjectMembersRequest.
 * Use `create(ListProjectMembersRequestSchema)` to create a new message.
 */
export const ListProjectMembersRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 206);

/**
 * Describes the message zitadel.management.v1.ListProjectMembersResponse.
 * Use `create(ListProjectMembersResponseSchema)` to create a new message.
 */
export const ListProjectMembersResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 207);

/**
 * Describes the message zitadel.management.v1.AddProjectMemberRequest.
 * Use `create(AddProjectMemberRequestSchema)` to create a new message.
 */
export const AddProjectMemberRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 208);

/**
 * Describes the message zitadel.management.v1.AddProjectMemberResponse.
 * Use `create(AddProjectMemberResponseSchema)` to create a new message.
 */
export const AddProjectMemberResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 209);

/**
 * Describes the message zitadel.management.v1.UpdateProjectMemberRequest.
 * Use `create(UpdateProjectMemberRequestSchema)` to create a new message.
 */
export const UpdateProjectMemberRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 210);

/**
 * Describes the message zitadel.management.v1.UpdateProjectMemberResponse.
 * Use `create(UpdateProjectMemberResponseSchema)` to create a new message.
 */
export const UpdateProjectMemberResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 211);

/**
 * Describes the message zitadel.management.v1.RemoveProjectMemberRequest.
 * Use `create(RemoveProjectMemberRequestSchema)` to create a new message.
 */
export const RemoveProjectMemberRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 212);

/**
 * Describes the message zitadel.management.v1.RemoveProjectMemberResponse.
 * Use `create(RemoveProjectMemberResponseSchema)` to create a new message.
 */
export const RemoveProjectMemberResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 213);

/**
 * Describes the message zitadel.management.v1.GetAppByIDRequest.
 * Use `create(GetAppByIDRequestSchema)` to create a new message.
 */
export const GetAppByIDRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 214);

/**
 * Describes the message zitadel.management.v1.GetAppByIDResponse.
 * Use `create(GetAppByIDResponseSchema)` to create a new message.
 */
export const GetAppByIDResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 215);

/**
 * Describes the message zitadel.management.v1.ListAppsRequest.
 * Use `create(ListAppsRequestSchema)` to create a new message.
 */
export const ListAppsRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 216);

/**
 * Describes the message zitadel.management.v1.ListAppsResponse.
 * Use `create(ListAppsResponseSchema)` to create a new message.
 */
export const ListAppsResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 217);

/**
 * Describes the message zitadel.management.v1.ListAppChangesRequest.
 * Use `create(ListAppChangesRequestSchema)` to create a new message.
 */
export const ListAppChangesRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 218);

/**
 * Describes the message zitadel.management.v1.ListAppChangesResponse.
 * Use `create(ListAppChangesResponseSchema)` to create a new message.
 */
export const ListAppChangesResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 219);

/**
 * Describes the message zitadel.management.v1.AddOIDCAppRequest.
 * Use `create(AddOIDCAppRequestSchema)` to create a new message.
 */
export const AddOIDCAppRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 220);

/**
 * Describes the message zitadel.management.v1.AddOIDCAppResponse.
 * Use `create(AddOIDCAppResponseSchema)` to create a new message.
 */
export const AddOIDCAppResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 221);

/**
 * Describes the message zitadel.management.v1.AddSAMLAppRequest.
 * Use `create(AddSAMLAppRequestSchema)` to create a new message.
 */
export const AddSAMLAppRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 222);

/**
 * Describes the message zitadel.management.v1.AddSAMLAppResponse.
 * Use `create(AddSAMLAppResponseSchema)` to create a new message.
 */
export const AddSAMLAppResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 223);

/**
 * Describes the message zitadel.management.v1.AddAPIAppRequest.
 * Use `create(AddAPIAppRequestSchema)` to create a new message.
 */
export const AddAPIAppRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 224);

/**
 * Describes the message zitadel.management.v1.AddAPIAppResponse.
 * Use `create(AddAPIAppResponseSchema)` to create a new message.
 */
export const AddAPIAppResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 225);

/**
 * Describes the message zitadel.management.v1.UpdateAppRequest.
 * Use `create(UpdateAppRequestSchema)` to create a new message.
 */
export const UpdateAppRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 226);

/**
 * Describes the message zitadel.management.v1.UpdateAppResponse.
 * Use `create(UpdateAppResponseSchema)` to create a new message.
 */
export const UpdateAppResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 227);

/**
 * Describes the message zitadel.management.v1.UpdateOIDCAppConfigRequest.
 * Use `create(UpdateOIDCAppConfigRequestSchema)` to create a new message.
 */
export const UpdateOIDCAppConfigRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 228);

/**
 * Describes the message zitadel.management.v1.UpdateOIDCAppConfigResponse.
 * Use `create(UpdateOIDCAppConfigResponseSchema)` to create a new message.
 */
export const UpdateOIDCAppConfigResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 229);

/**
 * Describes the message zitadel.management.v1.UpdateSAMLAppConfigRequest.
 * Use `create(UpdateSAMLAppConfigRequestSchema)` to create a new message.
 */
export const UpdateSAMLAppConfigRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 230);

/**
 * Describes the message zitadel.management.v1.UpdateSAMLAppConfigResponse.
 * Use `create(UpdateSAMLAppConfigResponseSchema)` to create a new message.
 */
export const UpdateSAMLAppConfigResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 231);

/**
 * Describes the message zitadel.management.v1.UpdateAPIAppConfigRequest.
 * Use `create(UpdateAPIAppConfigRequestSchema)` to create a new message.
 */
export const UpdateAPIAppConfigRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 232);

/**
 * Describes the message zitadel.management.v1.UpdateAPIAppConfigResponse.
 * Use `create(UpdateAPIAppConfigResponseSchema)` to create a new message.
 */
export const UpdateAPIAppConfigResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 233);

/**
 * Describes the message zitadel.management.v1.DeactivateAppRequest.
 * Use `create(DeactivateAppRequestSchema)` to create a new message.
 */
export const DeactivateAppRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 234);

/**
 * Describes the message zitadel.management.v1.DeactivateAppResponse.
 * Use `create(DeactivateAppResponseSchema)` to create a new message.
 */
export const DeactivateAppResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 235);

/**
 * Describes the message zitadel.management.v1.ReactivateAppRequest.
 * Use `create(ReactivateAppRequestSchema)` to create a new message.
 */
export const ReactivateAppRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 236);

/**
 * Describes the message zitadel.management.v1.ReactivateAppResponse.
 * Use `create(ReactivateAppResponseSchema)` to create a new message.
 */
export const ReactivateAppResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 237);

/**
 * Describes the message zitadel.management.v1.RemoveAppRequest.
 * Use `create(RemoveAppRequestSchema)` to create a new message.
 */
export const RemoveAppRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 238);

/**
 * Describes the message zitadel.management.v1.RemoveAppResponse.
 * Use `create(RemoveAppResponseSchema)` to create a new message.
 */
export const RemoveAppResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 239);

/**
 * Describes the message zitadel.management.v1.RegenerateOIDCClientSecretRequest.
 * Use `create(RegenerateOIDCClientSecretRequestSchema)` to create a new message.
 */
export const RegenerateOIDCClientSecretRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 240);

/**
 * Describes the message zitadel.management.v1.RegenerateOIDCClientSecretResponse.
 * Use `create(RegenerateOIDCClientSecretResponseSchema)` to create a new message.
 */
export const RegenerateOIDCClientSecretResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 241);

/**
 * Describes the message zitadel.management.v1.RegenerateAPIClientSecretRequest.
 * Use `create(RegenerateAPIClientSecretRequestSchema)` to create a new message.
 */
export const RegenerateAPIClientSecretRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 242);

/**
 * Describes the message zitadel.management.v1.RegenerateAPIClientSecretResponse.
 * Use `create(RegenerateAPIClientSecretResponseSchema)` to create a new message.
 */
export const RegenerateAPIClientSecretResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 243);

/**
 * Describes the message zitadel.management.v1.GetAppKeyRequest.
 * Use `create(GetAppKeyRequestSchema)` to create a new message.
 */
export const GetAppKeyRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 244);

/**
 * Describes the message zitadel.management.v1.GetAppKeyResponse.
 * Use `create(GetAppKeyResponseSchema)` to create a new message.
 */
export const GetAppKeyResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 245);

/**
 * Describes the message zitadel.management.v1.ListAppKeysRequest.
 * Use `create(ListAppKeysRequestSchema)` to create a new message.
 */
export const ListAppKeysRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 246);

/**
 * Describes the message zitadel.management.v1.ListAppKeysResponse.
 * Use `create(ListAppKeysResponseSchema)` to create a new message.
 */
export const ListAppKeysResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 247);

/**
 * Describes the message zitadel.management.v1.AddAppKeyRequest.
 * Use `create(AddAppKeyRequestSchema)` to create a new message.
 */
export const AddAppKeyRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 248);

/**
 * Describes the message zitadel.management.v1.AddAppKeyResponse.
 * Use `create(AddAppKeyResponseSchema)` to create a new message.
 */
export const AddAppKeyResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 249);

/**
 * Describes the message zitadel.management.v1.RemoveAppKeyRequest.
 * Use `create(RemoveAppKeyRequestSchema)` to create a new message.
 */
export const RemoveAppKeyRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 250);

/**
 * Describes the message zitadel.management.v1.RemoveAppKeyResponse.
 * Use `create(RemoveAppKeyResponseSchema)` to create a new message.
 */
export const RemoveAppKeyResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 251);

/**
 * Describes the message zitadel.management.v1.ListProjectGrantChangesRequest.
 * Use `create(ListProjectGrantChangesRequestSchema)` to create a new message.
 */
export const ListProjectGrantChangesRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 252);

/**
 * Describes the message zitadel.management.v1.ListProjectGrantChangesResponse.
 * Use `create(ListProjectGrantChangesResponseSchema)` to create a new message.
 */
export const ListProjectGrantChangesResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 253);

/**
 * Describes the message zitadel.management.v1.GetProjectGrantByIDRequest.
 * Use `create(GetProjectGrantByIDRequestSchema)` to create a new message.
 */
export const GetProjectGrantByIDRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 254);

/**
 * Describes the message zitadel.management.v1.GetProjectGrantByIDResponse.
 * Use `create(GetProjectGrantByIDResponseSchema)` to create a new message.
 */
export const GetProjectGrantByIDResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 255);

/**
 * Describes the message zitadel.management.v1.ListProjectGrantsRequest.
 * Use `create(ListProjectGrantsRequestSchema)` to create a new message.
 */
export const ListProjectGrantsRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 256);

/**
 * Describes the message zitadel.management.v1.ListProjectGrantsResponse.
 * Use `create(ListProjectGrantsResponseSchema)` to create a new message.
 */
export const ListProjectGrantsResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 257);

/**
 * Describes the message zitadel.management.v1.ListAllProjectGrantsRequest.
 * Use `create(ListAllProjectGrantsRequestSchema)` to create a new message.
 */
export const ListAllProjectGrantsRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 258);

/**
 * Describes the message zitadel.management.v1.ListAllProjectGrantsResponse.
 * Use `create(ListAllProjectGrantsResponseSchema)` to create a new message.
 */
export const ListAllProjectGrantsResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 259);

/**
 * Describes the message zitadel.management.v1.AddProjectGrantRequest.
 * Use `create(AddProjectGrantRequestSchema)` to create a new message.
 */
export const AddProjectGrantRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 260);

/**
 * Describes the message zitadel.management.v1.AddProjectGrantResponse.
 * Use `create(AddProjectGrantResponseSchema)` to create a new message.
 */
export const AddProjectGrantResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 261);

/**
 * Describes the message zitadel.management.v1.UpdateProjectGrantRequest.
 * Use `create(UpdateProjectGrantRequestSchema)` to create a new message.
 */
export const UpdateProjectGrantRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 262);

/**
 * Describes the message zitadel.management.v1.UpdateProjectGrantResponse.
 * Use `create(UpdateProjectGrantResponseSchema)` to create a new message.
 */
export const UpdateProjectGrantResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 263);

/**
 * Describes the message zitadel.management.v1.DeactivateProjectGrantRequest.
 * Use `create(DeactivateProjectGrantRequestSchema)` to create a new message.
 */
export const DeactivateProjectGrantRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 264);

/**
 * Describes the message zitadel.management.v1.DeactivateProjectGrantResponse.
 * Use `create(DeactivateProjectGrantResponseSchema)` to create a new message.
 */
export const DeactivateProjectGrantResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 265);

/**
 * Describes the message zitadel.management.v1.ReactivateProjectGrantRequest.
 * Use `create(ReactivateProjectGrantRequestSchema)` to create a new message.
 */
export const ReactivateProjectGrantRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 266);

/**
 * Describes the message zitadel.management.v1.ReactivateProjectGrantResponse.
 * Use `create(ReactivateProjectGrantResponseSchema)` to create a new message.
 */
export const ReactivateProjectGrantResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 267);

/**
 * Describes the message zitadel.management.v1.RemoveProjectGrantRequest.
 * Use `create(RemoveProjectGrantRequestSchema)` to create a new message.
 */
export const RemoveProjectGrantRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 268);

/**
 * Describes the message zitadel.management.v1.RemoveProjectGrantResponse.
 * Use `create(RemoveProjectGrantResponseSchema)` to create a new message.
 */
export const RemoveProjectGrantResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 269);

/**
 * Describes the message zitadel.management.v1.ListProjectGrantMemberRolesRequest.
 * Use `create(ListProjectGrantMemberRolesRequestSchema)` to create a new message.
 */
export const ListProjectGrantMemberRolesRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 270);

/**
 * Describes the message zitadel.management.v1.ListProjectGrantMemberRolesResponse.
 * Use `create(ListProjectGrantMemberRolesResponseSchema)` to create a new message.
 */
export const ListProjectGrantMemberRolesResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 271);

/**
 * Describes the message zitadel.management.v1.ListProjectGrantMembersRequest.
 * Use `create(ListProjectGrantMembersRequestSchema)` to create a new message.
 */
export const ListProjectGrantMembersRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 272);

/**
 * Describes the message zitadel.management.v1.ListProjectGrantMembersResponse.
 * Use `create(ListProjectGrantMembersResponseSchema)` to create a new message.
 */
export const ListProjectGrantMembersResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 273);

/**
 * Describes the message zitadel.management.v1.AddProjectGrantMemberRequest.
 * Use `create(AddProjectGrantMemberRequestSchema)` to create a new message.
 */
export const AddProjectGrantMemberRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 274);

/**
 * Describes the message zitadel.management.v1.AddProjectGrantMemberResponse.
 * Use `create(AddProjectGrantMemberResponseSchema)` to create a new message.
 */
export const AddProjectGrantMemberResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 275);

/**
 * Describes the message zitadel.management.v1.UpdateProjectGrantMemberRequest.
 * Use `create(UpdateProjectGrantMemberRequestSchema)` to create a new message.
 */
export const UpdateProjectGrantMemberRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 276);

/**
 * Describes the message zitadel.management.v1.UpdateProjectGrantMemberResponse.
 * Use `create(UpdateProjectGrantMemberResponseSchema)` to create a new message.
 */
export const UpdateProjectGrantMemberResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 277);

/**
 * Describes the message zitadel.management.v1.RemoveProjectGrantMemberRequest.
 * Use `create(RemoveProjectGrantMemberRequestSchema)` to create a new message.
 */
export const RemoveProjectGrantMemberRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 278);

/**
 * Describes the message zitadel.management.v1.RemoveProjectGrantMemberResponse.
 * Use `create(RemoveProjectGrantMemberResponseSchema)` to create a new message.
 */
export const RemoveProjectGrantMemberResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 279);

/**
 * Describes the message zitadel.management.v1.GetUserGrantByIDRequest.
 * Use `create(GetUserGrantByIDRequestSchema)` to create a new message.
 */
export const GetUserGrantByIDRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 280);

/**
 * Describes the message zitadel.management.v1.GetUserGrantByIDResponse.
 * Use `create(GetUserGrantByIDResponseSchema)` to create a new message.
 */
export const GetUserGrantByIDResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 281);

/**
 * Describes the message zitadel.management.v1.ListUserGrantRequest.
 * Use `create(ListUserGrantRequestSchema)` to create a new message.
 */
export const ListUserGrantRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 282);

/**
 * Describes the message zitadel.management.v1.ListUserGrantResponse.
 * Use `create(ListUserGrantResponseSchema)` to create a new message.
 */
export const ListUserGrantResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 283);

/**
 * Describes the message zitadel.management.v1.AddUserGrantRequest.
 * Use `create(AddUserGrantRequestSchema)` to create a new message.
 */
export const AddUserGrantRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 284);

/**
 * Describes the message zitadel.management.v1.AddUserGrantResponse.
 * Use `create(AddUserGrantResponseSchema)` to create a new message.
 */
export const AddUserGrantResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 285);

/**
 * Describes the message zitadel.management.v1.UpdateUserGrantRequest.
 * Use `create(UpdateUserGrantRequestSchema)` to create a new message.
 */
export const UpdateUserGrantRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 286);

/**
 * Describes the message zitadel.management.v1.UpdateUserGrantResponse.
 * Use `create(UpdateUserGrantResponseSchema)` to create a new message.
 */
export const UpdateUserGrantResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 287);

/**
 * Describes the message zitadel.management.v1.DeactivateUserGrantRequest.
 * Use `create(DeactivateUserGrantRequestSchema)` to create a new message.
 */
export const DeactivateUserGrantRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 288);

/**
 * Describes the message zitadel.management.v1.DeactivateUserGrantResponse.
 * Use `create(DeactivateUserGrantResponseSchema)` to create a new message.
 */
export const DeactivateUserGrantResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 289);

/**
 * Describes the message zitadel.management.v1.ReactivateUserGrantRequest.
 * Use `create(ReactivateUserGrantRequestSchema)` to create a new message.
 */
export const ReactivateUserGrantRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 290);

/**
 * Describes the message zitadel.management.v1.ReactivateUserGrantResponse.
 * Use `create(ReactivateUserGrantResponseSchema)` to create a new message.
 */
export const ReactivateUserGrantResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 291);

/**
 * Describes the message zitadel.management.v1.RemoveUserGrantRequest.
 * Use `create(RemoveUserGrantRequestSchema)` to create a new message.
 */
export const RemoveUserGrantRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 292);

/**
 * Describes the message zitadel.management.v1.RemoveUserGrantResponse.
 * Use `create(RemoveUserGrantResponseSchema)` to create a new message.
 */
export const RemoveUserGrantResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 293);

/**
 * Describes the message zitadel.management.v1.BulkRemoveUserGrantRequest.
 * Use `create(BulkRemoveUserGrantRequestSchema)` to create a new message.
 */
export const BulkRemoveUserGrantRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 294);

/**
 * Describes the message zitadel.management.v1.BulkRemoveUserGrantResponse.
 * Use `create(BulkRemoveUserGrantResponseSchema)` to create a new message.
 */
export const BulkRemoveUserGrantResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 295);

/**
 * Describes the message zitadel.management.v1.GetOrgIAMPolicyRequest.
 * Use `create(GetOrgIAMPolicyRequestSchema)` to create a new message.
 */
export const GetOrgIAMPolicyRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 296);

/**
 * Describes the message zitadel.management.v1.GetOrgIAMPolicyResponse.
 * Use `create(GetOrgIAMPolicyResponseSchema)` to create a new message.
 */
export const GetOrgIAMPolicyResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 297);

/**
 * Describes the message zitadel.management.v1.GetDomainPolicyRequest.
 * Use `create(GetDomainPolicyRequestSchema)` to create a new message.
 */
export const GetDomainPolicyRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 298);

/**
 * Describes the message zitadel.management.v1.GetDomainPolicyResponse.
 * Use `create(GetDomainPolicyResponseSchema)` to create a new message.
 */
export const GetDomainPolicyResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 299);

/**
 * Describes the message zitadel.management.v1.GetLoginPolicyRequest.
 * Use `create(GetLoginPolicyRequestSchema)` to create a new message.
 */
export const GetLoginPolicyRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 300);

/**
 * Describes the message zitadel.management.v1.GetLoginPolicyResponse.
 * Use `create(GetLoginPolicyResponseSchema)` to create a new message.
 */
export const GetLoginPolicyResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 301);

/**
 * Describes the message zitadel.management.v1.GetDefaultLoginPolicyRequest.
 * Use `create(GetDefaultLoginPolicyRequestSchema)` to create a new message.
 */
export const GetDefaultLoginPolicyRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 302);

/**
 * Describes the message zitadel.management.v1.GetDefaultLoginPolicyResponse.
 * Use `create(GetDefaultLoginPolicyResponseSchema)` to create a new message.
 */
export const GetDefaultLoginPolicyResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 303);

/**
 * Describes the message zitadel.management.v1.AddCustomLoginPolicyRequest.
 * Use `create(AddCustomLoginPolicyRequestSchema)` to create a new message.
 */
export const AddCustomLoginPolicyRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 304);

/**
 * Describes the message zitadel.management.v1.AddCustomLoginPolicyRequest.IDP.
 * Use `create(AddCustomLoginPolicyRequest_IDPSchema)` to create a new message.
 */
export const AddCustomLoginPolicyRequest_IDPSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 304, 0);

/**
 * Describes the message zitadel.management.v1.AddCustomLoginPolicyResponse.
 * Use `create(AddCustomLoginPolicyResponseSchema)` to create a new message.
 */
export const AddCustomLoginPolicyResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 305);

/**
 * Describes the message zitadel.management.v1.UpdateCustomLoginPolicyRequest.
 * Use `create(UpdateCustomLoginPolicyRequestSchema)` to create a new message.
 */
export const UpdateCustomLoginPolicyRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 306);

/**
 * Describes the message zitadel.management.v1.UpdateCustomLoginPolicyResponse.
 * Use `create(UpdateCustomLoginPolicyResponseSchema)` to create a new message.
 */
export const UpdateCustomLoginPolicyResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 307);

/**
 * Describes the message zitadel.management.v1.ResetLoginPolicyToDefaultRequest.
 * Use `create(ResetLoginPolicyToDefaultRequestSchema)` to create a new message.
 */
export const ResetLoginPolicyToDefaultRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 308);

/**
 * Describes the message zitadel.management.v1.ResetLoginPolicyToDefaultResponse.
 * Use `create(ResetLoginPolicyToDefaultResponseSchema)` to create a new message.
 */
export const ResetLoginPolicyToDefaultResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 309);

/**
 * Describes the message zitadel.management.v1.ListLoginPolicyIDPsRequest.
 * Use `create(ListLoginPolicyIDPsRequestSchema)` to create a new message.
 */
export const ListLoginPolicyIDPsRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 310);

/**
 * Describes the message zitadel.management.v1.ListLoginPolicyIDPsResponse.
 * Use `create(ListLoginPolicyIDPsResponseSchema)` to create a new message.
 */
export const ListLoginPolicyIDPsResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 311);

/**
 * Describes the message zitadel.management.v1.AddIDPToLoginPolicyRequest.
 * Use `create(AddIDPToLoginPolicyRequestSchema)` to create a new message.
 */
export const AddIDPToLoginPolicyRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 312);

/**
 * Describes the message zitadel.management.v1.AddIDPToLoginPolicyResponse.
 * Use `create(AddIDPToLoginPolicyResponseSchema)` to create a new message.
 */
export const AddIDPToLoginPolicyResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 313);

/**
 * Describes the message zitadel.management.v1.RemoveIDPFromLoginPolicyRequest.
 * Use `create(RemoveIDPFromLoginPolicyRequestSchema)` to create a new message.
 */
export const RemoveIDPFromLoginPolicyRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 314);

/**
 * Describes the message zitadel.management.v1.RemoveIDPFromLoginPolicyResponse.
 * Use `create(RemoveIDPFromLoginPolicyResponseSchema)` to create a new message.
 */
export const RemoveIDPFromLoginPolicyResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 315);

/**
 * Describes the message zitadel.management.v1.ListLoginPolicySecondFactorsRequest.
 * Use `create(ListLoginPolicySecondFactorsRequestSchema)` to create a new message.
 */
export const ListLoginPolicySecondFactorsRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 316);

/**
 * Describes the message zitadel.management.v1.ListLoginPolicySecondFactorsResponse.
 * Use `create(ListLoginPolicySecondFactorsResponseSchema)` to create a new message.
 */
export const ListLoginPolicySecondFactorsResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 317);

/**
 * Describes the message zitadel.management.v1.AddSecondFactorToLoginPolicyRequest.
 * Use `create(AddSecondFactorToLoginPolicyRequestSchema)` to create a new message.
 */
export const AddSecondFactorToLoginPolicyRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 318);

/**
 * Describes the message zitadel.management.v1.AddSecondFactorToLoginPolicyResponse.
 * Use `create(AddSecondFactorToLoginPolicyResponseSchema)` to create a new message.
 */
export const AddSecondFactorToLoginPolicyResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 319);

/**
 * Describes the message zitadel.management.v1.RemoveSecondFactorFromLoginPolicyRequest.
 * Use `create(RemoveSecondFactorFromLoginPolicyRequestSchema)` to create a new message.
 */
export const RemoveSecondFactorFromLoginPolicyRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 320);

/**
 * Describes the message zitadel.management.v1.RemoveSecondFactorFromLoginPolicyResponse.
 * Use `create(RemoveSecondFactorFromLoginPolicyResponseSchema)` to create a new message.
 */
export const RemoveSecondFactorFromLoginPolicyResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 321);

/**
 * Describes the message zitadel.management.v1.ListLoginPolicyMultiFactorsRequest.
 * Use `create(ListLoginPolicyMultiFactorsRequestSchema)` to create a new message.
 */
export const ListLoginPolicyMultiFactorsRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 322);

/**
 * Describes the message zitadel.management.v1.ListLoginPolicyMultiFactorsResponse.
 * Use `create(ListLoginPolicyMultiFactorsResponseSchema)` to create a new message.
 */
export const ListLoginPolicyMultiFactorsResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 323);

/**
 * Describes the message zitadel.management.v1.AddMultiFactorToLoginPolicyRequest.
 * Use `create(AddMultiFactorToLoginPolicyRequestSchema)` to create a new message.
 */
export const AddMultiFactorToLoginPolicyRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 324);

/**
 * Describes the message zitadel.management.v1.AddMultiFactorToLoginPolicyResponse.
 * Use `create(AddMultiFactorToLoginPolicyResponseSchema)` to create a new message.
 */
export const AddMultiFactorToLoginPolicyResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 325);

/**
 * Describes the message zitadel.management.v1.RemoveMultiFactorFromLoginPolicyRequest.
 * Use `create(RemoveMultiFactorFromLoginPolicyRequestSchema)` to create a new message.
 */
export const RemoveMultiFactorFromLoginPolicyRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 326);

/**
 * Describes the message zitadel.management.v1.RemoveMultiFactorFromLoginPolicyResponse.
 * Use `create(RemoveMultiFactorFromLoginPolicyResponseSchema)` to create a new message.
 */
export const RemoveMultiFactorFromLoginPolicyResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 327);

/**
 * Describes the message zitadel.management.v1.GetPasswordComplexityPolicyRequest.
 * Use `create(GetPasswordComplexityPolicyRequestSchema)` to create a new message.
 */
export const GetPasswordComplexityPolicyRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 328);

/**
 * Describes the message zitadel.management.v1.GetPasswordComplexityPolicyResponse.
 * Use `create(GetPasswordComplexityPolicyResponseSchema)` to create a new message.
 */
export const GetPasswordComplexityPolicyResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 329);

/**
 * Describes the message zitadel.management.v1.GetDefaultPasswordComplexityPolicyRequest.
 * Use `create(GetDefaultPasswordComplexityPolicyRequestSchema)` to create a new message.
 */
export const GetDefaultPasswordComplexityPolicyRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 330);

/**
 * Describes the message zitadel.management.v1.GetDefaultPasswordComplexityPolicyResponse.
 * Use `create(GetDefaultPasswordComplexityPolicyResponseSchema)` to create a new message.
 */
export const GetDefaultPasswordComplexityPolicyResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 331);

/**
 * Describes the message zitadel.management.v1.AddCustomPasswordComplexityPolicyRequest.
 * Use `create(AddCustomPasswordComplexityPolicyRequestSchema)` to create a new message.
 */
export const AddCustomPasswordComplexityPolicyRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 332);

/**
 * Describes the message zitadel.management.v1.AddCustomPasswordComplexityPolicyResponse.
 * Use `create(AddCustomPasswordComplexityPolicyResponseSchema)` to create a new message.
 */
export const AddCustomPasswordComplexityPolicyResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 333);

/**
 * Describes the message zitadel.management.v1.UpdateCustomPasswordComplexityPolicyRequest.
 * Use `create(UpdateCustomPasswordComplexityPolicyRequestSchema)` to create a new message.
 */
export const UpdateCustomPasswordComplexityPolicyRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 334);

/**
 * Describes the message zitadel.management.v1.UpdateCustomPasswordComplexityPolicyResponse.
 * Use `create(UpdateCustomPasswordComplexityPolicyResponseSchema)` to create a new message.
 */
export const UpdateCustomPasswordComplexityPolicyResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 335);

/**
 * Describes the message zitadel.management.v1.ResetPasswordComplexityPolicyToDefaultRequest.
 * Use `create(ResetPasswordComplexityPolicyToDefaultRequestSchema)` to create a new message.
 */
export const ResetPasswordComplexityPolicyToDefaultRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 336);

/**
 * Describes the message zitadel.management.v1.ResetPasswordComplexityPolicyToDefaultResponse.
 * Use `create(ResetPasswordComplexityPolicyToDefaultResponseSchema)` to create a new message.
 */
export const ResetPasswordComplexityPolicyToDefaultResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 337);

/**
 * Describes the message zitadel.management.v1.GetPasswordAgePolicyRequest.
 * Use `create(GetPasswordAgePolicyRequestSchema)` to create a new message.
 */
export const GetPasswordAgePolicyRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 338);

/**
 * Describes the message zitadel.management.v1.GetPasswordAgePolicyResponse.
 * Use `create(GetPasswordAgePolicyResponseSchema)` to create a new message.
 */
export const GetPasswordAgePolicyResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 339);

/**
 * Describes the message zitadel.management.v1.GetDefaultPasswordAgePolicyRequest.
 * Use `create(GetDefaultPasswordAgePolicyRequestSchema)` to create a new message.
 */
export const GetDefaultPasswordAgePolicyRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 340);

/**
 * Describes the message zitadel.management.v1.GetDefaultPasswordAgePolicyResponse.
 * Use `create(GetDefaultPasswordAgePolicyResponseSchema)` to create a new message.
 */
export const GetDefaultPasswordAgePolicyResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 341);

/**
 * Describes the message zitadel.management.v1.AddCustomPasswordAgePolicyRequest.
 * Use `create(AddCustomPasswordAgePolicyRequestSchema)` to create a new message.
 */
export const AddCustomPasswordAgePolicyRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 342);

/**
 * Describes the message zitadel.management.v1.AddCustomPasswordAgePolicyResponse.
 * Use `create(AddCustomPasswordAgePolicyResponseSchema)` to create a new message.
 */
export const AddCustomPasswordAgePolicyResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 343);

/**
 * Describes the message zitadel.management.v1.UpdateCustomPasswordAgePolicyRequest.
 * Use `create(UpdateCustomPasswordAgePolicyRequestSchema)` to create a new message.
 */
export const UpdateCustomPasswordAgePolicyRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 344);

/**
 * Describes the message zitadel.management.v1.UpdateCustomPasswordAgePolicyResponse.
 * Use `create(UpdateCustomPasswordAgePolicyResponseSchema)` to create a new message.
 */
export const UpdateCustomPasswordAgePolicyResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 345);

/**
 * Describes the message zitadel.management.v1.ResetPasswordAgePolicyToDefaultRequest.
 * Use `create(ResetPasswordAgePolicyToDefaultRequestSchema)` to create a new message.
 */
export const ResetPasswordAgePolicyToDefaultRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 346);

/**
 * Describes the message zitadel.management.v1.ResetPasswordAgePolicyToDefaultResponse.
 * Use `create(ResetPasswordAgePolicyToDefaultResponseSchema)` to create a new message.
 */
export const ResetPasswordAgePolicyToDefaultResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 347);

/**
 * Describes the message zitadel.management.v1.GetLockoutPolicyRequest.
 * Use `create(GetLockoutPolicyRequestSchema)` to create a new message.
 */
export const GetLockoutPolicyRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 348);

/**
 * Describes the message zitadel.management.v1.GetLockoutPolicyResponse.
 * Use `create(GetLockoutPolicyResponseSchema)` to create a new message.
 */
export const GetLockoutPolicyResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 349);

/**
 * Describes the message zitadel.management.v1.GetDefaultLockoutPolicyRequest.
 * Use `create(GetDefaultLockoutPolicyRequestSchema)` to create a new message.
 */
export const GetDefaultLockoutPolicyRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 350);

/**
 * Describes the message zitadel.management.v1.GetDefaultLockoutPolicyResponse.
 * Use `create(GetDefaultLockoutPolicyResponseSchema)` to create a new message.
 */
export const GetDefaultLockoutPolicyResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 351);

/**
 * Describes the message zitadel.management.v1.AddCustomLockoutPolicyRequest.
 * Use `create(AddCustomLockoutPolicyRequestSchema)` to create a new message.
 */
export const AddCustomLockoutPolicyRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 352);

/**
 * Describes the message zitadel.management.v1.AddCustomLockoutPolicyResponse.
 * Use `create(AddCustomLockoutPolicyResponseSchema)` to create a new message.
 */
export const AddCustomLockoutPolicyResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 353);

/**
 * Describes the message zitadel.management.v1.UpdateCustomLockoutPolicyRequest.
 * Use `create(UpdateCustomLockoutPolicyRequestSchema)` to create a new message.
 */
export const UpdateCustomLockoutPolicyRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 354);

/**
 * Describes the message zitadel.management.v1.UpdateCustomLockoutPolicyResponse.
 * Use `create(UpdateCustomLockoutPolicyResponseSchema)` to create a new message.
 */
export const UpdateCustomLockoutPolicyResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 355);

/**
 * Describes the message zitadel.management.v1.ResetLockoutPolicyToDefaultRequest.
 * Use `create(ResetLockoutPolicyToDefaultRequestSchema)` to create a new message.
 */
export const ResetLockoutPolicyToDefaultRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 356);

/**
 * Describes the message zitadel.management.v1.ResetLockoutPolicyToDefaultResponse.
 * Use `create(ResetLockoutPolicyToDefaultResponseSchema)` to create a new message.
 */
export const ResetLockoutPolicyToDefaultResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 357);

/**
 * Describes the message zitadel.management.v1.GetPrivacyPolicyRequest.
 * Use `create(GetPrivacyPolicyRequestSchema)` to create a new message.
 */
export const GetPrivacyPolicyRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 358);

/**
 * Describes the message zitadel.management.v1.GetPrivacyPolicyResponse.
 * Use `create(GetPrivacyPolicyResponseSchema)` to create a new message.
 */
export const GetPrivacyPolicyResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 359);

/**
 * Describes the message zitadel.management.v1.GetDefaultPrivacyPolicyRequest.
 * Use `create(GetDefaultPrivacyPolicyRequestSchema)` to create a new message.
 */
export const GetDefaultPrivacyPolicyRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 360);

/**
 * Describes the message zitadel.management.v1.GetDefaultPrivacyPolicyResponse.
 * Use `create(GetDefaultPrivacyPolicyResponseSchema)` to create a new message.
 */
export const GetDefaultPrivacyPolicyResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 361);

/**
 * Describes the message zitadel.management.v1.AddCustomPrivacyPolicyRequest.
 * Use `create(AddCustomPrivacyPolicyRequestSchema)` to create a new message.
 */
export const AddCustomPrivacyPolicyRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 362);

/**
 * Describes the message zitadel.management.v1.AddCustomPrivacyPolicyResponse.
 * Use `create(AddCustomPrivacyPolicyResponseSchema)` to create a new message.
 */
export const AddCustomPrivacyPolicyResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 363);

/**
 * Describes the message zitadel.management.v1.UpdateCustomPrivacyPolicyRequest.
 * Use `create(UpdateCustomPrivacyPolicyRequestSchema)` to create a new message.
 */
export const UpdateCustomPrivacyPolicyRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 364);

/**
 * Describes the message zitadel.management.v1.UpdateCustomPrivacyPolicyResponse.
 * Use `create(UpdateCustomPrivacyPolicyResponseSchema)` to create a new message.
 */
export const UpdateCustomPrivacyPolicyResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 365);

/**
 * Describes the message zitadel.management.v1.ResetPrivacyPolicyToDefaultRequest.
 * Use `create(ResetPrivacyPolicyToDefaultRequestSchema)` to create a new message.
 */
export const ResetPrivacyPolicyToDefaultRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 366);

/**
 * Describes the message zitadel.management.v1.ResetPrivacyPolicyToDefaultResponse.
 * Use `create(ResetPrivacyPolicyToDefaultResponseSchema)` to create a new message.
 */
export const ResetPrivacyPolicyToDefaultResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 367);

/**
 * Describes the message zitadel.management.v1.GetNotificationPolicyRequest.
 * Use `create(GetNotificationPolicyRequestSchema)` to create a new message.
 */
export const GetNotificationPolicyRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 368);

/**
 * Describes the message zitadel.management.v1.GetNotificationPolicyResponse.
 * Use `create(GetNotificationPolicyResponseSchema)` to create a new message.
 */
export const GetNotificationPolicyResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 369);

/**
 * Describes the message zitadel.management.v1.GetDefaultNotificationPolicyRequest.
 * Use `create(GetDefaultNotificationPolicyRequestSchema)` to create a new message.
 */
export const GetDefaultNotificationPolicyRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 370);

/**
 * Describes the message zitadel.management.v1.GetDefaultNotificationPolicyResponse.
 * Use `create(GetDefaultNotificationPolicyResponseSchema)` to create a new message.
 */
export const GetDefaultNotificationPolicyResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 371);

/**
 * Describes the message zitadel.management.v1.AddCustomNotificationPolicyRequest.
 * Use `create(AddCustomNotificationPolicyRequestSchema)` to create a new message.
 */
export const AddCustomNotificationPolicyRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 372);

/**
 * Describes the message zitadel.management.v1.AddCustomNotificationPolicyResponse.
 * Use `create(AddCustomNotificationPolicyResponseSchema)` to create a new message.
 */
export const AddCustomNotificationPolicyResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 373);

/**
 * Describes the message zitadel.management.v1.UpdateCustomNotificationPolicyRequest.
 * Use `create(UpdateCustomNotificationPolicyRequestSchema)` to create a new message.
 */
export const UpdateCustomNotificationPolicyRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 374);

/**
 * Describes the message zitadel.management.v1.UpdateCustomNotificationPolicyResponse.
 * Use `create(UpdateCustomNotificationPolicyResponseSchema)` to create a new message.
 */
export const UpdateCustomNotificationPolicyResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 375);

/**
 * Describes the message zitadel.management.v1.ResetNotificationPolicyToDefaultRequest.
 * Use `create(ResetNotificationPolicyToDefaultRequestSchema)` to create a new message.
 */
export const ResetNotificationPolicyToDefaultRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 376);

/**
 * Describes the message zitadel.management.v1.ResetNotificationPolicyToDefaultResponse.
 * Use `create(ResetNotificationPolicyToDefaultResponseSchema)` to create a new message.
 */
export const ResetNotificationPolicyToDefaultResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 377);

/**
 * Describes the message zitadel.management.v1.GetLabelPolicyRequest.
 * Use `create(GetLabelPolicyRequestSchema)` to create a new message.
 */
export const GetLabelPolicyRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 378);

/**
 * Describes the message zitadel.management.v1.GetLabelPolicyResponse.
 * Use `create(GetLabelPolicyResponseSchema)` to create a new message.
 */
export const GetLabelPolicyResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 379);

/**
 * Describes the message zitadel.management.v1.GetPreviewLabelPolicyRequest.
 * Use `create(GetPreviewLabelPolicyRequestSchema)` to create a new message.
 */
export const GetPreviewLabelPolicyRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 380);

/**
 * Describes the message zitadel.management.v1.GetPreviewLabelPolicyResponse.
 * Use `create(GetPreviewLabelPolicyResponseSchema)` to create a new message.
 */
export const GetPreviewLabelPolicyResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 381);

/**
 * Describes the message zitadel.management.v1.GetDefaultLabelPolicyRequest.
 * Use `create(GetDefaultLabelPolicyRequestSchema)` to create a new message.
 */
export const GetDefaultLabelPolicyRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 382);

/**
 * Describes the message zitadel.management.v1.GetDefaultLabelPolicyResponse.
 * Use `create(GetDefaultLabelPolicyResponseSchema)` to create a new message.
 */
export const GetDefaultLabelPolicyResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 383);

/**
 * Describes the message zitadel.management.v1.AddCustomLabelPolicyRequest.
 * Use `create(AddCustomLabelPolicyRequestSchema)` to create a new message.
 */
export const AddCustomLabelPolicyRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 384);

/**
 * Describes the message zitadel.management.v1.AddCustomLabelPolicyResponse.
 * Use `create(AddCustomLabelPolicyResponseSchema)` to create a new message.
 */
export const AddCustomLabelPolicyResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 385);

/**
 * Describes the message zitadel.management.v1.UpdateCustomLabelPolicyRequest.
 * Use `create(UpdateCustomLabelPolicyRequestSchema)` to create a new message.
 */
export const UpdateCustomLabelPolicyRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 386);

/**
 * Describes the message zitadel.management.v1.UpdateCustomLabelPolicyResponse.
 * Use `create(UpdateCustomLabelPolicyResponseSchema)` to create a new message.
 */
export const UpdateCustomLabelPolicyResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 387);

/**
 * Describes the message zitadel.management.v1.ActivateCustomLabelPolicyRequest.
 * Use `create(ActivateCustomLabelPolicyRequestSchema)` to create a new message.
 */
export const ActivateCustomLabelPolicyRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 388);

/**
 * Describes the message zitadel.management.v1.ActivateCustomLabelPolicyResponse.
 * Use `create(ActivateCustomLabelPolicyResponseSchema)` to create a new message.
 */
export const ActivateCustomLabelPolicyResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 389);

/**
 * Describes the message zitadel.management.v1.RemoveCustomLabelPolicyLogoRequest.
 * Use `create(RemoveCustomLabelPolicyLogoRequestSchema)` to create a new message.
 */
export const RemoveCustomLabelPolicyLogoRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 390);

/**
 * Describes the message zitadel.management.v1.RemoveCustomLabelPolicyLogoResponse.
 * Use `create(RemoveCustomLabelPolicyLogoResponseSchema)` to create a new message.
 */
export const RemoveCustomLabelPolicyLogoResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 391);

/**
 * Describes the message zitadel.management.v1.RemoveCustomLabelPolicyLogoDarkRequest.
 * Use `create(RemoveCustomLabelPolicyLogoDarkRequestSchema)` to create a new message.
 */
export const RemoveCustomLabelPolicyLogoDarkRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 392);

/**
 * Describes the message zitadel.management.v1.RemoveCustomLabelPolicyLogoDarkResponse.
 * Use `create(RemoveCustomLabelPolicyLogoDarkResponseSchema)` to create a new message.
 */
export const RemoveCustomLabelPolicyLogoDarkResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 393);

/**
 * Describes the message zitadel.management.v1.RemoveCustomLabelPolicyIconRequest.
 * Use `create(RemoveCustomLabelPolicyIconRequestSchema)` to create a new message.
 */
export const RemoveCustomLabelPolicyIconRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 394);

/**
 * Describes the message zitadel.management.v1.RemoveCustomLabelPolicyIconResponse.
 * Use `create(RemoveCustomLabelPolicyIconResponseSchema)` to create a new message.
 */
export const RemoveCustomLabelPolicyIconResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 395);

/**
 * Describes the message zitadel.management.v1.RemoveCustomLabelPolicyIconDarkRequest.
 * Use `create(RemoveCustomLabelPolicyIconDarkRequestSchema)` to create a new message.
 */
export const RemoveCustomLabelPolicyIconDarkRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 396);

/**
 * Describes the message zitadel.management.v1.RemoveCustomLabelPolicyIconDarkResponse.
 * Use `create(RemoveCustomLabelPolicyIconDarkResponseSchema)` to create a new message.
 */
export const RemoveCustomLabelPolicyIconDarkResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 397);

/**
 * Describes the message zitadel.management.v1.RemoveCustomLabelPolicyFontRequest.
 * Use `create(RemoveCustomLabelPolicyFontRequestSchema)` to create a new message.
 */
export const RemoveCustomLabelPolicyFontRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 398);

/**
 * Describes the message zitadel.management.v1.RemoveCustomLabelPolicyFontResponse.
 * Use `create(RemoveCustomLabelPolicyFontResponseSchema)` to create a new message.
 */
export const RemoveCustomLabelPolicyFontResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 399);

/**
 * Describes the message zitadel.management.v1.ResetLabelPolicyToDefaultRequest.
 * Use `create(ResetLabelPolicyToDefaultRequestSchema)` to create a new message.
 */
export const ResetLabelPolicyToDefaultRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 400);

/**
 * Describes the message zitadel.management.v1.ResetLabelPolicyToDefaultResponse.
 * Use `create(ResetLabelPolicyToDefaultResponseSchema)` to create a new message.
 */
export const ResetLabelPolicyToDefaultResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 401);

/**
 * Describes the message zitadel.management.v1.GetCustomInitMessageTextRequest.
 * Use `create(GetCustomInitMessageTextRequestSchema)` to create a new message.
 */
export const GetCustomInitMessageTextRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 402);

/**
 * Describes the message zitadel.management.v1.GetCustomInitMessageTextResponse.
 * Use `create(GetCustomInitMessageTextResponseSchema)` to create a new message.
 */
export const GetCustomInitMessageTextResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 403);

/**
 * Describes the message zitadel.management.v1.GetDefaultInitMessageTextRequest.
 * Use `create(GetDefaultInitMessageTextRequestSchema)` to create a new message.
 */
export const GetDefaultInitMessageTextRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 404);

/**
 * Describes the message zitadel.management.v1.GetDefaultInitMessageTextResponse.
 * Use `create(GetDefaultInitMessageTextResponseSchema)` to create a new message.
 */
export const GetDefaultInitMessageTextResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 405);

/**
 * Describes the message zitadel.management.v1.SetCustomInitMessageTextRequest.
 * Use `create(SetCustomInitMessageTextRequestSchema)` to create a new message.
 */
export const SetCustomInitMessageTextRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 406);

/**
 * Describes the message zitadel.management.v1.SetCustomInitMessageTextResponse.
 * Use `create(SetCustomInitMessageTextResponseSchema)` to create a new message.
 */
export const SetCustomInitMessageTextResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 407);

/**
 * Describes the message zitadel.management.v1.ResetCustomInitMessageTextToDefaultRequest.
 * Use `create(ResetCustomInitMessageTextToDefaultRequestSchema)` to create a new message.
 */
export const ResetCustomInitMessageTextToDefaultRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 408);

/**
 * Describes the message zitadel.management.v1.ResetCustomInitMessageTextToDefaultResponse.
 * Use `create(ResetCustomInitMessageTextToDefaultResponseSchema)` to create a new message.
 */
export const ResetCustomInitMessageTextToDefaultResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 409);

/**
 * Describes the message zitadel.management.v1.GetDefaultLoginTextsRequest.
 * Use `create(GetDefaultLoginTextsRequestSchema)` to create a new message.
 */
export const GetDefaultLoginTextsRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 410);

/**
 * Describes the message zitadel.management.v1.GetDefaultLoginTextsResponse.
 * Use `create(GetDefaultLoginTextsResponseSchema)` to create a new message.
 */
export const GetDefaultLoginTextsResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 411);

/**
 * Describes the message zitadel.management.v1.GetCustomLoginTextsRequest.
 * Use `create(GetCustomLoginTextsRequestSchema)` to create a new message.
 */
export const GetCustomLoginTextsRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 412);

/**
 * Describes the message zitadel.management.v1.GetCustomLoginTextsResponse.
 * Use `create(GetCustomLoginTextsResponseSchema)` to create a new message.
 */
export const GetCustomLoginTextsResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 413);

/**
 * Describes the message zitadel.management.v1.SetCustomLoginTextsRequest.
 * Use `create(SetCustomLoginTextsRequestSchema)` to create a new message.
 */
export const SetCustomLoginTextsRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 414);

/**
 * Describes the message zitadel.management.v1.SetCustomLoginTextsResponse.
 * Use `create(SetCustomLoginTextsResponseSchema)` to create a new message.
 */
export const SetCustomLoginTextsResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 415);

/**
 * Describes the message zitadel.management.v1.ResetCustomLoginTextsToDefaultRequest.
 * Use `create(ResetCustomLoginTextsToDefaultRequestSchema)` to create a new message.
 */
export const ResetCustomLoginTextsToDefaultRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 416);

/**
 * Describes the message zitadel.management.v1.ResetCustomLoginTextsToDefaultResponse.
 * Use `create(ResetCustomLoginTextsToDefaultResponseSchema)` to create a new message.
 */
export const ResetCustomLoginTextsToDefaultResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 417);

/**
 * Describes the message zitadel.management.v1.GetCustomPasswordResetMessageTextRequest.
 * Use `create(GetCustomPasswordResetMessageTextRequestSchema)` to create a new message.
 */
export const GetCustomPasswordResetMessageTextRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 418);

/**
 * Describes the message zitadel.management.v1.GetCustomPasswordResetMessageTextResponse.
 * Use `create(GetCustomPasswordResetMessageTextResponseSchema)` to create a new message.
 */
export const GetCustomPasswordResetMessageTextResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 419);

/**
 * Describes the message zitadel.management.v1.GetDefaultPasswordResetMessageTextRequest.
 * Use `create(GetDefaultPasswordResetMessageTextRequestSchema)` to create a new message.
 */
export const GetDefaultPasswordResetMessageTextRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 420);

/**
 * Describes the message zitadel.management.v1.GetDefaultPasswordResetMessageTextResponse.
 * Use `create(GetDefaultPasswordResetMessageTextResponseSchema)` to create a new message.
 */
export const GetDefaultPasswordResetMessageTextResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 421);

/**
 * Describes the message zitadel.management.v1.SetCustomPasswordResetMessageTextRequest.
 * Use `create(SetCustomPasswordResetMessageTextRequestSchema)` to create a new message.
 */
export const SetCustomPasswordResetMessageTextRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 422);

/**
 * Describes the message zitadel.management.v1.SetCustomPasswordResetMessageTextResponse.
 * Use `create(SetCustomPasswordResetMessageTextResponseSchema)` to create a new message.
 */
export const SetCustomPasswordResetMessageTextResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 423);

/**
 * Describes the message zitadel.management.v1.ResetCustomPasswordResetMessageTextToDefaultRequest.
 * Use `create(ResetCustomPasswordResetMessageTextToDefaultRequestSchema)` to create a new message.
 */
export const ResetCustomPasswordResetMessageTextToDefaultRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 424);

/**
 * Describes the message zitadel.management.v1.ResetCustomPasswordResetMessageTextToDefaultResponse.
 * Use `create(ResetCustomPasswordResetMessageTextToDefaultResponseSchema)` to create a new message.
 */
export const ResetCustomPasswordResetMessageTextToDefaultResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 425);

/**
 * Describes the message zitadel.management.v1.GetCustomVerifyEmailMessageTextRequest.
 * Use `create(GetCustomVerifyEmailMessageTextRequestSchema)` to create a new message.
 */
export const GetCustomVerifyEmailMessageTextRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 426);

/**
 * Describes the message zitadel.management.v1.GetCustomVerifyEmailMessageTextResponse.
 * Use `create(GetCustomVerifyEmailMessageTextResponseSchema)` to create a new message.
 */
export const GetCustomVerifyEmailMessageTextResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 427);

/**
 * Describes the message zitadel.management.v1.GetDefaultVerifyEmailMessageTextRequest.
 * Use `create(GetDefaultVerifyEmailMessageTextRequestSchema)` to create a new message.
 */
export const GetDefaultVerifyEmailMessageTextRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 428);

/**
 * Describes the message zitadel.management.v1.GetDefaultVerifyEmailMessageTextResponse.
 * Use `create(GetDefaultVerifyEmailMessageTextResponseSchema)` to create a new message.
 */
export const GetDefaultVerifyEmailMessageTextResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 429);

/**
 * Describes the message zitadel.management.v1.SetCustomVerifyEmailMessageTextRequest.
 * Use `create(SetCustomVerifyEmailMessageTextRequestSchema)` to create a new message.
 */
export const SetCustomVerifyEmailMessageTextRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 430);

/**
 * Describes the message zitadel.management.v1.SetCustomVerifyEmailMessageTextResponse.
 * Use `create(SetCustomVerifyEmailMessageTextResponseSchema)` to create a new message.
 */
export const SetCustomVerifyEmailMessageTextResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 431);

/**
 * Describes the message zitadel.management.v1.ResetCustomVerifyEmailMessageTextToDefaultRequest.
 * Use `create(ResetCustomVerifyEmailMessageTextToDefaultRequestSchema)` to create a new message.
 */
export const ResetCustomVerifyEmailMessageTextToDefaultRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 432);

/**
 * Describes the message zitadel.management.v1.ResetCustomVerifyEmailMessageTextToDefaultResponse.
 * Use `create(ResetCustomVerifyEmailMessageTextToDefaultResponseSchema)` to create a new message.
 */
export const ResetCustomVerifyEmailMessageTextToDefaultResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 433);

/**
 * Describes the message zitadel.management.v1.GetCustomVerifyPhoneMessageTextRequest.
 * Use `create(GetCustomVerifyPhoneMessageTextRequestSchema)` to create a new message.
 */
export const GetCustomVerifyPhoneMessageTextRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 434);

/**
 * Describes the message zitadel.management.v1.GetCustomVerifyPhoneMessageTextResponse.
 * Use `create(GetCustomVerifyPhoneMessageTextResponseSchema)` to create a new message.
 */
export const GetCustomVerifyPhoneMessageTextResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 435);

/**
 * Describes the message zitadel.management.v1.GetDefaultVerifyPhoneMessageTextRequest.
 * Use `create(GetDefaultVerifyPhoneMessageTextRequestSchema)` to create a new message.
 */
export const GetDefaultVerifyPhoneMessageTextRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 436);

/**
 * Describes the message zitadel.management.v1.GetDefaultVerifyPhoneMessageTextResponse.
 * Use `create(GetDefaultVerifyPhoneMessageTextResponseSchema)` to create a new message.
 */
export const GetDefaultVerifyPhoneMessageTextResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 437);

/**
 * Describes the message zitadel.management.v1.SetCustomVerifyPhoneMessageTextRequest.
 * Use `create(SetCustomVerifyPhoneMessageTextRequestSchema)` to create a new message.
 */
export const SetCustomVerifyPhoneMessageTextRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 438);

/**
 * Describes the message zitadel.management.v1.SetCustomVerifyPhoneMessageTextResponse.
 * Use `create(SetCustomVerifyPhoneMessageTextResponseSchema)` to create a new message.
 */
export const SetCustomVerifyPhoneMessageTextResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 439);

/**
 * Describes the message zitadel.management.v1.ResetCustomVerifyPhoneMessageTextToDefaultRequest.
 * Use `create(ResetCustomVerifyPhoneMessageTextToDefaultRequestSchema)` to create a new message.
 */
export const ResetCustomVerifyPhoneMessageTextToDefaultRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 440);

/**
 * Describes the message zitadel.management.v1.ResetCustomVerifyPhoneMessageTextToDefaultResponse.
 * Use `create(ResetCustomVerifyPhoneMessageTextToDefaultResponseSchema)` to create a new message.
 */
export const ResetCustomVerifyPhoneMessageTextToDefaultResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 441);

/**
 * Describes the message zitadel.management.v1.GetCustomVerifySMSOTPMessageTextRequest.
 * Use `create(GetCustomVerifySMSOTPMessageTextRequestSchema)` to create a new message.
 */
export const GetCustomVerifySMSOTPMessageTextRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 442);

/**
 * Describes the message zitadel.management.v1.GetCustomVerifySMSOTPMessageTextResponse.
 * Use `create(GetCustomVerifySMSOTPMessageTextResponseSchema)` to create a new message.
 */
export const GetCustomVerifySMSOTPMessageTextResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 443);

/**
 * Describes the message zitadel.management.v1.GetDefaultVerifySMSOTPMessageTextRequest.
 * Use `create(GetDefaultVerifySMSOTPMessageTextRequestSchema)` to create a new message.
 */
export const GetDefaultVerifySMSOTPMessageTextRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 444);

/**
 * Describes the message zitadel.management.v1.GetDefaultVerifySMSOTPMessageTextResponse.
 * Use `create(GetDefaultVerifySMSOTPMessageTextResponseSchema)` to create a new message.
 */
export const GetDefaultVerifySMSOTPMessageTextResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 445);

/**
 * Describes the message zitadel.management.v1.SetCustomVerifySMSOTPMessageTextRequest.
 * Use `create(SetCustomVerifySMSOTPMessageTextRequestSchema)` to create a new message.
 */
export const SetCustomVerifySMSOTPMessageTextRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 446);

/**
 * Describes the message zitadel.management.v1.SetCustomVerifySMSOTPMessageTextResponse.
 * Use `create(SetCustomVerifySMSOTPMessageTextResponseSchema)` to create a new message.
 */
export const SetCustomVerifySMSOTPMessageTextResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 447);

/**
 * Describes the message zitadel.management.v1.ResetCustomVerifySMSOTPMessageTextToDefaultRequest.
 * Use `create(ResetCustomVerifySMSOTPMessageTextToDefaultRequestSchema)` to create a new message.
 */
export const ResetCustomVerifySMSOTPMessageTextToDefaultRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 448);

/**
 * Describes the message zitadel.management.v1.ResetCustomVerifySMSOTPMessageTextToDefaultResponse.
 * Use `create(ResetCustomVerifySMSOTPMessageTextToDefaultResponseSchema)` to create a new message.
 */
export const ResetCustomVerifySMSOTPMessageTextToDefaultResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 449);

/**
 * Describes the message zitadel.management.v1.GetCustomVerifyEmailOTPMessageTextRequest.
 * Use `create(GetCustomVerifyEmailOTPMessageTextRequestSchema)` to create a new message.
 */
export const GetCustomVerifyEmailOTPMessageTextRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 450);

/**
 * Describes the message zitadel.management.v1.GetCustomVerifyEmailOTPMessageTextResponse.
 * Use `create(GetCustomVerifyEmailOTPMessageTextResponseSchema)` to create a new message.
 */
export const GetCustomVerifyEmailOTPMessageTextResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 451);

/**
 * Describes the message zitadel.management.v1.GetDefaultVerifyEmailOTPMessageTextRequest.
 * Use `create(GetDefaultVerifyEmailOTPMessageTextRequestSchema)` to create a new message.
 */
export const GetDefaultVerifyEmailOTPMessageTextRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 452);

/**
 * Describes the message zitadel.management.v1.GetDefaultVerifyEmailOTPMessageTextResponse.
 * Use `create(GetDefaultVerifyEmailOTPMessageTextResponseSchema)` to create a new message.
 */
export const GetDefaultVerifyEmailOTPMessageTextResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 453);

/**
 * Describes the message zitadel.management.v1.SetCustomVerifyEmailOTPMessageTextRequest.
 * Use `create(SetCustomVerifyEmailOTPMessageTextRequestSchema)` to create a new message.
 */
export const SetCustomVerifyEmailOTPMessageTextRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 454);

/**
 * Describes the message zitadel.management.v1.SetCustomVerifyEmailOTPMessageTextResponse.
 * Use `create(SetCustomVerifyEmailOTPMessageTextResponseSchema)` to create a new message.
 */
export const SetCustomVerifyEmailOTPMessageTextResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 455);

/**
 * Describes the message zitadel.management.v1.ResetCustomVerifyEmailOTPMessageTextToDefaultRequest.
 * Use `create(ResetCustomVerifyEmailOTPMessageTextToDefaultRequestSchema)` to create a new message.
 */
export const ResetCustomVerifyEmailOTPMessageTextToDefaultRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 456);

/**
 * Describes the message zitadel.management.v1.ResetCustomVerifyEmailOTPMessageTextToDefaultResponse.
 * Use `create(ResetCustomVerifyEmailOTPMessageTextToDefaultResponseSchema)` to create a new message.
 */
export const ResetCustomVerifyEmailOTPMessageTextToDefaultResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 457);

/**
 * Describes the message zitadel.management.v1.GetCustomDomainClaimedMessageTextRequest.
 * Use `create(GetCustomDomainClaimedMessageTextRequestSchema)` to create a new message.
 */
export const GetCustomDomainClaimedMessageTextRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 458);

/**
 * Describes the message zitadel.management.v1.GetCustomDomainClaimedMessageTextResponse.
 * Use `create(GetCustomDomainClaimedMessageTextResponseSchema)` to create a new message.
 */
export const GetCustomDomainClaimedMessageTextResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 459);

/**
 * Describes the message zitadel.management.v1.GetDefaultDomainClaimedMessageTextRequest.
 * Use `create(GetDefaultDomainClaimedMessageTextRequestSchema)` to create a new message.
 */
export const GetDefaultDomainClaimedMessageTextRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 460);

/**
 * Describes the message zitadel.management.v1.GetDefaultDomainClaimedMessageTextResponse.
 * Use `create(GetDefaultDomainClaimedMessageTextResponseSchema)` to create a new message.
 */
export const GetDefaultDomainClaimedMessageTextResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 461);

/**
 * Describes the message zitadel.management.v1.SetCustomDomainClaimedMessageTextRequest.
 * Use `create(SetCustomDomainClaimedMessageTextRequestSchema)` to create a new message.
 */
export const SetCustomDomainClaimedMessageTextRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 462);

/**
 * Describes the message zitadel.management.v1.SetCustomDomainClaimedMessageTextResponse.
 * Use `create(SetCustomDomainClaimedMessageTextResponseSchema)` to create a new message.
 */
export const SetCustomDomainClaimedMessageTextResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 463);

/**
 * Describes the message zitadel.management.v1.ResetCustomDomainClaimedMessageTextToDefaultRequest.
 * Use `create(ResetCustomDomainClaimedMessageTextToDefaultRequestSchema)` to create a new message.
 */
export const ResetCustomDomainClaimedMessageTextToDefaultRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 464);

/**
 * Describes the message zitadel.management.v1.ResetCustomDomainClaimedMessageTextToDefaultResponse.
 * Use `create(ResetCustomDomainClaimedMessageTextToDefaultResponseSchema)` to create a new message.
 */
export const ResetCustomDomainClaimedMessageTextToDefaultResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 465);

/**
 * Describes the message zitadel.management.v1.GetCustomPasswordlessRegistrationMessageTextRequest.
 * Use `create(GetCustomPasswordlessRegistrationMessageTextRequestSchema)` to create a new message.
 */
export const GetCustomPasswordlessRegistrationMessageTextRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 466);

/**
 * Describes the message zitadel.management.v1.GetCustomPasswordlessRegistrationMessageTextResponse.
 * Use `create(GetCustomPasswordlessRegistrationMessageTextResponseSchema)` to create a new message.
 */
export const GetCustomPasswordlessRegistrationMessageTextResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 467);

/**
 * Describes the message zitadel.management.v1.GetDefaultPasswordlessRegistrationMessageTextRequest.
 * Use `create(GetDefaultPasswordlessRegistrationMessageTextRequestSchema)` to create a new message.
 */
export const GetDefaultPasswordlessRegistrationMessageTextRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 468);

/**
 * Describes the message zitadel.management.v1.GetDefaultPasswordlessRegistrationMessageTextResponse.
 * Use `create(GetDefaultPasswordlessRegistrationMessageTextResponseSchema)` to create a new message.
 */
export const GetDefaultPasswordlessRegistrationMessageTextResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 469);

/**
 * Describes the message zitadel.management.v1.SetCustomPasswordlessRegistrationMessageTextRequest.
 * Use `create(SetCustomPasswordlessRegistrationMessageTextRequestSchema)` to create a new message.
 */
export const SetCustomPasswordlessRegistrationMessageTextRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 470);

/**
 * Describes the message zitadel.management.v1.SetCustomPasswordlessRegistrationMessageTextResponse.
 * Use `create(SetCustomPasswordlessRegistrationMessageTextResponseSchema)` to create a new message.
 */
export const SetCustomPasswordlessRegistrationMessageTextResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 471);

/**
 * Describes the message zitadel.management.v1.ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest.
 * Use `create(ResetCustomPasswordlessRegistrationMessageTextToDefaultRequestSchema)` to create a new message.
 */
export const ResetCustomPasswordlessRegistrationMessageTextToDefaultRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 472);

/**
 * Describes the message zitadel.management.v1.ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse.
 * Use `create(ResetCustomPasswordlessRegistrationMessageTextToDefaultResponseSchema)` to create a new message.
 */
export const ResetCustomPasswordlessRegistrationMessageTextToDefaultResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 473);

/**
 * Describes the message zitadel.management.v1.GetCustomPasswordChangeMessageTextRequest.
 * Use `create(GetCustomPasswordChangeMessageTextRequestSchema)` to create a new message.
 */
export const GetCustomPasswordChangeMessageTextRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 474);

/**
 * Describes the message zitadel.management.v1.GetCustomPasswordChangeMessageTextResponse.
 * Use `create(GetCustomPasswordChangeMessageTextResponseSchema)` to create a new message.
 */
export const GetCustomPasswordChangeMessageTextResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 475);

/**
 * Describes the message zitadel.management.v1.GetDefaultPasswordChangeMessageTextRequest.
 * Use `create(GetDefaultPasswordChangeMessageTextRequestSchema)` to create a new message.
 */
export const GetDefaultPasswordChangeMessageTextRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 476);

/**
 * Describes the message zitadel.management.v1.GetDefaultPasswordChangeMessageTextResponse.
 * Use `create(GetDefaultPasswordChangeMessageTextResponseSchema)` to create a new message.
 */
export const GetDefaultPasswordChangeMessageTextResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 477);

/**
 * Describes the message zitadel.management.v1.SetCustomPasswordChangeMessageTextRequest.
 * Use `create(SetCustomPasswordChangeMessageTextRequestSchema)` to create a new message.
 */
export const SetCustomPasswordChangeMessageTextRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 478);

/**
 * Describes the message zitadel.management.v1.SetCustomPasswordChangeMessageTextResponse.
 * Use `create(SetCustomPasswordChangeMessageTextResponseSchema)` to create a new message.
 */
export const SetCustomPasswordChangeMessageTextResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 479);

/**
 * Describes the message zitadel.management.v1.ResetCustomPasswordChangeMessageTextToDefaultRequest.
 * Use `create(ResetCustomPasswordChangeMessageTextToDefaultRequestSchema)` to create a new message.
 */
export const ResetCustomPasswordChangeMessageTextToDefaultRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 480);

/**
 * Describes the message zitadel.management.v1.ResetCustomPasswordChangeMessageTextToDefaultResponse.
 * Use `create(ResetCustomPasswordChangeMessageTextToDefaultResponseSchema)` to create a new message.
 */
export const ResetCustomPasswordChangeMessageTextToDefaultResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 481);

/**
 * Describes the message zitadel.management.v1.GetCustomInviteUserMessageTextRequest.
 * Use `create(GetCustomInviteUserMessageTextRequestSchema)` to create a new message.
 */
export const GetCustomInviteUserMessageTextRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 482);

/**
 * Describes the message zitadel.management.v1.GetCustomInviteUserMessageTextResponse.
 * Use `create(GetCustomInviteUserMessageTextResponseSchema)` to create a new message.
 */
export const GetCustomInviteUserMessageTextResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 483);

/**
 * Describes the message zitadel.management.v1.GetDefaultInviteUserMessageTextRequest.
 * Use `create(GetDefaultInviteUserMessageTextRequestSchema)` to create a new message.
 */
export const GetDefaultInviteUserMessageTextRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 484);

/**
 * Describes the message zitadel.management.v1.GetDefaultInviteUserMessageTextResponse.
 * Use `create(GetDefaultInviteUserMessageTextResponseSchema)` to create a new message.
 */
export const GetDefaultInviteUserMessageTextResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 485);

/**
 * Describes the message zitadel.management.v1.SetCustomInviteUserMessageTextRequest.
 * Use `create(SetCustomInviteUserMessageTextRequestSchema)` to create a new message.
 */
export const SetCustomInviteUserMessageTextRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 486);

/**
 * Describes the message zitadel.management.v1.SetCustomInviteUserMessageTextResponse.
 * Use `create(SetCustomInviteUserMessageTextResponseSchema)` to create a new message.
 */
export const SetCustomInviteUserMessageTextResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 487);

/**
 * Describes the message zitadel.management.v1.ResetCustomInviteUserMessageTextToDefaultRequest.
 * Use `create(ResetCustomInviteUserMessageTextToDefaultRequestSchema)` to create a new message.
 */
export const ResetCustomInviteUserMessageTextToDefaultRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 488);

/**
 * Describes the message zitadel.management.v1.ResetCustomInviteUserMessageTextToDefaultResponse.
 * Use `create(ResetCustomInviteUserMessageTextToDefaultResponseSchema)` to create a new message.
 */
export const ResetCustomInviteUserMessageTextToDefaultResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 489);

/**
 * Describes the message zitadel.management.v1.GetOrgIDPByIDRequest.
 * Use `create(GetOrgIDPByIDRequestSchema)` to create a new message.
 */
export const GetOrgIDPByIDRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 490);

/**
 * Describes the message zitadel.management.v1.GetOrgIDPByIDResponse.
 * Use `create(GetOrgIDPByIDResponseSchema)` to create a new message.
 */
export const GetOrgIDPByIDResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 491);

/**
 * Describes the message zitadel.management.v1.ListOrgIDPsRequest.
 * Use `create(ListOrgIDPsRequestSchema)` to create a new message.
 */
export const ListOrgIDPsRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 492);

/**
 * Describes the message zitadel.management.v1.IDPQuery.
 * Use `create(IDPQuerySchema)` to create a new message.
 */
export const IDPQuerySchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 493);

/**
 * Describes the message zitadel.management.v1.ListOrgIDPsResponse.
 * Use `create(ListOrgIDPsResponseSchema)` to create a new message.
 */
export const ListOrgIDPsResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 494);

/**
 * Describes the message zitadel.management.v1.AddOrgOIDCIDPRequest.
 * Use `create(AddOrgOIDCIDPRequestSchema)` to create a new message.
 */
export const AddOrgOIDCIDPRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 495);

/**
 * Describes the message zitadel.management.v1.AddOrgOIDCIDPResponse.
 * Use `create(AddOrgOIDCIDPResponseSchema)` to create a new message.
 */
export const AddOrgOIDCIDPResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 496);

/**
 * Describes the message zitadel.management.v1.AddOrgJWTIDPRequest.
 * Use `create(AddOrgJWTIDPRequestSchema)` to create a new message.
 */
export const AddOrgJWTIDPRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 497);

/**
 * Describes the message zitadel.management.v1.AddOrgJWTIDPResponse.
 * Use `create(AddOrgJWTIDPResponseSchema)` to create a new message.
 */
export const AddOrgJWTIDPResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 498);

/**
 * Describes the message zitadel.management.v1.DeactivateOrgIDPRequest.
 * Use `create(DeactivateOrgIDPRequestSchema)` to create a new message.
 */
export const DeactivateOrgIDPRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 499);

/**
 * Describes the message zitadel.management.v1.DeactivateOrgIDPResponse.
 * Use `create(DeactivateOrgIDPResponseSchema)` to create a new message.
 */
export const DeactivateOrgIDPResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 500);

/**
 * Describes the message zitadel.management.v1.ReactivateOrgIDPRequest.
 * Use `create(ReactivateOrgIDPRequestSchema)` to create a new message.
 */
export const ReactivateOrgIDPRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 501);

/**
 * Describes the message zitadel.management.v1.ReactivateOrgIDPResponse.
 * Use `create(ReactivateOrgIDPResponseSchema)` to create a new message.
 */
export const ReactivateOrgIDPResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 502);

/**
 * Describes the message zitadel.management.v1.RemoveOrgIDPRequest.
 * Use `create(RemoveOrgIDPRequestSchema)` to create a new message.
 */
export const RemoveOrgIDPRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 503);

/**
 * Describes the message zitadel.management.v1.RemoveOrgIDPResponse.
 * Use `create(RemoveOrgIDPResponseSchema)` to create a new message.
 */
export const RemoveOrgIDPResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 504);

/**
 * Describes the message zitadel.management.v1.UpdateOrgIDPRequest.
 * Use `create(UpdateOrgIDPRequestSchema)` to create a new message.
 */
export const UpdateOrgIDPRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 505);

/**
 * Describes the message zitadel.management.v1.UpdateOrgIDPResponse.
 * Use `create(UpdateOrgIDPResponseSchema)` to create a new message.
 */
export const UpdateOrgIDPResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 506);

/**
 * Describes the message zitadel.management.v1.UpdateOrgIDPOIDCConfigRequest.
 * Use `create(UpdateOrgIDPOIDCConfigRequestSchema)` to create a new message.
 */
export const UpdateOrgIDPOIDCConfigRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 507);

/**
 * Describes the message zitadel.management.v1.UpdateOrgIDPOIDCConfigResponse.
 * Use `create(UpdateOrgIDPOIDCConfigResponseSchema)` to create a new message.
 */
export const UpdateOrgIDPOIDCConfigResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 508);

/**
 * Describes the message zitadel.management.v1.UpdateOrgIDPJWTConfigRequest.
 * Use `create(UpdateOrgIDPJWTConfigRequestSchema)` to create a new message.
 */
export const UpdateOrgIDPJWTConfigRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 509);

/**
 * Describes the message zitadel.management.v1.UpdateOrgIDPJWTConfigResponse.
 * Use `create(UpdateOrgIDPJWTConfigResponseSchema)` to create a new message.
 */
export const UpdateOrgIDPJWTConfigResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 510);

/**
 * Describes the message zitadel.management.v1.ListProvidersRequest.
 * Use `create(ListProvidersRequestSchema)` to create a new message.
 */
export const ListProvidersRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 511);

/**
 * Describes the message zitadel.management.v1.ProviderQuery.
 * Use `create(ProviderQuerySchema)` to create a new message.
 */
export const ProviderQuerySchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 512);

/**
 * Describes the message zitadel.management.v1.ListProvidersResponse.
 * Use `create(ListProvidersResponseSchema)` to create a new message.
 */
export const ListProvidersResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 513);

/**
 * Describes the message zitadel.management.v1.GetProviderByIDRequest.
 * Use `create(GetProviderByIDRequestSchema)` to create a new message.
 */
export const GetProviderByIDRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 514);

/**
 * Describes the message zitadel.management.v1.GetProviderByIDResponse.
 * Use `create(GetProviderByIDResponseSchema)` to create a new message.
 */
export const GetProviderByIDResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 515);

/**
 * Describes the message zitadel.management.v1.AddGenericOAuthProviderRequest.
 * Use `create(AddGenericOAuthProviderRequestSchema)` to create a new message.
 */
export const AddGenericOAuthProviderRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 516);

/**
 * Describes the message zitadel.management.v1.AddGenericOAuthProviderResponse.
 * Use `create(AddGenericOAuthProviderResponseSchema)` to create a new message.
 */
export const AddGenericOAuthProviderResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 517);

/**
 * Describes the message zitadel.management.v1.UpdateGenericOAuthProviderRequest.
 * Use `create(UpdateGenericOAuthProviderRequestSchema)` to create a new message.
 */
export const UpdateGenericOAuthProviderRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 518);

/**
 * Describes the message zitadel.management.v1.UpdateGenericOAuthProviderResponse.
 * Use `create(UpdateGenericOAuthProviderResponseSchema)` to create a new message.
 */
export const UpdateGenericOAuthProviderResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 519);

/**
 * Describes the message zitadel.management.v1.AddGenericOIDCProviderRequest.
 * Use `create(AddGenericOIDCProviderRequestSchema)` to create a new message.
 */
export const AddGenericOIDCProviderRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 520);

/**
 * Describes the message zitadel.management.v1.AddGenericOIDCProviderResponse.
 * Use `create(AddGenericOIDCProviderResponseSchema)` to create a new message.
 */
export const AddGenericOIDCProviderResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 521);

/**
 * Describes the message zitadel.management.v1.UpdateGenericOIDCProviderRequest.
 * Use `create(UpdateGenericOIDCProviderRequestSchema)` to create a new message.
 */
export const UpdateGenericOIDCProviderRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 522);

/**
 * Describes the message zitadel.management.v1.UpdateGenericOIDCProviderResponse.
 * Use `create(UpdateGenericOIDCProviderResponseSchema)` to create a new message.
 */
export const UpdateGenericOIDCProviderResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 523);

/**
 * Describes the message zitadel.management.v1.MigrateGenericOIDCProviderRequest.
 * Use `create(MigrateGenericOIDCProviderRequestSchema)` to create a new message.
 */
export const MigrateGenericOIDCProviderRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 524);

/**
 * Describes the message zitadel.management.v1.MigrateGenericOIDCProviderResponse.
 * Use `create(MigrateGenericOIDCProviderResponseSchema)` to create a new message.
 */
export const MigrateGenericOIDCProviderResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 525);

/**
 * Describes the message zitadel.management.v1.AddJWTProviderRequest.
 * Use `create(AddJWTProviderRequestSchema)` to create a new message.
 */
export const AddJWTProviderRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 526);

/**
 * Describes the message zitadel.management.v1.AddJWTProviderResponse.
 * Use `create(AddJWTProviderResponseSchema)` to create a new message.
 */
export const AddJWTProviderResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 527);

/**
 * Describes the message zitadel.management.v1.UpdateJWTProviderRequest.
 * Use `create(UpdateJWTProviderRequestSchema)` to create a new message.
 */
export const UpdateJWTProviderRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 528);

/**
 * Describes the message zitadel.management.v1.UpdateJWTProviderResponse.
 * Use `create(UpdateJWTProviderResponseSchema)` to create a new message.
 */
export const UpdateJWTProviderResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 529);

/**
 * Describes the message zitadel.management.v1.AddAzureADProviderRequest.
 * Use `create(AddAzureADProviderRequestSchema)` to create a new message.
 */
export const AddAzureADProviderRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 530);

/**
 * Describes the message zitadel.management.v1.AddAzureADProviderResponse.
 * Use `create(AddAzureADProviderResponseSchema)` to create a new message.
 */
export const AddAzureADProviderResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 531);

/**
 * Describes the message zitadel.management.v1.UpdateAzureADProviderRequest.
 * Use `create(UpdateAzureADProviderRequestSchema)` to create a new message.
 */
export const UpdateAzureADProviderRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 532);

/**
 * Describes the message zitadel.management.v1.UpdateAzureADProviderResponse.
 * Use `create(UpdateAzureADProviderResponseSchema)` to create a new message.
 */
export const UpdateAzureADProviderResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 533);

/**
 * Describes the message zitadel.management.v1.AddGitHubProviderRequest.
 * Use `create(AddGitHubProviderRequestSchema)` to create a new message.
 */
export const AddGitHubProviderRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 534);

/**
 * Describes the message zitadel.management.v1.AddGitHubProviderResponse.
 * Use `create(AddGitHubProviderResponseSchema)` to create a new message.
 */
export const AddGitHubProviderResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 535);

/**
 * Describes the message zitadel.management.v1.UpdateGitHubProviderRequest.
 * Use `create(UpdateGitHubProviderRequestSchema)` to create a new message.
 */
export const UpdateGitHubProviderRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 536);

/**
 * Describes the message zitadel.management.v1.UpdateGitHubProviderResponse.
 * Use `create(UpdateGitHubProviderResponseSchema)` to create a new message.
 */
export const UpdateGitHubProviderResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 537);

/**
 * Describes the message zitadel.management.v1.AddGitHubEnterpriseServerProviderRequest.
 * Use `create(AddGitHubEnterpriseServerProviderRequestSchema)` to create a new message.
 */
export const AddGitHubEnterpriseServerProviderRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 538);

/**
 * Describes the message zitadel.management.v1.AddGitHubEnterpriseServerProviderResponse.
 * Use `create(AddGitHubEnterpriseServerProviderResponseSchema)` to create a new message.
 */
export const AddGitHubEnterpriseServerProviderResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 539);

/**
 * Describes the message zitadel.management.v1.UpdateGitHubEnterpriseServerProviderRequest.
 * Use `create(UpdateGitHubEnterpriseServerProviderRequestSchema)` to create a new message.
 */
export const UpdateGitHubEnterpriseServerProviderRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 540);

/**
 * Describes the message zitadel.management.v1.UpdateGitHubEnterpriseServerProviderResponse.
 * Use `create(UpdateGitHubEnterpriseServerProviderResponseSchema)` to create a new message.
 */
export const UpdateGitHubEnterpriseServerProviderResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 541);

/**
 * Describes the message zitadel.management.v1.AddGitLabProviderRequest.
 * Use `create(AddGitLabProviderRequestSchema)` to create a new message.
 */
export const AddGitLabProviderRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 542);

/**
 * Describes the message zitadel.management.v1.AddGitLabProviderResponse.
 * Use `create(AddGitLabProviderResponseSchema)` to create a new message.
 */
export const AddGitLabProviderResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 543);

/**
 * Describes the message zitadel.management.v1.UpdateGitLabProviderRequest.
 * Use `create(UpdateGitLabProviderRequestSchema)` to create a new message.
 */
export const UpdateGitLabProviderRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 544);

/**
 * Describes the message zitadel.management.v1.UpdateGitLabProviderResponse.
 * Use `create(UpdateGitLabProviderResponseSchema)` to create a new message.
 */
export const UpdateGitLabProviderResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 545);

/**
 * Describes the message zitadel.management.v1.AddGitLabSelfHostedProviderRequest.
 * Use `create(AddGitLabSelfHostedProviderRequestSchema)` to create a new message.
 */
export const AddGitLabSelfHostedProviderRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 546);

/**
 * Describes the message zitadel.management.v1.AddGitLabSelfHostedProviderResponse.
 * Use `create(AddGitLabSelfHostedProviderResponseSchema)` to create a new message.
 */
export const AddGitLabSelfHostedProviderResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 547);

/**
 * Describes the message zitadel.management.v1.UpdateGitLabSelfHostedProviderRequest.
 * Use `create(UpdateGitLabSelfHostedProviderRequestSchema)` to create a new message.
 */
export const UpdateGitLabSelfHostedProviderRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 548);

/**
 * Describes the message zitadel.management.v1.UpdateGitLabSelfHostedProviderResponse.
 * Use `create(UpdateGitLabSelfHostedProviderResponseSchema)` to create a new message.
 */
export const UpdateGitLabSelfHostedProviderResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 549);

/**
 * Describes the message zitadel.management.v1.AddGoogleProviderRequest.
 * Use `create(AddGoogleProviderRequestSchema)` to create a new message.
 */
export const AddGoogleProviderRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 550);

/**
 * Describes the message zitadel.management.v1.AddGoogleProviderResponse.
 * Use `create(AddGoogleProviderResponseSchema)` to create a new message.
 */
export const AddGoogleProviderResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 551);

/**
 * Describes the message zitadel.management.v1.UpdateGoogleProviderRequest.
 * Use `create(UpdateGoogleProviderRequestSchema)` to create a new message.
 */
export const UpdateGoogleProviderRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 552);

/**
 * Describes the message zitadel.management.v1.UpdateGoogleProviderResponse.
 * Use `create(UpdateGoogleProviderResponseSchema)` to create a new message.
 */
export const UpdateGoogleProviderResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 553);

/**
 * Describes the message zitadel.management.v1.AddLDAPProviderRequest.
 * Use `create(AddLDAPProviderRequestSchema)` to create a new message.
 */
export const AddLDAPProviderRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 554);

/**
 * Describes the message zitadel.management.v1.AddLDAPProviderResponse.
 * Use `create(AddLDAPProviderResponseSchema)` to create a new message.
 */
export const AddLDAPProviderResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 555);

/**
 * Describes the message zitadel.management.v1.UpdateLDAPProviderRequest.
 * Use `create(UpdateLDAPProviderRequestSchema)` to create a new message.
 */
export const UpdateLDAPProviderRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 556);

/**
 * Describes the message zitadel.management.v1.UpdateLDAPProviderResponse.
 * Use `create(UpdateLDAPProviderResponseSchema)` to create a new message.
 */
export const UpdateLDAPProviderResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 557);

/**
 * Describes the message zitadel.management.v1.AddSAMLProviderRequest.
 * Use `create(AddSAMLProviderRequestSchema)` to create a new message.
 */
export const AddSAMLProviderRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 558);

/**
 * Describes the message zitadel.management.v1.AddSAMLProviderResponse.
 * Use `create(AddSAMLProviderResponseSchema)` to create a new message.
 */
export const AddSAMLProviderResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 559);

/**
 * Describes the message zitadel.management.v1.UpdateSAMLProviderRequest.
 * Use `create(UpdateSAMLProviderRequestSchema)` to create a new message.
 */
export const UpdateSAMLProviderRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 560);

/**
 * Describes the message zitadel.management.v1.UpdateSAMLProviderResponse.
 * Use `create(UpdateSAMLProviderResponseSchema)` to create a new message.
 */
export const UpdateSAMLProviderResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 561);

/**
 * Describes the message zitadel.management.v1.RegenerateSAMLProviderCertificateRequest.
 * Use `create(RegenerateSAMLProviderCertificateRequestSchema)` to create a new message.
 */
export const RegenerateSAMLProviderCertificateRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 562);

/**
 * Describes the message zitadel.management.v1.RegenerateSAMLProviderCertificateResponse.
 * Use `create(RegenerateSAMLProviderCertificateResponseSchema)` to create a new message.
 */
export const RegenerateSAMLProviderCertificateResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 563);

/**
 * Describes the message zitadel.management.v1.AddAppleProviderRequest.
 * Use `create(AddAppleProviderRequestSchema)` to create a new message.
 */
export const AddAppleProviderRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 564);

/**
 * Describes the message zitadel.management.v1.AddAppleProviderResponse.
 * Use `create(AddAppleProviderResponseSchema)` to create a new message.
 */
export const AddAppleProviderResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 565);

/**
 * Describes the message zitadel.management.v1.UpdateAppleProviderRequest.
 * Use `create(UpdateAppleProviderRequestSchema)` to create a new message.
 */
export const UpdateAppleProviderRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 566);

/**
 * Describes the message zitadel.management.v1.UpdateAppleProviderResponse.
 * Use `create(UpdateAppleProviderResponseSchema)` to create a new message.
 */
export const UpdateAppleProviderResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 567);

/**
 * Describes the message zitadel.management.v1.DeleteProviderRequest.
 * Use `create(DeleteProviderRequestSchema)` to create a new message.
 */
export const DeleteProviderRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 568);

/**
 * Describes the message zitadel.management.v1.DeleteProviderResponse.
 * Use `create(DeleteProviderResponseSchema)` to create a new message.
 */
export const DeleteProviderResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 569);

/**
 * Describes the message zitadel.management.v1.ListActionsRequest.
 * Use `create(ListActionsRequestSchema)` to create a new message.
 */
export const ListActionsRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 570);

/**
 * Describes the message zitadel.management.v1.ActionQuery.
 * Use `create(ActionQuerySchema)` to create a new message.
 */
export const ActionQuerySchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 571);

/**
 * Describes the message zitadel.management.v1.ListActionsResponse.
 * Use `create(ListActionsResponseSchema)` to create a new message.
 */
export const ListActionsResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 572);

/**
 * Describes the message zitadel.management.v1.CreateActionRequest.
 * Use `create(CreateActionRequestSchema)` to create a new message.
 */
export const CreateActionRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 573);

/**
 * Describes the message zitadel.management.v1.CreateActionResponse.
 * Use `create(CreateActionResponseSchema)` to create a new message.
 */
export const CreateActionResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 574);

/**
 * Describes the message zitadel.management.v1.GetActionRequest.
 * Use `create(GetActionRequestSchema)` to create a new message.
 */
export const GetActionRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 575);

/**
 * Describes the message zitadel.management.v1.GetActionResponse.
 * Use `create(GetActionResponseSchema)` to create a new message.
 */
export const GetActionResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 576);

/**
 * Describes the message zitadel.management.v1.UpdateActionRequest.
 * Use `create(UpdateActionRequestSchema)` to create a new message.
 */
export const UpdateActionRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 577);

/**
 * Describes the message zitadel.management.v1.UpdateActionResponse.
 * Use `create(UpdateActionResponseSchema)` to create a new message.
 */
export const UpdateActionResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 578);

/**
 * Describes the message zitadel.management.v1.DeleteActionRequest.
 * Use `create(DeleteActionRequestSchema)` to create a new message.
 */
export const DeleteActionRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 579);

/**
 * Describes the message zitadel.management.v1.DeleteActionResponse.
 * Use `create(DeleteActionResponseSchema)` to create a new message.
 */
export const DeleteActionResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 580);

/**
 * Describes the message zitadel.management.v1.ListFlowTypesRequest.
 * Use `create(ListFlowTypesRequestSchema)` to create a new message.
 */
export const ListFlowTypesRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 581);

/**
 * Describes the message zitadel.management.v1.ListFlowTypesResponse.
 * Use `create(ListFlowTypesResponseSchema)` to create a new message.
 */
export const ListFlowTypesResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 582);

/**
 * Describes the message zitadel.management.v1.ListFlowTriggerTypesRequest.
 * Use `create(ListFlowTriggerTypesRequestSchema)` to create a new message.
 */
export const ListFlowTriggerTypesRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 583);

/**
 * Describes the message zitadel.management.v1.ListFlowTriggerTypesResponse.
 * Use `create(ListFlowTriggerTypesResponseSchema)` to create a new message.
 */
export const ListFlowTriggerTypesResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 584);

/**
 * Describes the message zitadel.management.v1.DeactivateActionRequest.
 * Use `create(DeactivateActionRequestSchema)` to create a new message.
 */
export const DeactivateActionRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 585);

/**
 * Describes the message zitadel.management.v1.DeactivateActionResponse.
 * Use `create(DeactivateActionResponseSchema)` to create a new message.
 */
export const DeactivateActionResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 586);

/**
 * Describes the message zitadel.management.v1.ReactivateActionRequest.
 * Use `create(ReactivateActionRequestSchema)` to create a new message.
 */
export const ReactivateActionRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 587);

/**
 * Describes the message zitadel.management.v1.ReactivateActionResponse.
 * Use `create(ReactivateActionResponseSchema)` to create a new message.
 */
export const ReactivateActionResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 588);

/**
 * Describes the message zitadel.management.v1.GetFlowRequest.
 * Use `create(GetFlowRequestSchema)` to create a new message.
 */
export const GetFlowRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 589);

/**
 * Describes the message zitadel.management.v1.GetFlowResponse.
 * Use `create(GetFlowResponseSchema)` to create a new message.
 */
export const GetFlowResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 590);

/**
 * Describes the message zitadel.management.v1.ClearFlowRequest.
 * Use `create(ClearFlowRequestSchema)` to create a new message.
 */
export const ClearFlowRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 591);

/**
 * Describes the message zitadel.management.v1.ClearFlowResponse.
 * Use `create(ClearFlowResponseSchema)` to create a new message.
 */
export const ClearFlowResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 592);

/**
 * Describes the message zitadel.management.v1.SetTriggerActionsRequest.
 * Use `create(SetTriggerActionsRequestSchema)` to create a new message.
 */
export const SetTriggerActionsRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 593);

/**
 * Describes the message zitadel.management.v1.SetTriggerActionsResponse.
 * Use `create(SetTriggerActionsResponseSchema)` to create a new message.
 */
export const SetTriggerActionsResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_management, 594);

/**
 * @generated from service zitadel.management.v1.ManagementService
 */
export const ManagementService = /*@__PURE__*/
  serviceDesc(file_zitadel_management, 0);

