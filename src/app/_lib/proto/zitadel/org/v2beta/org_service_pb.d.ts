// @generated by protoc-gen-es v2.6.0 with parameter "json_types=true,import_extension=js"
// @generated from file zitadel/org/v2beta/org_service.proto (package zitadel.org.v2beta, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import type { Message } from "@bufbuild/protobuf";
import type { AddHumanUserRequest, AddHumanUserRequestJson } from "../../user/v2beta/user_service_pb.js";
import type { Timestamp, TimestampJson } from "@bufbuild/protobuf/wkt";
import type { PaginationRequest, PaginationRequestJson, PaginationResponse, PaginationResponseJson } from "../../filter/v2beta/filter_pb.js";
import type { Domain, DomainJson, DomainSearchFilter, DomainSearchFilterJson, DomainValidationType, DomainValidationTypeJson, Organization, OrganizationJson, OrganizationSearchFilter, OrganizationSearchFilterJson, OrgFieldName, OrgFieldNameJson } from "./org_pb.js";
import type { Metadata as Metadata$1, MetadataJson as MetadataJson$1, MetadataQuery, MetadataQueryJson } from "../../metadata/v2beta/metadata_pb.js";

/**
 * Describes the file zitadel/org/v2beta/org_service.proto.
 */
export declare const file_zitadel_org_v2beta_org_service: GenFile;

/**
 * @generated from message zitadel.org.v2beta.CreateOrganizationRequest
 */
export declare type CreateOrganizationRequest = Message<"zitadel.org.v2beta.CreateOrganizationRequest"> & {
  /**
   * name of the Organization to be created.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Optionally set your own id unique for the organization.
   *
   * @generated from field: optional string id = 2;
   */
  id?: string;

  /**
   * Additional Admins for the Organization.
   *
   * @generated from field: repeated zitadel.org.v2beta.CreateOrganizationRequest.Admin admins = 3;
   */
  admins: CreateOrganizationRequest_Admin[];
};

/**
 * @generated from message zitadel.org.v2beta.CreateOrganizationRequest
 */
export declare type CreateOrganizationRequestJson = {
  /**
   * name of the Organization to be created.
   *
   * @generated from field: string name = 1;
   */
  name?: string;

  /**
   * Optionally set your own id unique for the organization.
   *
   * @generated from field: optional string id = 2;
   */
  id?: string;

  /**
   * Additional Admins for the Organization.
   *
   * @generated from field: repeated zitadel.org.v2beta.CreateOrganizationRequest.Admin admins = 3;
   */
  admins?: CreateOrganizationRequest_AdminJson[];
};

/**
 * Describes the message zitadel.org.v2beta.CreateOrganizationRequest.
 * Use `create(CreateOrganizationRequestSchema)` to create a new message.
 */
export declare const CreateOrganizationRequestSchema: GenMessage<CreateOrganizationRequest, {jsonType: CreateOrganizationRequestJson}>;

/**
 * The Admin for the newly created Organization.
 *
 * @generated from message zitadel.org.v2beta.CreateOrganizationRequest.Admin
 */
export declare type CreateOrganizationRequest_Admin = Message<"zitadel.org.v2beta.CreateOrganizationRequest.Admin"> & {
  /**
   * @generated from oneof zitadel.org.v2beta.CreateOrganizationRequest.Admin.user_type
   */
  userType: {
    /**
     * @generated from field: string user_id = 1;
     */
    value: string;
    case: "userId";
  } | {
    /**
     * @generated from field: zitadel.user.v2beta.AddHumanUserRequest human = 2;
     */
    value: AddHumanUserRequest;
    case: "human";
  } | { case: undefined; value?: undefined };

  /**
   * specify Organization Member Roles for the provided user (default is ORG_OWNER if roles are empty)
   *
   * @generated from field: repeated string roles = 3;
   */
  roles: string[];
};

/**
 * The Admin for the newly created Organization.
 *
 * @generated from message zitadel.org.v2beta.CreateOrganizationRequest.Admin
 */
export declare type CreateOrganizationRequest_AdminJson = {
  /**
   * @generated from field: string user_id = 1;
   */
  userId?: string;

  /**
   * @generated from field: zitadel.user.v2beta.AddHumanUserRequest human = 2;
   */
  human?: AddHumanUserRequestJson;

  /**
   * specify Organization Member Roles for the provided user (default is ORG_OWNER if roles are empty)
   *
   * @generated from field: repeated string roles = 3;
   */
  roles?: string[];
};

/**
 * Describes the message zitadel.org.v2beta.CreateOrganizationRequest.Admin.
 * Use `create(CreateOrganizationRequest_AdminSchema)` to create a new message.
 */
export declare const CreateOrganizationRequest_AdminSchema: GenMessage<CreateOrganizationRequest_Admin, {jsonType: CreateOrganizationRequest_AdminJson}>;

/**
 * @generated from message zitadel.org.v2beta.CreatedAdmin
 */
export declare type CreatedAdmin = Message<"zitadel.org.v2beta.CreatedAdmin"> & {
  /**
   * @generated from field: string user_id = 1;
   */
  userId: string;

  /**
   * @generated from field: optional string email_code = 2;
   */
  emailCode?: string;

  /**
   * @generated from field: optional string phone_code = 3;
   */
  phoneCode?: string;
};

/**
 * @generated from message zitadel.org.v2beta.CreatedAdmin
 */
export declare type CreatedAdminJson = {
  /**
   * @generated from field: string user_id = 1;
   */
  userId?: string;

  /**
   * @generated from field: optional string email_code = 2;
   */
  emailCode?: string;

  /**
   * @generated from field: optional string phone_code = 3;
   */
  phoneCode?: string;
};

/**
 * Describes the message zitadel.org.v2beta.CreatedAdmin.
 * Use `create(CreatedAdminSchema)` to create a new message.
 */
export declare const CreatedAdminSchema: GenMessage<CreatedAdmin, {jsonType: CreatedAdminJson}>;

/**
 * @generated from message zitadel.org.v2beta.AssignedAdmin
 */
export declare type AssignedAdmin = Message<"zitadel.org.v2beta.AssignedAdmin"> & {
  /**
   * @generated from field: string user_id = 1;
   */
  userId: string;
};

/**
 * @generated from message zitadel.org.v2beta.AssignedAdmin
 */
export declare type AssignedAdminJson = {
  /**
   * @generated from field: string user_id = 1;
   */
  userId?: string;
};

/**
 * Describes the message zitadel.org.v2beta.AssignedAdmin.
 * Use `create(AssignedAdminSchema)` to create a new message.
 */
export declare const AssignedAdminSchema: GenMessage<AssignedAdmin, {jsonType: AssignedAdminJson}>;

/**
 * @generated from message zitadel.org.v2beta.OrganizationAdmin
 */
export declare type OrganizationAdmin = Message<"zitadel.org.v2beta.OrganizationAdmin"> & {
  /**
   * The admins created/assigned for the Organization.
   *
   * @generated from oneof zitadel.org.v2beta.OrganizationAdmin.OrganizationAdmin
   */
  OrganizationAdmin: {
    /**
     * @generated from field: zitadel.org.v2beta.CreatedAdmin created_admin = 1;
     */
    value: CreatedAdmin;
    case: "createdAdmin";
  } | {
    /**
     * @generated from field: zitadel.org.v2beta.AssignedAdmin assigned_admin = 2;
     */
    value: AssignedAdmin;
    case: "assignedAdmin";
  } | { case: undefined; value?: undefined };
};

/**
 * @generated from message zitadel.org.v2beta.OrganizationAdmin
 */
export declare type OrganizationAdminJson = {
  /**
   * @generated from field: zitadel.org.v2beta.CreatedAdmin created_admin = 1;
   */
  createdAdmin?: CreatedAdminJson;

  /**
   * @generated from field: zitadel.org.v2beta.AssignedAdmin assigned_admin = 2;
   */
  assignedAdmin?: AssignedAdminJson;
};

/**
 * Describes the message zitadel.org.v2beta.OrganizationAdmin.
 * Use `create(OrganizationAdminSchema)` to create a new message.
 */
export declare const OrganizationAdminSchema: GenMessage<OrganizationAdmin, {jsonType: OrganizationAdminJson}>;

/**
 * @generated from message zitadel.org.v2beta.CreateOrganizationResponse
 */
export declare type CreateOrganizationResponse = Message<"zitadel.org.v2beta.CreateOrganizationResponse"> & {
  /**
   * The timestamp of the organization was created.
   *
   * @generated from field: google.protobuf.Timestamp creation_date = 1;
   */
  creationDate?: Timestamp;

  /**
   * Organization ID of the newly created organization.
   *
   * @generated from field: string id = 2;
   */
  id: string;

  /**
   * The admins created/assigned for the Organization
   *
   * @generated from field: repeated zitadel.org.v2beta.OrganizationAdmin organization_admins = 3;
   */
  organizationAdmins: OrganizationAdmin[];
};

/**
 * @generated from message zitadel.org.v2beta.CreateOrganizationResponse
 */
export declare type CreateOrganizationResponseJson = {
  /**
   * The timestamp of the organization was created.
   *
   * @generated from field: google.protobuf.Timestamp creation_date = 1;
   */
  creationDate?: TimestampJson;

  /**
   * Organization ID of the newly created organization.
   *
   * @generated from field: string id = 2;
   */
  id?: string;

  /**
   * The admins created/assigned for the Organization
   *
   * @generated from field: repeated zitadel.org.v2beta.OrganizationAdmin organization_admins = 3;
   */
  organizationAdmins?: OrganizationAdminJson[];
};

/**
 * Describes the message zitadel.org.v2beta.CreateOrganizationResponse.
 * Use `create(CreateOrganizationResponseSchema)` to create a new message.
 */
export declare const CreateOrganizationResponseSchema: GenMessage<CreateOrganizationResponse, {jsonType: CreateOrganizationResponseJson}>;

/**
 * @generated from message zitadel.org.v2beta.UpdateOrganizationRequest
 */
export declare type UpdateOrganizationRequest = Message<"zitadel.org.v2beta.UpdateOrganizationRequest"> & {
  /**
   * Organization Id for the Organization to be updated
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * New Name for the Organization to be updated
   *
   * @generated from field: string name = 2;
   */
  name: string;
};

/**
 * @generated from message zitadel.org.v2beta.UpdateOrganizationRequest
 */
export declare type UpdateOrganizationRequestJson = {
  /**
   * Organization Id for the Organization to be updated
   *
   * @generated from field: string id = 1;
   */
  id?: string;

  /**
   * New Name for the Organization to be updated
   *
   * @generated from field: string name = 2;
   */
  name?: string;
};

/**
 * Describes the message zitadel.org.v2beta.UpdateOrganizationRequest.
 * Use `create(UpdateOrganizationRequestSchema)` to create a new message.
 */
export declare const UpdateOrganizationRequestSchema: GenMessage<UpdateOrganizationRequest, {jsonType: UpdateOrganizationRequestJson}>;

/**
 * @generated from message zitadel.org.v2beta.UpdateOrganizationResponse
 */
export declare type UpdateOrganizationResponse = Message<"zitadel.org.v2beta.UpdateOrganizationResponse"> & {
  /**
   * The timestamp of the update to the organization.
   *
   * @generated from field: google.protobuf.Timestamp change_date = 1;
   */
  changeDate?: Timestamp;
};

/**
 * @generated from message zitadel.org.v2beta.UpdateOrganizationResponse
 */
export declare type UpdateOrganizationResponseJson = {
  /**
   * The timestamp of the update to the organization.
   *
   * @generated from field: google.protobuf.Timestamp change_date = 1;
   */
  changeDate?: TimestampJson;
};

/**
 * Describes the message zitadel.org.v2beta.UpdateOrganizationResponse.
 * Use `create(UpdateOrganizationResponseSchema)` to create a new message.
 */
export declare const UpdateOrganizationResponseSchema: GenMessage<UpdateOrganizationResponse, {jsonType: UpdateOrganizationResponseJson}>;

/**
 * @generated from message zitadel.org.v2beta.ListOrganizationsRequest
 */
export declare type ListOrganizationsRequest = Message<"zitadel.org.v2beta.ListOrganizationsRequest"> & {
  /**
   * List limitations and ordering.
   *
   * @generated from field: optional zitadel.filter.v2beta.PaginationRequest pagination = 1;
   */
  pagination?: PaginationRequest;

  /**
   * the field the result is sorted
   *
   * @generated from field: zitadel.org.v2beta.OrgFieldName sorting_column = 2;
   */
  sortingColumn: OrgFieldName;

  /**
   * Define the criteria to query for.
   * repeated ProjectRoleQuery filters = 4;
   *
   * @generated from field: repeated zitadel.org.v2beta.OrganizationSearchFilter filter = 3;
   */
  filter: OrganizationSearchFilter[];
};

/**
 * @generated from message zitadel.org.v2beta.ListOrganizationsRequest
 */
export declare type ListOrganizationsRequestJson = {
  /**
   * List limitations and ordering.
   *
   * @generated from field: optional zitadel.filter.v2beta.PaginationRequest pagination = 1;
   */
  pagination?: PaginationRequestJson;

  /**
   * the field the result is sorted
   *
   * @generated from field: zitadel.org.v2beta.OrgFieldName sorting_column = 2;
   */
  sortingColumn?: OrgFieldNameJson;

  /**
   * Define the criteria to query for.
   * repeated ProjectRoleQuery filters = 4;
   *
   * @generated from field: repeated zitadel.org.v2beta.OrganizationSearchFilter filter = 3;
   */
  filter?: OrganizationSearchFilterJson[];
};

/**
 * Describes the message zitadel.org.v2beta.ListOrganizationsRequest.
 * Use `create(ListOrganizationsRequestSchema)` to create a new message.
 */
export declare const ListOrganizationsRequestSchema: GenMessage<ListOrganizationsRequest, {jsonType: ListOrganizationsRequestJson}>;

/**
 * @generated from message zitadel.org.v2beta.ListOrganizationsResponse
 */
export declare type ListOrganizationsResponse = Message<"zitadel.org.v2beta.ListOrganizationsResponse"> & {
  /**
   * Pagination of the Organizations results
   *
   * @generated from field: zitadel.filter.v2beta.PaginationResponse pagination = 1;
   */
  pagination?: PaginationResponse;

  /**
   * The Organizations requested
   *
   * @generated from field: repeated zitadel.org.v2beta.Organization organizations = 2;
   */
  organizations: Organization[];
};

/**
 * @generated from message zitadel.org.v2beta.ListOrganizationsResponse
 */
export declare type ListOrganizationsResponseJson = {
  /**
   * Pagination of the Organizations results
   *
   * @generated from field: zitadel.filter.v2beta.PaginationResponse pagination = 1;
   */
  pagination?: PaginationResponseJson;

  /**
   * The Organizations requested
   *
   * @generated from field: repeated zitadel.org.v2beta.Organization organizations = 2;
   */
  organizations?: OrganizationJson[];
};

/**
 * Describes the message zitadel.org.v2beta.ListOrganizationsResponse.
 * Use `create(ListOrganizationsResponseSchema)` to create a new message.
 */
export declare const ListOrganizationsResponseSchema: GenMessage<ListOrganizationsResponse, {jsonType: ListOrganizationsResponseJson}>;

/**
 * @generated from message zitadel.org.v2beta.DeleteOrganizationRequest
 */
export declare type DeleteOrganizationRequest = Message<"zitadel.org.v2beta.DeleteOrganizationRequest"> & {
  /**
   * Organization Id for the Organization to be deleted
   *
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * @generated from message zitadel.org.v2beta.DeleteOrganizationRequest
 */
export declare type DeleteOrganizationRequestJson = {
  /**
   * Organization Id for the Organization to be deleted
   *
   * @generated from field: string id = 1;
   */
  id?: string;
};

/**
 * Describes the message zitadel.org.v2beta.DeleteOrganizationRequest.
 * Use `create(DeleteOrganizationRequestSchema)` to create a new message.
 */
export declare const DeleteOrganizationRequestSchema: GenMessage<DeleteOrganizationRequest, {jsonType: DeleteOrganizationRequestJson}>;

/**
 * @generated from message zitadel.org.v2beta.DeleteOrganizationResponse
 */
export declare type DeleteOrganizationResponse = Message<"zitadel.org.v2beta.DeleteOrganizationResponse"> & {
  /**
   * The timestamp of the deletion of the organization.
   *
   * @generated from field: google.protobuf.Timestamp deletion_date = 1;
   */
  deletionDate?: Timestamp;
};

/**
 * @generated from message zitadel.org.v2beta.DeleteOrganizationResponse
 */
export declare type DeleteOrganizationResponseJson = {
  /**
   * The timestamp of the deletion of the organization.
   *
   * @generated from field: google.protobuf.Timestamp deletion_date = 1;
   */
  deletionDate?: TimestampJson;
};

/**
 * Describes the message zitadel.org.v2beta.DeleteOrganizationResponse.
 * Use `create(DeleteOrganizationResponseSchema)` to create a new message.
 */
export declare const DeleteOrganizationResponseSchema: GenMessage<DeleteOrganizationResponse, {jsonType: DeleteOrganizationResponseJson}>;

/**
 * @generated from message zitadel.org.v2beta.DeactivateOrganizationRequest
 */
export declare type DeactivateOrganizationRequest = Message<"zitadel.org.v2beta.DeactivateOrganizationRequest"> & {
  /**
   * Organization Id for the Organization to be deactivated
   *
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * @generated from message zitadel.org.v2beta.DeactivateOrganizationRequest
 */
export declare type DeactivateOrganizationRequestJson = {
  /**
   * Organization Id for the Organization to be deactivated
   *
   * @generated from field: string id = 1;
   */
  id?: string;
};

/**
 * Describes the message zitadel.org.v2beta.DeactivateOrganizationRequest.
 * Use `create(DeactivateOrganizationRequestSchema)` to create a new message.
 */
export declare const DeactivateOrganizationRequestSchema: GenMessage<DeactivateOrganizationRequest, {jsonType: DeactivateOrganizationRequestJson}>;

/**
 * @generated from message zitadel.org.v2beta.DeactivateOrganizationResponse
 */
export declare type DeactivateOrganizationResponse = Message<"zitadel.org.v2beta.DeactivateOrganizationResponse"> & {
  /**
   * The timestamp of the deactivation of the organization.
   *
   * @generated from field: google.protobuf.Timestamp change_date = 1;
   */
  changeDate?: Timestamp;
};

/**
 * @generated from message zitadel.org.v2beta.DeactivateOrganizationResponse
 */
export declare type DeactivateOrganizationResponseJson = {
  /**
   * The timestamp of the deactivation of the organization.
   *
   * @generated from field: google.protobuf.Timestamp change_date = 1;
   */
  changeDate?: TimestampJson;
};

/**
 * Describes the message zitadel.org.v2beta.DeactivateOrganizationResponse.
 * Use `create(DeactivateOrganizationResponseSchema)` to create a new message.
 */
export declare const DeactivateOrganizationResponseSchema: GenMessage<DeactivateOrganizationResponse, {jsonType: DeactivateOrganizationResponseJson}>;

/**
 * @generated from message zitadel.org.v2beta.ActivateOrganizationRequest
 */
export declare type ActivateOrganizationRequest = Message<"zitadel.org.v2beta.ActivateOrganizationRequest"> & {
  /**
   * Organization Id for the Organization to be activated
   *
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * @generated from message zitadel.org.v2beta.ActivateOrganizationRequest
 */
export declare type ActivateOrganizationRequestJson = {
  /**
   * Organization Id for the Organization to be activated
   *
   * @generated from field: string id = 1;
   */
  id?: string;
};

/**
 * Describes the message zitadel.org.v2beta.ActivateOrganizationRequest.
 * Use `create(ActivateOrganizationRequestSchema)` to create a new message.
 */
export declare const ActivateOrganizationRequestSchema: GenMessage<ActivateOrganizationRequest, {jsonType: ActivateOrganizationRequestJson}>;

/**
 * @generated from message zitadel.org.v2beta.ActivateOrganizationResponse
 */
export declare type ActivateOrganizationResponse = Message<"zitadel.org.v2beta.ActivateOrganizationResponse"> & {
  /**
   * The timestamp of the activation of the organization.
   *
   * @generated from field: google.protobuf.Timestamp change_date = 1;
   */
  changeDate?: Timestamp;
};

/**
 * @generated from message zitadel.org.v2beta.ActivateOrganizationResponse
 */
export declare type ActivateOrganizationResponseJson = {
  /**
   * The timestamp of the activation of the organization.
   *
   * @generated from field: google.protobuf.Timestamp change_date = 1;
   */
  changeDate?: TimestampJson;
};

/**
 * Describes the message zitadel.org.v2beta.ActivateOrganizationResponse.
 * Use `create(ActivateOrganizationResponseSchema)` to create a new message.
 */
export declare const ActivateOrganizationResponseSchema: GenMessage<ActivateOrganizationResponse, {jsonType: ActivateOrganizationResponseJson}>;

/**
 * @generated from message zitadel.org.v2beta.AddOrganizationDomainRequest
 */
export declare type AddOrganizationDomainRequest = Message<"zitadel.org.v2beta.AddOrganizationDomainRequest"> & {
  /**
   * Organization Id for the Organization for which the domain is to be added to.
   *
   * @generated from field: string organization_id = 1;
   */
  organizationId: string;

  /**
   * The domain you want to add to the organization.
   *
   * @generated from field: string domain = 2;
   */
  domain: string;
};

/**
 * @generated from message zitadel.org.v2beta.AddOrganizationDomainRequest
 */
export declare type AddOrganizationDomainRequestJson = {
  /**
   * Organization Id for the Organization for which the domain is to be added to.
   *
   * @generated from field: string organization_id = 1;
   */
  organizationId?: string;

  /**
   * The domain you want to add to the organization.
   *
   * @generated from field: string domain = 2;
   */
  domain?: string;
};

/**
 * Describes the message zitadel.org.v2beta.AddOrganizationDomainRequest.
 * Use `create(AddOrganizationDomainRequestSchema)` to create a new message.
 */
export declare const AddOrganizationDomainRequestSchema: GenMessage<AddOrganizationDomainRequest, {jsonType: AddOrganizationDomainRequestJson}>;

/**
 * @generated from message zitadel.org.v2beta.AddOrganizationDomainResponse
 */
export declare type AddOrganizationDomainResponse = Message<"zitadel.org.v2beta.AddOrganizationDomainResponse"> & {
  /**
   * The timestamp of the organization was created.
   *
   * @generated from field: google.protobuf.Timestamp creation_date = 1;
   */
  creationDate?: Timestamp;
};

/**
 * @generated from message zitadel.org.v2beta.AddOrganizationDomainResponse
 */
export declare type AddOrganizationDomainResponseJson = {
  /**
   * The timestamp of the organization was created.
   *
   * @generated from field: google.protobuf.Timestamp creation_date = 1;
   */
  creationDate?: TimestampJson;
};

/**
 * Describes the message zitadel.org.v2beta.AddOrganizationDomainResponse.
 * Use `create(AddOrganizationDomainResponseSchema)` to create a new message.
 */
export declare const AddOrganizationDomainResponseSchema: GenMessage<AddOrganizationDomainResponse, {jsonType: AddOrganizationDomainResponseJson}>;

/**
 * @generated from message zitadel.org.v2beta.ListOrganizationDomainsRequest
 */
export declare type ListOrganizationDomainsRequest = Message<"zitadel.org.v2beta.ListOrganizationDomainsRequest"> & {
  /**
   * Organization Id for the Organization which domains are to be listed.
   *
   * @generated from field: string organization_id = 1;
   */
  organizationId: string;

  /**
   * List limitations and ordering.
   *
   * @generated from field: optional zitadel.filter.v2beta.PaginationRequest pagination = 2;
   */
  pagination?: PaginationRequest;

  /**
   * Define the criteria to query for.
   *
   * @generated from field: repeated zitadel.org.v2beta.DomainSearchFilter filters = 3;
   */
  filters: DomainSearchFilter[];
};

/**
 * @generated from message zitadel.org.v2beta.ListOrganizationDomainsRequest
 */
export declare type ListOrganizationDomainsRequestJson = {
  /**
   * Organization Id for the Organization which domains are to be listed.
   *
   * @generated from field: string organization_id = 1;
   */
  organizationId?: string;

  /**
   * List limitations and ordering.
   *
   * @generated from field: optional zitadel.filter.v2beta.PaginationRequest pagination = 2;
   */
  pagination?: PaginationRequestJson;

  /**
   * Define the criteria to query for.
   *
   * @generated from field: repeated zitadel.org.v2beta.DomainSearchFilter filters = 3;
   */
  filters?: DomainSearchFilterJson[];
};

/**
 * Describes the message zitadel.org.v2beta.ListOrganizationDomainsRequest.
 * Use `create(ListOrganizationDomainsRequestSchema)` to create a new message.
 */
export declare const ListOrganizationDomainsRequestSchema: GenMessage<ListOrganizationDomainsRequest, {jsonType: ListOrganizationDomainsRequestJson}>;

/**
 * @generated from message zitadel.org.v2beta.ListOrganizationDomainsResponse
 */
export declare type ListOrganizationDomainsResponse = Message<"zitadel.org.v2beta.ListOrganizationDomainsResponse"> & {
  /**
   * Pagination of the Organizations domain results.
   *
   * @generated from field: zitadel.filter.v2beta.PaginationResponse pagination = 1;
   */
  pagination?: PaginationResponse;

  /**
   * The domains requested.
   *
   * @generated from field: repeated zitadel.org.v2beta.Domain domains = 2;
   */
  domains: Domain[];
};

/**
 * @generated from message zitadel.org.v2beta.ListOrganizationDomainsResponse
 */
export declare type ListOrganizationDomainsResponseJson = {
  /**
   * Pagination of the Organizations domain results.
   *
   * @generated from field: zitadel.filter.v2beta.PaginationResponse pagination = 1;
   */
  pagination?: PaginationResponseJson;

  /**
   * The domains requested.
   *
   * @generated from field: repeated zitadel.org.v2beta.Domain domains = 2;
   */
  domains?: DomainJson[];
};

/**
 * Describes the message zitadel.org.v2beta.ListOrganizationDomainsResponse.
 * Use `create(ListOrganizationDomainsResponseSchema)` to create a new message.
 */
export declare const ListOrganizationDomainsResponseSchema: GenMessage<ListOrganizationDomainsResponse, {jsonType: ListOrganizationDomainsResponseJson}>;

/**
 * @generated from message zitadel.org.v2beta.DeleteOrganizationDomainRequest
 */
export declare type DeleteOrganizationDomainRequest = Message<"zitadel.org.v2beta.DeleteOrganizationDomainRequest"> & {
  /**
   * Organization Id for the Organization which domain is to be deleted.
   *
   * @generated from field: string organization_id = 1;
   */
  organizationId: string;

  /**
   * @generated from field: string domain = 2;
   */
  domain: string;
};

/**
 * @generated from message zitadel.org.v2beta.DeleteOrganizationDomainRequest
 */
export declare type DeleteOrganizationDomainRequestJson = {
  /**
   * Organization Id for the Organization which domain is to be deleted.
   *
   * @generated from field: string organization_id = 1;
   */
  organizationId?: string;

  /**
   * @generated from field: string domain = 2;
   */
  domain?: string;
};

/**
 * Describes the message zitadel.org.v2beta.DeleteOrganizationDomainRequest.
 * Use `create(DeleteOrganizationDomainRequestSchema)` to create a new message.
 */
export declare const DeleteOrganizationDomainRequestSchema: GenMessage<DeleteOrganizationDomainRequest, {jsonType: DeleteOrganizationDomainRequestJson}>;

/**
 * @generated from message zitadel.org.v2beta.DeleteOrganizationDomainResponse
 */
export declare type DeleteOrganizationDomainResponse = Message<"zitadel.org.v2beta.DeleteOrganizationDomainResponse"> & {
  /**
   * The timestamp of the deletion of the organization domain.
   *
   * @generated from field: google.protobuf.Timestamp deletion_date = 1;
   */
  deletionDate?: Timestamp;
};

/**
 * @generated from message zitadel.org.v2beta.DeleteOrganizationDomainResponse
 */
export declare type DeleteOrganizationDomainResponseJson = {
  /**
   * The timestamp of the deletion of the organization domain.
   *
   * @generated from field: google.protobuf.Timestamp deletion_date = 1;
   */
  deletionDate?: TimestampJson;
};

/**
 * Describes the message zitadel.org.v2beta.DeleteOrganizationDomainResponse.
 * Use `create(DeleteOrganizationDomainResponseSchema)` to create a new message.
 */
export declare const DeleteOrganizationDomainResponseSchema: GenMessage<DeleteOrganizationDomainResponse, {jsonType: DeleteOrganizationDomainResponseJson}>;

/**
 * @generated from message zitadel.org.v2beta.GenerateOrganizationDomainValidationRequest
 */
export declare type GenerateOrganizationDomainValidationRequest = Message<"zitadel.org.v2beta.GenerateOrganizationDomainValidationRequest"> & {
  /**
   * Organization Id for the Organization which doman to be validated.
   *
   * @generated from field: string organization_id = 1;
   */
  organizationId: string;

  /**
   * The domain which to be deleted.
   *
   * @generated from field: string domain = 2;
   */
  domain: string;

  /**
   * @generated from field: zitadel.org.v2beta.DomainValidationType type = 3;
   */
  type: DomainValidationType;
};

/**
 * @generated from message zitadel.org.v2beta.GenerateOrganizationDomainValidationRequest
 */
export declare type GenerateOrganizationDomainValidationRequestJson = {
  /**
   * Organization Id for the Organization which doman to be validated.
   *
   * @generated from field: string organization_id = 1;
   */
  organizationId?: string;

  /**
   * The domain which to be deleted.
   *
   * @generated from field: string domain = 2;
   */
  domain?: string;

  /**
   * @generated from field: zitadel.org.v2beta.DomainValidationType type = 3;
   */
  type?: DomainValidationTypeJson;
};

/**
 * Describes the message zitadel.org.v2beta.GenerateOrganizationDomainValidationRequest.
 * Use `create(GenerateOrganizationDomainValidationRequestSchema)` to create a new message.
 */
export declare const GenerateOrganizationDomainValidationRequestSchema: GenMessage<GenerateOrganizationDomainValidationRequest, {jsonType: GenerateOrganizationDomainValidationRequestJson}>;

/**
 * @generated from message zitadel.org.v2beta.GenerateOrganizationDomainValidationResponse
 */
export declare type GenerateOrganizationDomainValidationResponse = Message<"zitadel.org.v2beta.GenerateOrganizationDomainValidationResponse"> & {
  /**
   * The token verify domain.
   *
   * @generated from field: string token = 1;
   */
  token: string;

  /**
   * URL used to verify the domain.
   *
   * @generated from field: string url = 2;
   */
  url: string;
};

/**
 * @generated from message zitadel.org.v2beta.GenerateOrganizationDomainValidationResponse
 */
export declare type GenerateOrganizationDomainValidationResponseJson = {
  /**
   * The token verify domain.
   *
   * @generated from field: string token = 1;
   */
  token?: string;

  /**
   * URL used to verify the domain.
   *
   * @generated from field: string url = 2;
   */
  url?: string;
};

/**
 * Describes the message zitadel.org.v2beta.GenerateOrganizationDomainValidationResponse.
 * Use `create(GenerateOrganizationDomainValidationResponseSchema)` to create a new message.
 */
export declare const GenerateOrganizationDomainValidationResponseSchema: GenMessage<GenerateOrganizationDomainValidationResponse, {jsonType: GenerateOrganizationDomainValidationResponseJson}>;

/**
 * @generated from message zitadel.org.v2beta.VerifyOrganizationDomainRequest
 */
export declare type VerifyOrganizationDomainRequest = Message<"zitadel.org.v2beta.VerifyOrganizationDomainRequest"> & {
  /**
   * Organization Id for the Organization doman to be verified.
   *
   * @generated from field: string organization_id = 1;
   */
  organizationId: string;

  /**
   * Organization Id for the Organization doman to be verified.
   *
   * @generated from field: string domain = 2;
   */
  domain: string;
};

/**
 * @generated from message zitadel.org.v2beta.VerifyOrganizationDomainRequest
 */
export declare type VerifyOrganizationDomainRequestJson = {
  /**
   * Organization Id for the Organization doman to be verified.
   *
   * @generated from field: string organization_id = 1;
   */
  organizationId?: string;

  /**
   * Organization Id for the Organization doman to be verified.
   *
   * @generated from field: string domain = 2;
   */
  domain?: string;
};

/**
 * Describes the message zitadel.org.v2beta.VerifyOrganizationDomainRequest.
 * Use `create(VerifyOrganizationDomainRequestSchema)` to create a new message.
 */
export declare const VerifyOrganizationDomainRequestSchema: GenMessage<VerifyOrganizationDomainRequest, {jsonType: VerifyOrganizationDomainRequestJson}>;

/**
 * @generated from message zitadel.org.v2beta.VerifyOrganizationDomainResponse
 */
export declare type VerifyOrganizationDomainResponse = Message<"zitadel.org.v2beta.VerifyOrganizationDomainResponse"> & {
  /**
   * The timestamp of the verification of the organization domain.
   *
   * @generated from field: google.protobuf.Timestamp change_date = 1;
   */
  changeDate?: Timestamp;
};

/**
 * @generated from message zitadel.org.v2beta.VerifyOrganizationDomainResponse
 */
export declare type VerifyOrganizationDomainResponseJson = {
  /**
   * The timestamp of the verification of the organization domain.
   *
   * @generated from field: google.protobuf.Timestamp change_date = 1;
   */
  changeDate?: TimestampJson;
};

/**
 * Describes the message zitadel.org.v2beta.VerifyOrganizationDomainResponse.
 * Use `create(VerifyOrganizationDomainResponseSchema)` to create a new message.
 */
export declare const VerifyOrganizationDomainResponseSchema: GenMessage<VerifyOrganizationDomainResponse, {jsonType: VerifyOrganizationDomainResponseJson}>;

/**
 * @generated from message zitadel.org.v2beta.Metadata
 */
export declare type Metadata = Message<"zitadel.org.v2beta.Metadata"> & {
  /**
   * Key in the metadata key/value pair.
   *
   * @generated from field: string key = 1;
   */
  key: string;

  /**
   * Value in the metadata key/value pair.
   *
   * @generated from field: bytes value = 2;
   */
  value: Uint8Array;
};

/**
 * @generated from message zitadel.org.v2beta.Metadata
 */
export declare type MetadataJson = {
  /**
   * Key in the metadata key/value pair.
   *
   * @generated from field: string key = 1;
   */
  key?: string;

  /**
   * Value in the metadata key/value pair.
   *
   * @generated from field: bytes value = 2;
   */
  value?: string;
};

/**
 * Describes the message zitadel.org.v2beta.Metadata.
 * Use `create(MetadataSchema)` to create a new message.
 */
export declare const MetadataSchema: GenMessage<Metadata, {jsonType: MetadataJson}>;

/**
 * @generated from message zitadel.org.v2beta.SetOrganizationMetadataRequest
 */
export declare type SetOrganizationMetadataRequest = Message<"zitadel.org.v2beta.SetOrganizationMetadataRequest"> & {
  /**
   * Organization Id for the Organization doman to be verified.
   *
   * @generated from field: string organization_id = 1;
   */
  organizationId: string;

  /**
   * Metadata to set.
   *
   * @generated from field: repeated zitadel.org.v2beta.Metadata metadata = 2;
   */
  metadata: Metadata[];
};

/**
 * @generated from message zitadel.org.v2beta.SetOrganizationMetadataRequest
 */
export declare type SetOrganizationMetadataRequestJson = {
  /**
   * Organization Id for the Organization doman to be verified.
   *
   * @generated from field: string organization_id = 1;
   */
  organizationId?: string;

  /**
   * Metadata to set.
   *
   * @generated from field: repeated zitadel.org.v2beta.Metadata metadata = 2;
   */
  metadata?: MetadataJson[];
};

/**
 * Describes the message zitadel.org.v2beta.SetOrganizationMetadataRequest.
 * Use `create(SetOrganizationMetadataRequestSchema)` to create a new message.
 */
export declare const SetOrganizationMetadataRequestSchema: GenMessage<SetOrganizationMetadataRequest, {jsonType: SetOrganizationMetadataRequestJson}>;

/**
 * @generated from message zitadel.org.v2beta.SetOrganizationMetadataResponse
 */
export declare type SetOrganizationMetadataResponse = Message<"zitadel.org.v2beta.SetOrganizationMetadataResponse"> & {
  /**
   * The timestamp of the update of the organization metadata.
   *
   * @generated from field: google.protobuf.Timestamp set_date = 1;
   */
  setDate?: Timestamp;
};

/**
 * @generated from message zitadel.org.v2beta.SetOrganizationMetadataResponse
 */
export declare type SetOrganizationMetadataResponseJson = {
  /**
   * The timestamp of the update of the organization metadata.
   *
   * @generated from field: google.protobuf.Timestamp set_date = 1;
   */
  setDate?: TimestampJson;
};

/**
 * Describes the message zitadel.org.v2beta.SetOrganizationMetadataResponse.
 * Use `create(SetOrganizationMetadataResponseSchema)` to create a new message.
 */
export declare const SetOrganizationMetadataResponseSchema: GenMessage<SetOrganizationMetadataResponse, {jsonType: SetOrganizationMetadataResponseJson}>;

/**
 * @generated from message zitadel.org.v2beta.ListOrganizationMetadataRequest
 */
export declare type ListOrganizationMetadataRequest = Message<"zitadel.org.v2beta.ListOrganizationMetadataRequest"> & {
  /**
   * Organization ID of Orgalization which metadata is to be listed.
   *
   * @generated from field: string organization_id = 1;
   */
  organizationId: string;

  /**
   * List limitations and ordering.
   *
   * @generated from field: optional zitadel.filter.v2beta.PaginationRequest pagination = 2;
   */
  pagination?: PaginationRequest;

  /**
   * Define the criteria to query for.
   *
   * @generated from field: repeated zitadel.metadata.v2beta.MetadataQuery filter = 3;
   */
  filter: MetadataQuery[];
};

/**
 * @generated from message zitadel.org.v2beta.ListOrganizationMetadataRequest
 */
export declare type ListOrganizationMetadataRequestJson = {
  /**
   * Organization ID of Orgalization which metadata is to be listed.
   *
   * @generated from field: string organization_id = 1;
   */
  organizationId?: string;

  /**
   * List limitations and ordering.
   *
   * @generated from field: optional zitadel.filter.v2beta.PaginationRequest pagination = 2;
   */
  pagination?: PaginationRequestJson;

  /**
   * Define the criteria to query for.
   *
   * @generated from field: repeated zitadel.metadata.v2beta.MetadataQuery filter = 3;
   */
  filter?: MetadataQueryJson[];
};

/**
 * Describes the message zitadel.org.v2beta.ListOrganizationMetadataRequest.
 * Use `create(ListOrganizationMetadataRequestSchema)` to create a new message.
 */
export declare const ListOrganizationMetadataRequestSchema: GenMessage<ListOrganizationMetadataRequest, {jsonType: ListOrganizationMetadataRequestJson}>;

/**
 * @generated from message zitadel.org.v2beta.ListOrganizationMetadataResponse
 */
export declare type ListOrganizationMetadataResponse = Message<"zitadel.org.v2beta.ListOrganizationMetadataResponse"> & {
  /**
   * Pagination of the Organizations metadata results.
   *
   * @generated from field: zitadel.filter.v2beta.PaginationResponse pagination = 1;
   */
  pagination?: PaginationResponse;

  /**
   * The Organization metadata requested.
   *
   * @generated from field: repeated zitadel.metadata.v2beta.Metadata metadata = 2;
   */
  metadata: Metadata$1[];
};

/**
 * @generated from message zitadel.org.v2beta.ListOrganizationMetadataResponse
 */
export declare type ListOrganizationMetadataResponseJson = {
  /**
   * Pagination of the Organizations metadata results.
   *
   * @generated from field: zitadel.filter.v2beta.PaginationResponse pagination = 1;
   */
  pagination?: PaginationResponseJson;

  /**
   * The Organization metadata requested.
   *
   * @generated from field: repeated zitadel.metadata.v2beta.Metadata metadata = 2;
   */
  metadata?: MetadataJson$1[];
};

/**
 * Describes the message zitadel.org.v2beta.ListOrganizationMetadataResponse.
 * Use `create(ListOrganizationMetadataResponseSchema)` to create a new message.
 */
export declare const ListOrganizationMetadataResponseSchema: GenMessage<ListOrganizationMetadataResponse, {jsonType: ListOrganizationMetadataResponseJson}>;

/**
 * @generated from message zitadel.org.v2beta.DeleteOrganizationMetadataRequest
 */
export declare type DeleteOrganizationMetadataRequest = Message<"zitadel.org.v2beta.DeleteOrganizationMetadataRequest"> & {
  /**
   * Organization ID of Orgalization which metadata is to be deleted is stored on.
   *
   * @generated from field: string organization_id = 1;
   */
  organizationId: string;

  /**
   * The keys for the Organization metadata to be deleted.
   *
   * @generated from field: repeated string keys = 2;
   */
  keys: string[];
};

/**
 * @generated from message zitadel.org.v2beta.DeleteOrganizationMetadataRequest
 */
export declare type DeleteOrganizationMetadataRequestJson = {
  /**
   * Organization ID of Orgalization which metadata is to be deleted is stored on.
   *
   * @generated from field: string organization_id = 1;
   */
  organizationId?: string;

  /**
   * The keys for the Organization metadata to be deleted.
   *
   * @generated from field: repeated string keys = 2;
   */
  keys?: string[];
};

/**
 * Describes the message zitadel.org.v2beta.DeleteOrganizationMetadataRequest.
 * Use `create(DeleteOrganizationMetadataRequestSchema)` to create a new message.
 */
export declare const DeleteOrganizationMetadataRequestSchema: GenMessage<DeleteOrganizationMetadataRequest, {jsonType: DeleteOrganizationMetadataRequestJson}>;

/**
 * @generated from message zitadel.org.v2beta.DeleteOrganizationMetadataResponse
 */
export declare type DeleteOrganizationMetadataResponse = Message<"zitadel.org.v2beta.DeleteOrganizationMetadataResponse"> & {
  /**
   * The timestamp of the deletiion of the organization metadata.
   *
   * @generated from field: google.protobuf.Timestamp deletion_date = 1;
   */
  deletionDate?: Timestamp;
};

/**
 * @generated from message zitadel.org.v2beta.DeleteOrganizationMetadataResponse
 */
export declare type DeleteOrganizationMetadataResponseJson = {
  /**
   * The timestamp of the deletiion of the organization metadata.
   *
   * @generated from field: google.protobuf.Timestamp deletion_date = 1;
   */
  deletionDate?: TimestampJson;
};

/**
 * Describes the message zitadel.org.v2beta.DeleteOrganizationMetadataResponse.
 * Use `create(DeleteOrganizationMetadataResponseSchema)` to create a new message.
 */
export declare const DeleteOrganizationMetadataResponseSchema: GenMessage<DeleteOrganizationMetadataResponse, {jsonType: DeleteOrganizationMetadataResponseJson}>;

/**
 * @generated from service zitadel.org.v2beta.OrganizationService
 */
export declare const OrganizationService: GenService<{
  /**
   * Create Organization
   *
   * Create a new organization with an administrative user. If no specific roles are sent for the users, they will be granted the role ORG_OWNER.
   *
   * Required permission:
   *  - `org.create`
   *
   * @generated from rpc zitadel.org.v2beta.OrganizationService.CreateOrganization
   */
  createOrganization: {
    methodKind: "unary";
    input: typeof CreateOrganizationRequestSchema;
    output: typeof CreateOrganizationResponseSchema;
  },
  /**
   * Update Organization
   *
   * Change the name of the organization.
   *
   * Required permission:
   *  - `org.write`
   *
   * @generated from rpc zitadel.org.v2beta.OrganizationService.UpdateOrganization
   */
  updateOrganization: {
    methodKind: "unary";
    input: typeof UpdateOrganizationRequestSchema;
    output: typeof UpdateOrganizationResponseSchema;
  },
  /**
   * List Organizations
   *
   * Returns a list of organizations that match the requesting filters. All filters are applied with an AND condition.
   *
   * Required permission:
   *  - `iam.read`
   *
   * @generated from rpc zitadel.org.v2beta.OrganizationService.ListOrganizations
   */
  listOrganizations: {
    methodKind: "unary";
    input: typeof ListOrganizationsRequestSchema;
    output: typeof ListOrganizationsResponseSchema;
  },
  /**
   * Delete Organization
   *
   * Deletes the organization and all its resources (Users, Projects, Grants to and from the org). Users of this organization will not be able to log in.
   *
   * Required permission:
   *  - `org.delete`
   *
   * @generated from rpc zitadel.org.v2beta.OrganizationService.DeleteOrganization
   */
  deleteOrganization: {
    methodKind: "unary";
    input: typeof DeleteOrganizationRequestSchema;
    output: typeof DeleteOrganizationResponseSchema;
  },
  /**
   * Set Organization Metadata
   *
   * Adds or updates a metadata value for the requested key. Make sure the value is base64 encoded.
   *
   * Required permission:
   *  - `org.write`
   *
   * @generated from rpc zitadel.org.v2beta.OrganizationService.SetOrganizationMetadata
   */
  setOrganizationMetadata: {
    methodKind: "unary";
    input: typeof SetOrganizationMetadataRequestSchema;
    output: typeof SetOrganizationMetadataResponseSchema;
  },
  /**
   * List Organization Metadata
   *
   * List metadata of an organization filtered by query.
   *
   * Required permission:
   *  - `org.read`
   *
   * @generated from rpc zitadel.org.v2beta.OrganizationService.ListOrganizationMetadata
   */
  listOrganizationMetadata: {
    methodKind: "unary";
    input: typeof ListOrganizationMetadataRequestSchema;
    output: typeof ListOrganizationMetadataResponseSchema;
  },
  /**
   * Delete Organization Metadata
   *
   * Delete metadata objects from an organization with a specific key.
   *
   * Required permission:
   *  - `org.write`
   *
   * @generated from rpc zitadel.org.v2beta.OrganizationService.DeleteOrganizationMetadata
   */
  deleteOrganizationMetadata: {
    methodKind: "unary";
    input: typeof DeleteOrganizationMetadataRequestSchema;
    output: typeof DeleteOrganizationMetadataResponseSchema;
  },
  /**
   * Add Organization Domain
   *
   * Add a new domain to an organization. The domains are used to identify to which organization a user belongs.
   *
   * Required permission:
   *  - `org.write`
   *
   * @generated from rpc zitadel.org.v2beta.OrganizationService.AddOrganizationDomain
   */
  addOrganizationDomain: {
    methodKind: "unary";
    input: typeof AddOrganizationDomainRequestSchema;
    output: typeof AddOrganizationDomainResponseSchema;
  },
  /**
   * List Organization Domains
   *
   * Returns the list of registered domains of an organization. The domains are used to identify to which organization a user belongs. 
   *
   * Required permission:
   *  - `org.read`
   *
   * @generated from rpc zitadel.org.v2beta.OrganizationService.ListOrganizationDomains
   */
  listOrganizationDomains: {
    methodKind: "unary";
    input: typeof ListOrganizationDomainsRequestSchema;
    output: typeof ListOrganizationDomainsResponseSchema;
  },
  /**
   * Delete Organization Domain
   *
   * Delete a new domain from an organization. The domains are used to identify to which organization a user belongs. If the uses use the domain for login, this will not be possible afterwards. They have to use another domain instead.
   *
   * Required permission:
   *  - `org.write`
   *
   * @generated from rpc zitadel.org.v2beta.OrganizationService.DeleteOrganizationDomain
   */
  deleteOrganizationDomain: {
    methodKind: "unary";
    input: typeof DeleteOrganizationDomainRequestSchema;
    output: typeof DeleteOrganizationDomainResponseSchema;
  },
  /**
   * Generate Organization Domain Validation
   *
   * Generate a new file to be able to verify your domain with DNS or HTTP challenge.
   *
   * Required permission:
   *  - `org.write`
   *
   * @generated from rpc zitadel.org.v2beta.OrganizationService.GenerateOrganizationDomainValidation
   */
  generateOrganizationDomainValidation: {
    methodKind: "unary";
    input: typeof GenerateOrganizationDomainValidationRequestSchema;
    output: typeof GenerateOrganizationDomainValidationResponseSchema;
  },
  /**
   * Verify Organization Domain
   *
   * Make sure you have added the required verification to your domain, depending on the method you have chosen (HTTP or DNS challenge). ZITADEL will check it and set the domain as verified if it was successful. A verify domain has to be unique.
   *
   * Required permission:
   *  - `org.write`
   *
   * @generated from rpc zitadel.org.v2beta.OrganizationService.VerifyOrganizationDomain
   */
  verifyOrganizationDomain: {
    methodKind: "unary";
    input: typeof VerifyOrganizationDomainRequestSchema;
    output: typeof VerifyOrganizationDomainResponseSchema;
  },
  /**
   * Deactivate Organization
   *
   * Sets the state of my organization to deactivated. Users of this organization will not be able to log in.
   *
   * Required permission:
   *  - `org.write`
   *
   * @generated from rpc zitadel.org.v2beta.OrganizationService.DeactivateOrganization
   */
  deactivateOrganization: {
    methodKind: "unary";
    input: typeof DeactivateOrganizationRequestSchema;
    output: typeof DeactivateOrganizationResponseSchema;
  },
  /**
   * Activate Organization
   *
   * Set the state of my organization to active. The state of the organization has to be deactivated to perform the request. Users of this organization will be able to log in again.
   *
   * Required permission:
   *  - `org.write`
   *
   * @generated from rpc zitadel.org.v2beta.OrganizationService.ActivateOrganization
   */
  activateOrganization: {
    methodKind: "unary";
    input: typeof ActivateOrganizationRequestSchema;
    output: typeof ActivateOrganizationResponseSchema;
  },
}>;

