// @generated by protoc-gen-es v2.6.0 with parameter "json_types=true,import_extension=js"
// @generated from file zitadel/policy.proto (package zitadel.policy.v1, syntax proto3)
/* eslint-disable */

import { enumDesc, fileDesc, messageDesc, tsEnum } from "@bufbuild/protobuf/codegenv2";
import { file_zitadel_object } from "./object_pb.js";
import { file_zitadel_idp } from "./idp_pb.js";
import { file_google_protobuf_duration } from "@bufbuild/protobuf/wkt";
import { file_protoc_gen_openapiv2_options_annotations } from "../protoc-gen-openapiv2/options/annotations_pb.js";
import { file_validate_validate } from "../validate/validate_pb.js";

/**
 * Describes the file zitadel/policy.proto.
 */
export const file_zitadel_policy = /*@__PURE__*/
  fileDesc("", [file_zitadel_object, file_zitadel_idp, file_google_protobuf_duration, file_protoc_gen_openapiv2_options_annotations, file_validate_validate]);

/**
 * Describes the message zitadel.policy.v1.OrgIAMPolicy.
 * Use `create(OrgIAMPolicySchema)` to create a new message.
 */
export const OrgIAMPolicySchema = /*@__PURE__*/
  messageDesc(file_zitadel_policy, 0);

/**
 * Describes the message zitadel.policy.v1.DomainPolicy.
 * Use `create(DomainPolicySchema)` to create a new message.
 */
export const DomainPolicySchema = /*@__PURE__*/
  messageDesc(file_zitadel_policy, 1);

/**
 * Describes the message zitadel.policy.v1.LabelPolicy.
 * Use `create(LabelPolicySchema)` to create a new message.
 */
export const LabelPolicySchema = /*@__PURE__*/
  messageDesc(file_zitadel_policy, 2);

/**
 * Describes the message zitadel.policy.v1.LoginPolicy.
 * Use `create(LoginPolicySchema)` to create a new message.
 */
export const LoginPolicySchema = /*@__PURE__*/
  messageDesc(file_zitadel_policy, 3);

/**
 * Describes the message zitadel.policy.v1.PasswordComplexityPolicy.
 * Use `create(PasswordComplexityPolicySchema)` to create a new message.
 */
export const PasswordComplexityPolicySchema = /*@__PURE__*/
  messageDesc(file_zitadel_policy, 4);

/**
 * Describes the message zitadel.policy.v1.PasswordAgePolicy.
 * Use `create(PasswordAgePolicySchema)` to create a new message.
 */
export const PasswordAgePolicySchema = /*@__PURE__*/
  messageDesc(file_zitadel_policy, 5);

/**
 * Describes the message zitadel.policy.v1.LockoutPolicy.
 * Use `create(LockoutPolicySchema)` to create a new message.
 */
export const LockoutPolicySchema = /*@__PURE__*/
  messageDesc(file_zitadel_policy, 6);

/**
 * Describes the message zitadel.policy.v1.PrivacyPolicy.
 * Use `create(PrivacyPolicySchema)` to create a new message.
 */
export const PrivacyPolicySchema = /*@__PURE__*/
  messageDesc(file_zitadel_policy, 7);

/**
 * Describes the message zitadel.policy.v1.NotificationPolicy.
 * Use `create(NotificationPolicySchema)` to create a new message.
 */
export const NotificationPolicySchema = /*@__PURE__*/
  messageDesc(file_zitadel_policy, 8);

/**
 * Describes the enum zitadel.policy.v1.ThemeMode.
 */
export const ThemeModeSchema = /*@__PURE__*/
  enumDesc(file_zitadel_policy, 0);

/**
 * @generated from enum zitadel.policy.v1.ThemeMode
 */
export const ThemeMode = /*@__PURE__*/
  tsEnum(ThemeModeSchema);

/**
 * Describes the enum zitadel.policy.v1.SecondFactorType.
 */
export const SecondFactorTypeSchema = /*@__PURE__*/
  enumDesc(file_zitadel_policy, 1);

/**
 * @generated from enum zitadel.policy.v1.SecondFactorType
 */
export const SecondFactorType = /*@__PURE__*/
  tsEnum(SecondFactorTypeSchema);

/**
 * Describes the enum zitadel.policy.v1.MultiFactorType.
 */
export const MultiFactorTypeSchema = /*@__PURE__*/
  enumDesc(file_zitadel_policy, 2);

/**
 * @generated from enum zitadel.policy.v1.MultiFactorType
 */
export const MultiFactorType = /*@__PURE__*/
  tsEnum(MultiFactorTypeSchema);

/**
 * Describes the enum zitadel.policy.v1.PasswordlessType.
 */
export const PasswordlessTypeSchema = /*@__PURE__*/
  enumDesc(file_zitadel_policy, 3);

/**
 * @generated from enum zitadel.policy.v1.PasswordlessType
 */
export const PasswordlessType = /*@__PURE__*/
  tsEnum(PasswordlessTypeSchema);

