// @generated by protoc-gen-es v2.6.0 with parameter "json_types=true,import_extension=js"
// @generated from file zitadel/project/v2beta/project_service.proto (package zitadel.project.v2beta, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import type { Message } from "@bufbuild/protobuf";
import type { PrivateLabelingSetting, PrivateLabelingSettingJson, Project, ProjectFieldName, ProjectFieldNameJson, ProjectGrant, ProjectGrantFieldName, ProjectGrantFieldNameJson, ProjectGrantJson, ProjectGrantSearchFilter, ProjectGrantSearchFilterJson, ProjectJson, ProjectRole, ProjectRoleFieldName, ProjectRoleFieldNameJson, ProjectRoleJson, ProjectRoleSearchFilter, ProjectRoleSearchFilterJson, ProjectSearchFilter, ProjectSearchFilterJson } from "./query_pb.js";
import type { Timestamp, TimestampJson } from "@bufbuild/protobuf/wkt";
import type { PaginationRequest, PaginationRequestJson, PaginationResponse, PaginationResponseJson } from "../../filter/v2beta/filter_pb.js";

/**
 * Describes the file zitadel/project/v2beta/project_service.proto.
 */
export declare const file_zitadel_project_v2beta_project_service: GenFile;

/**
 * @generated from message zitadel.project.v2beta.CreateProjectRequest
 */
export declare type CreateProjectRequest = Message<"zitadel.project.v2beta.CreateProjectRequest"> & {
  /**
   * The unique identifier of the organization the project belongs to.
   *
   * @generated from field: string organization_id = 1;
   */
  organizationId: string;

  /**
   * The unique identifier of the project.
   *
   * @generated from field: optional string id = 2;
   */
  id?: string;

  /**
   * Name of the project.
   *
   * @generated from field: string name = 3;
   */
  name: string;

  /**
   * Enable this setting to have role information included in the user info endpoint. It is also dependent on your application settings to include it in tokens and other types.
   *
   * @generated from field: bool project_role_assertion = 4;
   */
  projectRoleAssertion: boolean;

  /**
   * When enabled ZITADEL will check if a user has an authorization to use this project assigned when login into an application of this project.
   *
   * @generated from field: bool authorization_required = 5;
   */
  authorizationRequired: boolean;

  /**
   * When enabled ZITADEL will check if the organization of the user, that is trying to log in, has access to this project (either owns the project or is granted).
   *
   * @generated from field: bool project_access_required = 6;
   */
  projectAccessRequired: boolean;

  /**
   * Define which private labeling/branding should trigger when getting to a login of this project.
   *
   * @generated from field: zitadel.project.v2beta.PrivateLabelingSetting private_labeling_setting = 7;
   */
  privateLabelingSetting: PrivateLabelingSetting;
};

/**
 * @generated from message zitadel.project.v2beta.CreateProjectRequest
 */
export declare type CreateProjectRequestJson = {
  /**
   * The unique identifier of the organization the project belongs to.
   *
   * @generated from field: string organization_id = 1;
   */
  organizationId?: string;

  /**
   * The unique identifier of the project.
   *
   * @generated from field: optional string id = 2;
   */
  id?: string;

  /**
   * Name of the project.
   *
   * @generated from field: string name = 3;
   */
  name?: string;

  /**
   * Enable this setting to have role information included in the user info endpoint. It is also dependent on your application settings to include it in tokens and other types.
   *
   * @generated from field: bool project_role_assertion = 4;
   */
  projectRoleAssertion?: boolean;

  /**
   * When enabled ZITADEL will check if a user has an authorization to use this project assigned when login into an application of this project.
   *
   * @generated from field: bool authorization_required = 5;
   */
  authorizationRequired?: boolean;

  /**
   * When enabled ZITADEL will check if the organization of the user, that is trying to log in, has access to this project (either owns the project or is granted).
   *
   * @generated from field: bool project_access_required = 6;
   */
  projectAccessRequired?: boolean;

  /**
   * Define which private labeling/branding should trigger when getting to a login of this project.
   *
   * @generated from field: zitadel.project.v2beta.PrivateLabelingSetting private_labeling_setting = 7;
   */
  privateLabelingSetting?: PrivateLabelingSettingJson;
};

/**
 * Describes the message zitadel.project.v2beta.CreateProjectRequest.
 * Use `create(CreateProjectRequestSchema)` to create a new message.
 */
export declare const CreateProjectRequestSchema: GenMessage<CreateProjectRequest, {jsonType: CreateProjectRequestJson}>;

/**
 * @generated from message zitadel.project.v2beta.CreateProjectResponse
 */
export declare type CreateProjectResponse = Message<"zitadel.project.v2beta.CreateProjectResponse"> & {
  /**
   * The unique identifier of the newly created project.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * The timestamp of the project creation.
   *
   * @generated from field: google.protobuf.Timestamp creation_date = 2;
   */
  creationDate?: Timestamp;
};

/**
 * @generated from message zitadel.project.v2beta.CreateProjectResponse
 */
export declare type CreateProjectResponseJson = {
  /**
   * The unique identifier of the newly created project.
   *
   * @generated from field: string id = 1;
   */
  id?: string;

  /**
   * The timestamp of the project creation.
   *
   * @generated from field: google.protobuf.Timestamp creation_date = 2;
   */
  creationDate?: TimestampJson;
};

/**
 * Describes the message zitadel.project.v2beta.CreateProjectResponse.
 * Use `create(CreateProjectResponseSchema)` to create a new message.
 */
export declare const CreateProjectResponseSchema: GenMessage<CreateProjectResponse, {jsonType: CreateProjectResponseJson}>;

/**
 * @generated from message zitadel.project.v2beta.UpdateProjectRequest
 */
export declare type UpdateProjectRequest = Message<"zitadel.project.v2beta.UpdateProjectRequest"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * Name of the project.
   *
   * @generated from field: optional string name = 2;
   */
  name?: string;

  /**
   * Enable this setting to have role information included in the user info endpoint. It is also dependent on your application settings to include it in tokens and other types.
   *
   * @generated from field: optional bool project_role_assertion = 3;
   */
  projectRoleAssertion?: boolean;

  /**
   * When enabled ZITADEL will check if a user has a role of this project assigned when login into an application of this project.
   *
   * @generated from field: optional bool project_role_check = 4;
   */
  projectRoleCheck?: boolean;

  /**
   * When enabled ZITADEL will check if the organization of the user, that is trying to log in, has a grant to this project.
   *
   * @generated from field: optional bool has_project_check = 5;
   */
  hasProjectCheck?: boolean;

  /**
   * Define which private labeling/branding should trigger when getting to a login of this project.
   *
   * @generated from field: optional zitadel.project.v2beta.PrivateLabelingSetting private_labeling_setting = 6;
   */
  privateLabelingSetting?: PrivateLabelingSetting;
};

/**
 * @generated from message zitadel.project.v2beta.UpdateProjectRequest
 */
export declare type UpdateProjectRequestJson = {
  /**
   * @generated from field: string id = 1;
   */
  id?: string;

  /**
   * Name of the project.
   *
   * @generated from field: optional string name = 2;
   */
  name?: string;

  /**
   * Enable this setting to have role information included in the user info endpoint. It is also dependent on your application settings to include it in tokens and other types.
   *
   * @generated from field: optional bool project_role_assertion = 3;
   */
  projectRoleAssertion?: boolean;

  /**
   * When enabled ZITADEL will check if a user has a role of this project assigned when login into an application of this project.
   *
   * @generated from field: optional bool project_role_check = 4;
   */
  projectRoleCheck?: boolean;

  /**
   * When enabled ZITADEL will check if the organization of the user, that is trying to log in, has a grant to this project.
   *
   * @generated from field: optional bool has_project_check = 5;
   */
  hasProjectCheck?: boolean;

  /**
   * Define which private labeling/branding should trigger when getting to a login of this project.
   *
   * @generated from field: optional zitadel.project.v2beta.PrivateLabelingSetting private_labeling_setting = 6;
   */
  privateLabelingSetting?: PrivateLabelingSettingJson;
};

/**
 * Describes the message zitadel.project.v2beta.UpdateProjectRequest.
 * Use `create(UpdateProjectRequestSchema)` to create a new message.
 */
export declare const UpdateProjectRequestSchema: GenMessage<UpdateProjectRequest, {jsonType: UpdateProjectRequestJson}>;

/**
 * @generated from message zitadel.project.v2beta.UpdateProjectResponse
 */
export declare type UpdateProjectResponse = Message<"zitadel.project.v2beta.UpdateProjectResponse"> & {
  /**
   * The timestamp of the change of the project.
   *
   * @generated from field: google.protobuf.Timestamp change_date = 1;
   */
  changeDate?: Timestamp;
};

/**
 * @generated from message zitadel.project.v2beta.UpdateProjectResponse
 */
export declare type UpdateProjectResponseJson = {
  /**
   * The timestamp of the change of the project.
   *
   * @generated from field: google.protobuf.Timestamp change_date = 1;
   */
  changeDate?: TimestampJson;
};

/**
 * Describes the message zitadel.project.v2beta.UpdateProjectResponse.
 * Use `create(UpdateProjectResponseSchema)` to create a new message.
 */
export declare const UpdateProjectResponseSchema: GenMessage<UpdateProjectResponse, {jsonType: UpdateProjectResponseJson}>;

/**
 * @generated from message zitadel.project.v2beta.DeleteProjectRequest
 */
export declare type DeleteProjectRequest = Message<"zitadel.project.v2beta.DeleteProjectRequest"> & {
  /**
   * The unique identifier of the project.
   *
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * @generated from message zitadel.project.v2beta.DeleteProjectRequest
 */
export declare type DeleteProjectRequestJson = {
  /**
   * The unique identifier of the project.
   *
   * @generated from field: string id = 1;
   */
  id?: string;
};

/**
 * Describes the message zitadel.project.v2beta.DeleteProjectRequest.
 * Use `create(DeleteProjectRequestSchema)` to create a new message.
 */
export declare const DeleteProjectRequestSchema: GenMessage<DeleteProjectRequest, {jsonType: DeleteProjectRequestJson}>;

/**
 * @generated from message zitadel.project.v2beta.DeleteProjectResponse
 */
export declare type DeleteProjectResponse = Message<"zitadel.project.v2beta.DeleteProjectResponse"> & {
  /**
   * The timestamp of the deletion of the project.
   * Note that the deletion date is only guaranteed to be set if the deletion was successful during the request.
   * In case the deletion occurred in a previous request, the deletion date might be empty.
   *
   * @generated from field: google.protobuf.Timestamp deletion_date = 3;
   */
  deletionDate?: Timestamp;
};

/**
 * @generated from message zitadel.project.v2beta.DeleteProjectResponse
 */
export declare type DeleteProjectResponseJson = {
  /**
   * The timestamp of the deletion of the project.
   * Note that the deletion date is only guaranteed to be set if the deletion was successful during the request.
   * In case the deletion occurred in a previous request, the deletion date might be empty.
   *
   * @generated from field: google.protobuf.Timestamp deletion_date = 3;
   */
  deletionDate?: TimestampJson;
};

/**
 * Describes the message zitadel.project.v2beta.DeleteProjectResponse.
 * Use `create(DeleteProjectResponseSchema)` to create a new message.
 */
export declare const DeleteProjectResponseSchema: GenMessage<DeleteProjectResponse, {jsonType: DeleteProjectResponseJson}>;

/**
 * @generated from message zitadel.project.v2beta.GetProjectRequest
 */
export declare type GetProjectRequest = Message<"zitadel.project.v2beta.GetProjectRequest"> & {
  /**
   * The unique identifier of the project.
   *
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * @generated from message zitadel.project.v2beta.GetProjectRequest
 */
export declare type GetProjectRequestJson = {
  /**
   * The unique identifier of the project.
   *
   * @generated from field: string id = 1;
   */
  id?: string;
};

/**
 * Describes the message zitadel.project.v2beta.GetProjectRequest.
 * Use `create(GetProjectRequestSchema)` to create a new message.
 */
export declare const GetProjectRequestSchema: GenMessage<GetProjectRequest, {jsonType: GetProjectRequestJson}>;

/**
 * @generated from message zitadel.project.v2beta.GetProjectResponse
 */
export declare type GetProjectResponse = Message<"zitadel.project.v2beta.GetProjectResponse"> & {
  /**
   * @generated from field: zitadel.project.v2beta.Project project = 1;
   */
  project?: Project;
};

/**
 * @generated from message zitadel.project.v2beta.GetProjectResponse
 */
export declare type GetProjectResponseJson = {
  /**
   * @generated from field: zitadel.project.v2beta.Project project = 1;
   */
  project?: ProjectJson;
};

/**
 * Describes the message zitadel.project.v2beta.GetProjectResponse.
 * Use `create(GetProjectResponseSchema)` to create a new message.
 */
export declare const GetProjectResponseSchema: GenMessage<GetProjectResponse, {jsonType: GetProjectResponseJson}>;

/**
 * @generated from message zitadel.project.v2beta.ListProjectsRequest
 */
export declare type ListProjectsRequest = Message<"zitadel.project.v2beta.ListProjectsRequest"> & {
  /**
   * List limitations and ordering.
   *
   * @generated from field: optional zitadel.filter.v2beta.PaginationRequest pagination = 1;
   */
  pagination?: PaginationRequest;

  /**
   * The field the result is sorted by. The default is the creation date. Beware that if you change this, your result pagination might be inconsistent.
   *
   * @generated from field: optional zitadel.project.v2beta.ProjectFieldName sorting_column = 2;
   */
  sortingColumn?: ProjectFieldName;

  /**
   * Define the criteria to query for.
   *
   * @generated from field: repeated zitadel.project.v2beta.ProjectSearchFilter filters = 3;
   */
  filters: ProjectSearchFilter[];
};

/**
 * @generated from message zitadel.project.v2beta.ListProjectsRequest
 */
export declare type ListProjectsRequestJson = {
  /**
   * List limitations and ordering.
   *
   * @generated from field: optional zitadel.filter.v2beta.PaginationRequest pagination = 1;
   */
  pagination?: PaginationRequestJson;

  /**
   * The field the result is sorted by. The default is the creation date. Beware that if you change this, your result pagination might be inconsistent.
   *
   * @generated from field: optional zitadel.project.v2beta.ProjectFieldName sorting_column = 2;
   */
  sortingColumn?: ProjectFieldNameJson;

  /**
   * Define the criteria to query for.
   *
   * @generated from field: repeated zitadel.project.v2beta.ProjectSearchFilter filters = 3;
   */
  filters?: ProjectSearchFilterJson[];
};

/**
 * Describes the message zitadel.project.v2beta.ListProjectsRequest.
 * Use `create(ListProjectsRequestSchema)` to create a new message.
 */
export declare const ListProjectsRequestSchema: GenMessage<ListProjectsRequest, {jsonType: ListProjectsRequestJson}>;

/**
 * @generated from message zitadel.project.v2beta.ListProjectsResponse
 */
export declare type ListProjectsResponse = Message<"zitadel.project.v2beta.ListProjectsResponse"> & {
  /**
   * @generated from field: zitadel.filter.v2beta.PaginationResponse pagination = 1;
   */
  pagination?: PaginationResponse;

  /**
   * @generated from field: repeated zitadel.project.v2beta.Project projects = 2;
   */
  projects: Project[];
};

/**
 * @generated from message zitadel.project.v2beta.ListProjectsResponse
 */
export declare type ListProjectsResponseJson = {
  /**
   * @generated from field: zitadel.filter.v2beta.PaginationResponse pagination = 1;
   */
  pagination?: PaginationResponseJson;

  /**
   * @generated from field: repeated zitadel.project.v2beta.Project projects = 2;
   */
  projects?: ProjectJson[];
};

/**
 * Describes the message zitadel.project.v2beta.ListProjectsResponse.
 * Use `create(ListProjectsResponseSchema)` to create a new message.
 */
export declare const ListProjectsResponseSchema: GenMessage<ListProjectsResponse, {jsonType: ListProjectsResponseJson}>;

/**
 * @generated from message zitadel.project.v2beta.DeactivateProjectRequest
 */
export declare type DeactivateProjectRequest = Message<"zitadel.project.v2beta.DeactivateProjectRequest"> & {
  /**
   * The unique identifier of the project.
   *
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * @generated from message zitadel.project.v2beta.DeactivateProjectRequest
 */
export declare type DeactivateProjectRequestJson = {
  /**
   * The unique identifier of the project.
   *
   * @generated from field: string id = 1;
   */
  id?: string;
};

/**
 * Describes the message zitadel.project.v2beta.DeactivateProjectRequest.
 * Use `create(DeactivateProjectRequestSchema)` to create a new message.
 */
export declare const DeactivateProjectRequestSchema: GenMessage<DeactivateProjectRequest, {jsonType: DeactivateProjectRequestJson}>;

/**
 * @generated from message zitadel.project.v2beta.DeactivateProjectResponse
 */
export declare type DeactivateProjectResponse = Message<"zitadel.project.v2beta.DeactivateProjectResponse"> & {
  /**
   * The timestamp of the change of the project.
   *
   * @generated from field: google.protobuf.Timestamp change_date = 1;
   */
  changeDate?: Timestamp;
};

/**
 * @generated from message zitadel.project.v2beta.DeactivateProjectResponse
 */
export declare type DeactivateProjectResponseJson = {
  /**
   * The timestamp of the change of the project.
   *
   * @generated from field: google.protobuf.Timestamp change_date = 1;
   */
  changeDate?: TimestampJson;
};

/**
 * Describes the message zitadel.project.v2beta.DeactivateProjectResponse.
 * Use `create(DeactivateProjectResponseSchema)` to create a new message.
 */
export declare const DeactivateProjectResponseSchema: GenMessage<DeactivateProjectResponse, {jsonType: DeactivateProjectResponseJson}>;

/**
 * @generated from message zitadel.project.v2beta.ActivateProjectRequest
 */
export declare type ActivateProjectRequest = Message<"zitadel.project.v2beta.ActivateProjectRequest"> & {
  /**
   * The unique identifier of the project.
   *
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * @generated from message zitadel.project.v2beta.ActivateProjectRequest
 */
export declare type ActivateProjectRequestJson = {
  /**
   * The unique identifier of the project.
   *
   * @generated from field: string id = 1;
   */
  id?: string;
};

/**
 * Describes the message zitadel.project.v2beta.ActivateProjectRequest.
 * Use `create(ActivateProjectRequestSchema)` to create a new message.
 */
export declare const ActivateProjectRequestSchema: GenMessage<ActivateProjectRequest, {jsonType: ActivateProjectRequestJson}>;

/**
 * @generated from message zitadel.project.v2beta.ActivateProjectResponse
 */
export declare type ActivateProjectResponse = Message<"zitadel.project.v2beta.ActivateProjectResponse"> & {
  /**
   * The timestamp of the change of the project.
   *
   * @generated from field: google.protobuf.Timestamp change_date = 1;
   */
  changeDate?: Timestamp;
};

/**
 * @generated from message zitadel.project.v2beta.ActivateProjectResponse
 */
export declare type ActivateProjectResponseJson = {
  /**
   * The timestamp of the change of the project.
   *
   * @generated from field: google.protobuf.Timestamp change_date = 1;
   */
  changeDate?: TimestampJson;
};

/**
 * Describes the message zitadel.project.v2beta.ActivateProjectResponse.
 * Use `create(ActivateProjectResponseSchema)` to create a new message.
 */
export declare const ActivateProjectResponseSchema: GenMessage<ActivateProjectResponse, {jsonType: ActivateProjectResponseJson}>;

/**
 * @generated from message zitadel.project.v2beta.AddProjectRoleRequest
 */
export declare type AddProjectRoleRequest = Message<"zitadel.project.v2beta.AddProjectRoleRequest"> & {
  /**
   * ID of the project.
   *
   * @generated from field: string project_id = 1;
   */
  projectId: string;

  /**
   * The key is the only relevant attribute for ZITADEL regarding the authorization checks.
   *
   * @generated from field: string role_key = 2;
   */
  roleKey: string;

  /**
   * Name displayed for the role.
   *
   * @generated from field: string display_name = 3;
   */
  displayName: string;

  /**
   * The group is only used for display purposes. That you have better handling, like giving all the roles from a group to a user.
   *
   * @generated from field: optional string group = 4;
   */
  group?: string;
};

/**
 * @generated from message zitadel.project.v2beta.AddProjectRoleRequest
 */
export declare type AddProjectRoleRequestJson = {
  /**
   * ID of the project.
   *
   * @generated from field: string project_id = 1;
   */
  projectId?: string;

  /**
   * The key is the only relevant attribute for ZITADEL regarding the authorization checks.
   *
   * @generated from field: string role_key = 2;
   */
  roleKey?: string;

  /**
   * Name displayed for the role.
   *
   * @generated from field: string display_name = 3;
   */
  displayName?: string;

  /**
   * The group is only used for display purposes. That you have better handling, like giving all the roles from a group to a user.
   *
   * @generated from field: optional string group = 4;
   */
  group?: string;
};

/**
 * Describes the message zitadel.project.v2beta.AddProjectRoleRequest.
 * Use `create(AddProjectRoleRequestSchema)` to create a new message.
 */
export declare const AddProjectRoleRequestSchema: GenMessage<AddProjectRoleRequest, {jsonType: AddProjectRoleRequestJson}>;

/**
 * @generated from message zitadel.project.v2beta.AddProjectRoleResponse
 */
export declare type AddProjectRoleResponse = Message<"zitadel.project.v2beta.AddProjectRoleResponse"> & {
  /**
   * The timestamp of the project role creation.
   *
   * @generated from field: google.protobuf.Timestamp creation_date = 2;
   */
  creationDate?: Timestamp;
};

/**
 * @generated from message zitadel.project.v2beta.AddProjectRoleResponse
 */
export declare type AddProjectRoleResponseJson = {
  /**
   * The timestamp of the project role creation.
   *
   * @generated from field: google.protobuf.Timestamp creation_date = 2;
   */
  creationDate?: TimestampJson;
};

/**
 * Describes the message zitadel.project.v2beta.AddProjectRoleResponse.
 * Use `create(AddProjectRoleResponseSchema)` to create a new message.
 */
export declare const AddProjectRoleResponseSchema: GenMessage<AddProjectRoleResponse, {jsonType: AddProjectRoleResponseJson}>;

/**
 * @generated from message zitadel.project.v2beta.UpdateProjectRoleRequest
 */
export declare type UpdateProjectRoleRequest = Message<"zitadel.project.v2beta.UpdateProjectRoleRequest"> & {
  /**
   * ID of the project.
   *
   * @generated from field: string project_id = 1;
   */
  projectId: string;

  /**
   * The key is the only relevant attribute for ZITADEL regarding the authorization checks.
   *
   * @generated from field: string role_key = 2;
   */
  roleKey: string;

  /**
   * Name displayed for the role.
   *
   * @generated from field: optional string display_name = 3;
   */
  displayName?: string;

  /**
   * The group is only used for display purposes. That you have better handling, like giving all the roles from a group to a user.
   *
   * @generated from field: optional string group = 4;
   */
  group?: string;
};

/**
 * @generated from message zitadel.project.v2beta.UpdateProjectRoleRequest
 */
export declare type UpdateProjectRoleRequestJson = {
  /**
   * ID of the project.
   *
   * @generated from field: string project_id = 1;
   */
  projectId?: string;

  /**
   * The key is the only relevant attribute for ZITADEL regarding the authorization checks.
   *
   * @generated from field: string role_key = 2;
   */
  roleKey?: string;

  /**
   * Name displayed for the role.
   *
   * @generated from field: optional string display_name = 3;
   */
  displayName?: string;

  /**
   * The group is only used for display purposes. That you have better handling, like giving all the roles from a group to a user.
   *
   * @generated from field: optional string group = 4;
   */
  group?: string;
};

/**
 * Describes the message zitadel.project.v2beta.UpdateProjectRoleRequest.
 * Use `create(UpdateProjectRoleRequestSchema)` to create a new message.
 */
export declare const UpdateProjectRoleRequestSchema: GenMessage<UpdateProjectRoleRequest, {jsonType: UpdateProjectRoleRequestJson}>;

/**
 * @generated from message zitadel.project.v2beta.UpdateProjectRoleResponse
 */
export declare type UpdateProjectRoleResponse = Message<"zitadel.project.v2beta.UpdateProjectRoleResponse"> & {
  /**
   * The timestamp of the change of the project role.
   *
   * @generated from field: google.protobuf.Timestamp change_date = 1;
   */
  changeDate?: Timestamp;
};

/**
 * @generated from message zitadel.project.v2beta.UpdateProjectRoleResponse
 */
export declare type UpdateProjectRoleResponseJson = {
  /**
   * The timestamp of the change of the project role.
   *
   * @generated from field: google.protobuf.Timestamp change_date = 1;
   */
  changeDate?: TimestampJson;
};

/**
 * Describes the message zitadel.project.v2beta.UpdateProjectRoleResponse.
 * Use `create(UpdateProjectRoleResponseSchema)` to create a new message.
 */
export declare const UpdateProjectRoleResponseSchema: GenMessage<UpdateProjectRoleResponse, {jsonType: UpdateProjectRoleResponseJson}>;

/**
 * @generated from message zitadel.project.v2beta.RemoveProjectRoleRequest
 */
export declare type RemoveProjectRoleRequest = Message<"zitadel.project.v2beta.RemoveProjectRoleRequest"> & {
  /**
   * ID of the project.
   *
   * @generated from field: string project_id = 1;
   */
  projectId: string;

  /**
   * The key is the only relevant attribute for ZITADEL regarding the authorization checks.
   *
   * @generated from field: string role_key = 2;
   */
  roleKey: string;
};

/**
 * @generated from message zitadel.project.v2beta.RemoveProjectRoleRequest
 */
export declare type RemoveProjectRoleRequestJson = {
  /**
   * ID of the project.
   *
   * @generated from field: string project_id = 1;
   */
  projectId?: string;

  /**
   * The key is the only relevant attribute for ZITADEL regarding the authorization checks.
   *
   * @generated from field: string role_key = 2;
   */
  roleKey?: string;
};

/**
 * Describes the message zitadel.project.v2beta.RemoveProjectRoleRequest.
 * Use `create(RemoveProjectRoleRequestSchema)` to create a new message.
 */
export declare const RemoveProjectRoleRequestSchema: GenMessage<RemoveProjectRoleRequest, {jsonType: RemoveProjectRoleRequestJson}>;

/**
 * @generated from message zitadel.project.v2beta.RemoveProjectRoleResponse
 */
export declare type RemoveProjectRoleResponse = Message<"zitadel.project.v2beta.RemoveProjectRoleResponse"> & {
  /**
   * The timestamp of the removal of the project role.
   * Note that the removal date is only guaranteed to be set if the removal was successful during the request.
   * In case the removal occurred in a previous request, the removal date might be empty.
   *
   * @generated from field: google.protobuf.Timestamp removal_date = 3;
   */
  removalDate?: Timestamp;
};

/**
 * @generated from message zitadel.project.v2beta.RemoveProjectRoleResponse
 */
export declare type RemoveProjectRoleResponseJson = {
  /**
   * The timestamp of the removal of the project role.
   * Note that the removal date is only guaranteed to be set if the removal was successful during the request.
   * In case the removal occurred in a previous request, the removal date might be empty.
   *
   * @generated from field: google.protobuf.Timestamp removal_date = 3;
   */
  removalDate?: TimestampJson;
};

/**
 * Describes the message zitadel.project.v2beta.RemoveProjectRoleResponse.
 * Use `create(RemoveProjectRoleResponseSchema)` to create a new message.
 */
export declare const RemoveProjectRoleResponseSchema: GenMessage<RemoveProjectRoleResponse, {jsonType: RemoveProjectRoleResponseJson}>;

/**
 * @generated from message zitadel.project.v2beta.ListProjectRolesRequest
 */
export declare type ListProjectRolesRequest = Message<"zitadel.project.v2beta.ListProjectRolesRequest"> & {
  /**
   * ID of the project.
   *
   * @generated from field: string project_id = 1;
   */
  projectId: string;

  /**
   * List limitations and ordering.
   *
   * @generated from field: optional zitadel.filter.v2beta.PaginationRequest pagination = 2;
   */
  pagination?: PaginationRequest;

  /**
   * The field the result is sorted by. The default is the creation date. Beware that if you change this, your result pagination might be inconsistent.
   *
   * @generated from field: optional zitadel.project.v2beta.ProjectRoleFieldName sorting_column = 3;
   */
  sortingColumn?: ProjectRoleFieldName;

  /**
   * Define the criteria to query for.
   *
   * @generated from field: repeated zitadel.project.v2beta.ProjectRoleSearchFilter filters = 4;
   */
  filters: ProjectRoleSearchFilter[];
};

/**
 * @generated from message zitadel.project.v2beta.ListProjectRolesRequest
 */
export declare type ListProjectRolesRequestJson = {
  /**
   * ID of the project.
   *
   * @generated from field: string project_id = 1;
   */
  projectId?: string;

  /**
   * List limitations and ordering.
   *
   * @generated from field: optional zitadel.filter.v2beta.PaginationRequest pagination = 2;
   */
  pagination?: PaginationRequestJson;

  /**
   * The field the result is sorted by. The default is the creation date. Beware that if you change this, your result pagination might be inconsistent.
   *
   * @generated from field: optional zitadel.project.v2beta.ProjectRoleFieldName sorting_column = 3;
   */
  sortingColumn?: ProjectRoleFieldNameJson;

  /**
   * Define the criteria to query for.
   *
   * @generated from field: repeated zitadel.project.v2beta.ProjectRoleSearchFilter filters = 4;
   */
  filters?: ProjectRoleSearchFilterJson[];
};

/**
 * Describes the message zitadel.project.v2beta.ListProjectRolesRequest.
 * Use `create(ListProjectRolesRequestSchema)` to create a new message.
 */
export declare const ListProjectRolesRequestSchema: GenMessage<ListProjectRolesRequest, {jsonType: ListProjectRolesRequestJson}>;

/**
 * @generated from message zitadel.project.v2beta.ListProjectRolesResponse
 */
export declare type ListProjectRolesResponse = Message<"zitadel.project.v2beta.ListProjectRolesResponse"> & {
  /**
   * @generated from field: zitadel.filter.v2beta.PaginationResponse pagination = 1;
   */
  pagination?: PaginationResponse;

  /**
   * @generated from field: repeated zitadel.project.v2beta.ProjectRole project_roles = 2;
   */
  projectRoles: ProjectRole[];
};

/**
 * @generated from message zitadel.project.v2beta.ListProjectRolesResponse
 */
export declare type ListProjectRolesResponseJson = {
  /**
   * @generated from field: zitadel.filter.v2beta.PaginationResponse pagination = 1;
   */
  pagination?: PaginationResponseJson;

  /**
   * @generated from field: repeated zitadel.project.v2beta.ProjectRole project_roles = 2;
   */
  projectRoles?: ProjectRoleJson[];
};

/**
 * Describes the message zitadel.project.v2beta.ListProjectRolesResponse.
 * Use `create(ListProjectRolesResponseSchema)` to create a new message.
 */
export declare const ListProjectRolesResponseSchema: GenMessage<ListProjectRolesResponse, {jsonType: ListProjectRolesResponseJson}>;

/**
 * @generated from message zitadel.project.v2beta.CreateProjectGrantRequest
 */
export declare type CreateProjectGrantRequest = Message<"zitadel.project.v2beta.CreateProjectGrantRequest"> & {
  /**
   * ID of the project.
   *
   * @generated from field: string project_id = 1;
   */
  projectId: string;

  /**
   * Organization the project is granted to.
   *
   * @generated from field: string granted_organization_id = 2;
   */
  grantedOrganizationId: string;

  /**
   * Keys of the role available for the project grant.
   *
   * @generated from field: repeated string role_keys = 3;
   */
  roleKeys: string[];
};

/**
 * @generated from message zitadel.project.v2beta.CreateProjectGrantRequest
 */
export declare type CreateProjectGrantRequestJson = {
  /**
   * ID of the project.
   *
   * @generated from field: string project_id = 1;
   */
  projectId?: string;

  /**
   * Organization the project is granted to.
   *
   * @generated from field: string granted_organization_id = 2;
   */
  grantedOrganizationId?: string;

  /**
   * Keys of the role available for the project grant.
   *
   * @generated from field: repeated string role_keys = 3;
   */
  roleKeys?: string[];
};

/**
 * Describes the message zitadel.project.v2beta.CreateProjectGrantRequest.
 * Use `create(CreateProjectGrantRequestSchema)` to create a new message.
 */
export declare const CreateProjectGrantRequestSchema: GenMessage<CreateProjectGrantRequest, {jsonType: CreateProjectGrantRequestJson}>;

/**
 * @generated from message zitadel.project.v2beta.CreateProjectGrantResponse
 */
export declare type CreateProjectGrantResponse = Message<"zitadel.project.v2beta.CreateProjectGrantResponse"> & {
  /**
   * The timestamp of the project grant creation.
   *
   * @generated from field: google.protobuf.Timestamp creation_date = 1;
   */
  creationDate?: Timestamp;
};

/**
 * @generated from message zitadel.project.v2beta.CreateProjectGrantResponse
 */
export declare type CreateProjectGrantResponseJson = {
  /**
   * The timestamp of the project grant creation.
   *
   * @generated from field: google.protobuf.Timestamp creation_date = 1;
   */
  creationDate?: TimestampJson;
};

/**
 * Describes the message zitadel.project.v2beta.CreateProjectGrantResponse.
 * Use `create(CreateProjectGrantResponseSchema)` to create a new message.
 */
export declare const CreateProjectGrantResponseSchema: GenMessage<CreateProjectGrantResponse, {jsonType: CreateProjectGrantResponseJson}>;

/**
 * @generated from message zitadel.project.v2beta.UpdateProjectGrantRequest
 */
export declare type UpdateProjectGrantRequest = Message<"zitadel.project.v2beta.UpdateProjectGrantRequest"> & {
  /**
   * ID of the project.
   *
   * @generated from field: string project_id = 1;
   */
  projectId: string;

  /**
   * Organization the project is granted to.
   *
   * @generated from field: string granted_organization_id = 2;
   */
  grantedOrganizationId: string;

  /**
   * Keys of the role available for the project grant.
   *
   * @generated from field: repeated string role_keys = 3;
   */
  roleKeys: string[];
};

/**
 * @generated from message zitadel.project.v2beta.UpdateProjectGrantRequest
 */
export declare type UpdateProjectGrantRequestJson = {
  /**
   * ID of the project.
   *
   * @generated from field: string project_id = 1;
   */
  projectId?: string;

  /**
   * Organization the project is granted to.
   *
   * @generated from field: string granted_organization_id = 2;
   */
  grantedOrganizationId?: string;

  /**
   * Keys of the role available for the project grant.
   *
   * @generated from field: repeated string role_keys = 3;
   */
  roleKeys?: string[];
};

/**
 * Describes the message zitadel.project.v2beta.UpdateProjectGrantRequest.
 * Use `create(UpdateProjectGrantRequestSchema)` to create a new message.
 */
export declare const UpdateProjectGrantRequestSchema: GenMessage<UpdateProjectGrantRequest, {jsonType: UpdateProjectGrantRequestJson}>;

/**
 * @generated from message zitadel.project.v2beta.UpdateProjectGrantResponse
 */
export declare type UpdateProjectGrantResponse = Message<"zitadel.project.v2beta.UpdateProjectGrantResponse"> & {
  /**
   * The timestamp of the change of the project grant.
   *
   * @generated from field: google.protobuf.Timestamp change_date = 1;
   */
  changeDate?: Timestamp;
};

/**
 * @generated from message zitadel.project.v2beta.UpdateProjectGrantResponse
 */
export declare type UpdateProjectGrantResponseJson = {
  /**
   * The timestamp of the change of the project grant.
   *
   * @generated from field: google.protobuf.Timestamp change_date = 1;
   */
  changeDate?: TimestampJson;
};

/**
 * Describes the message zitadel.project.v2beta.UpdateProjectGrantResponse.
 * Use `create(UpdateProjectGrantResponseSchema)` to create a new message.
 */
export declare const UpdateProjectGrantResponseSchema: GenMessage<UpdateProjectGrantResponse, {jsonType: UpdateProjectGrantResponseJson}>;

/**
 * @generated from message zitadel.project.v2beta.DeleteProjectGrantRequest
 */
export declare type DeleteProjectGrantRequest = Message<"zitadel.project.v2beta.DeleteProjectGrantRequest"> & {
  /**
   * ID of the project.
   *
   * @generated from field: string project_id = 1;
   */
  projectId: string;

  /**
   * Organization the project is granted to.
   *
   * @generated from field: string granted_organization_id = 2;
   */
  grantedOrganizationId: string;
};

/**
 * @generated from message zitadel.project.v2beta.DeleteProjectGrantRequest
 */
export declare type DeleteProjectGrantRequestJson = {
  /**
   * ID of the project.
   *
   * @generated from field: string project_id = 1;
   */
  projectId?: string;

  /**
   * Organization the project is granted to.
   *
   * @generated from field: string granted_organization_id = 2;
   */
  grantedOrganizationId?: string;
};

/**
 * Describes the message zitadel.project.v2beta.DeleteProjectGrantRequest.
 * Use `create(DeleteProjectGrantRequestSchema)` to create a new message.
 */
export declare const DeleteProjectGrantRequestSchema: GenMessage<DeleteProjectGrantRequest, {jsonType: DeleteProjectGrantRequestJson}>;

/**
 * @generated from message zitadel.project.v2beta.DeleteProjectGrantResponse
 */
export declare type DeleteProjectGrantResponse = Message<"zitadel.project.v2beta.DeleteProjectGrantResponse"> & {
  /**
   * The timestamp of the deletion of the project grant.
   * Note that the deletion date is only guaranteed to be set if the deletion was successful during the request.
   * In case the deletion occurred in a previous request, the deletion date might be empty.
   *
   * @generated from field: google.protobuf.Timestamp deletion_date = 3;
   */
  deletionDate?: Timestamp;
};

/**
 * @generated from message zitadel.project.v2beta.DeleteProjectGrantResponse
 */
export declare type DeleteProjectGrantResponseJson = {
  /**
   * The timestamp of the deletion of the project grant.
   * Note that the deletion date is only guaranteed to be set if the deletion was successful during the request.
   * In case the deletion occurred in a previous request, the deletion date might be empty.
   *
   * @generated from field: google.protobuf.Timestamp deletion_date = 3;
   */
  deletionDate?: TimestampJson;
};

/**
 * Describes the message zitadel.project.v2beta.DeleteProjectGrantResponse.
 * Use `create(DeleteProjectGrantResponseSchema)` to create a new message.
 */
export declare const DeleteProjectGrantResponseSchema: GenMessage<DeleteProjectGrantResponse, {jsonType: DeleteProjectGrantResponseJson}>;

/**
 * @generated from message zitadel.project.v2beta.DeactivateProjectGrantRequest
 */
export declare type DeactivateProjectGrantRequest = Message<"zitadel.project.v2beta.DeactivateProjectGrantRequest"> & {
  /**
   * ID of the project.
   *
   * @generated from field: string project_id = 1;
   */
  projectId: string;

  /**
   * Organization the project is granted to.
   *
   * @generated from field: string granted_organization_id = 2;
   */
  grantedOrganizationId: string;
};

/**
 * @generated from message zitadel.project.v2beta.DeactivateProjectGrantRequest
 */
export declare type DeactivateProjectGrantRequestJson = {
  /**
   * ID of the project.
   *
   * @generated from field: string project_id = 1;
   */
  projectId?: string;

  /**
   * Organization the project is granted to.
   *
   * @generated from field: string granted_organization_id = 2;
   */
  grantedOrganizationId?: string;
};

/**
 * Describes the message zitadel.project.v2beta.DeactivateProjectGrantRequest.
 * Use `create(DeactivateProjectGrantRequestSchema)` to create a new message.
 */
export declare const DeactivateProjectGrantRequestSchema: GenMessage<DeactivateProjectGrantRequest, {jsonType: DeactivateProjectGrantRequestJson}>;

/**
 * @generated from message zitadel.project.v2beta.DeactivateProjectGrantResponse
 */
export declare type DeactivateProjectGrantResponse = Message<"zitadel.project.v2beta.DeactivateProjectGrantResponse"> & {
  /**
   * The timestamp of the change of the project grant.
   *
   * @generated from field: google.protobuf.Timestamp change_date = 1;
   */
  changeDate?: Timestamp;
};

/**
 * @generated from message zitadel.project.v2beta.DeactivateProjectGrantResponse
 */
export declare type DeactivateProjectGrantResponseJson = {
  /**
   * The timestamp of the change of the project grant.
   *
   * @generated from field: google.protobuf.Timestamp change_date = 1;
   */
  changeDate?: TimestampJson;
};

/**
 * Describes the message zitadel.project.v2beta.DeactivateProjectGrantResponse.
 * Use `create(DeactivateProjectGrantResponseSchema)` to create a new message.
 */
export declare const DeactivateProjectGrantResponseSchema: GenMessage<DeactivateProjectGrantResponse, {jsonType: DeactivateProjectGrantResponseJson}>;

/**
 * @generated from message zitadel.project.v2beta.ActivateProjectGrantRequest
 */
export declare type ActivateProjectGrantRequest = Message<"zitadel.project.v2beta.ActivateProjectGrantRequest"> & {
  /**
   * ID of the project.
   *
   * @generated from field: string project_id = 1;
   */
  projectId: string;

  /**
   * Organization the project is granted to.
   *
   * @generated from field: string granted_organization_id = 2;
   */
  grantedOrganizationId: string;
};

/**
 * @generated from message zitadel.project.v2beta.ActivateProjectGrantRequest
 */
export declare type ActivateProjectGrantRequestJson = {
  /**
   * ID of the project.
   *
   * @generated from field: string project_id = 1;
   */
  projectId?: string;

  /**
   * Organization the project is granted to.
   *
   * @generated from field: string granted_organization_id = 2;
   */
  grantedOrganizationId?: string;
};

/**
 * Describes the message zitadel.project.v2beta.ActivateProjectGrantRequest.
 * Use `create(ActivateProjectGrantRequestSchema)` to create a new message.
 */
export declare const ActivateProjectGrantRequestSchema: GenMessage<ActivateProjectGrantRequest, {jsonType: ActivateProjectGrantRequestJson}>;

/**
 * @generated from message zitadel.project.v2beta.ActivateProjectGrantResponse
 */
export declare type ActivateProjectGrantResponse = Message<"zitadel.project.v2beta.ActivateProjectGrantResponse"> & {
  /**
   * The timestamp of the change of the project grant.
   *
   * @generated from field: google.protobuf.Timestamp change_date = 1;
   */
  changeDate?: Timestamp;
};

/**
 * @generated from message zitadel.project.v2beta.ActivateProjectGrantResponse
 */
export declare type ActivateProjectGrantResponseJson = {
  /**
   * The timestamp of the change of the project grant.
   *
   * @generated from field: google.protobuf.Timestamp change_date = 1;
   */
  changeDate?: TimestampJson;
};

/**
 * Describes the message zitadel.project.v2beta.ActivateProjectGrantResponse.
 * Use `create(ActivateProjectGrantResponseSchema)` to create a new message.
 */
export declare const ActivateProjectGrantResponseSchema: GenMessage<ActivateProjectGrantResponse, {jsonType: ActivateProjectGrantResponseJson}>;

/**
 * @generated from message zitadel.project.v2beta.ListProjectGrantsRequest
 */
export declare type ListProjectGrantsRequest = Message<"zitadel.project.v2beta.ListProjectGrantsRequest"> & {
  /**
   * List limitations and ordering.
   *
   * @generated from field: optional zitadel.filter.v2beta.PaginationRequest pagination = 1;
   */
  pagination?: PaginationRequest;

  /**
   * The field the result is sorted by. The default is the creation date. Beware that if you change this, your result pagination might be inconsistent.
   *
   * @generated from field: optional zitadel.project.v2beta.ProjectGrantFieldName sorting_column = 2;
   */
  sortingColumn?: ProjectGrantFieldName;

  /**
   * Define the criteria to query for.
   *
   * @generated from field: repeated zitadel.project.v2beta.ProjectGrantSearchFilter filters = 3;
   */
  filters: ProjectGrantSearchFilter[];
};

/**
 * @generated from message zitadel.project.v2beta.ListProjectGrantsRequest
 */
export declare type ListProjectGrantsRequestJson = {
  /**
   * List limitations and ordering.
   *
   * @generated from field: optional zitadel.filter.v2beta.PaginationRequest pagination = 1;
   */
  pagination?: PaginationRequestJson;

  /**
   * The field the result is sorted by. The default is the creation date. Beware that if you change this, your result pagination might be inconsistent.
   *
   * @generated from field: optional zitadel.project.v2beta.ProjectGrantFieldName sorting_column = 2;
   */
  sortingColumn?: ProjectGrantFieldNameJson;

  /**
   * Define the criteria to query for.
   *
   * @generated from field: repeated zitadel.project.v2beta.ProjectGrantSearchFilter filters = 3;
   */
  filters?: ProjectGrantSearchFilterJson[];
};

/**
 * Describes the message zitadel.project.v2beta.ListProjectGrantsRequest.
 * Use `create(ListProjectGrantsRequestSchema)` to create a new message.
 */
export declare const ListProjectGrantsRequestSchema: GenMessage<ListProjectGrantsRequest, {jsonType: ListProjectGrantsRequestJson}>;

/**
 * @generated from message zitadel.project.v2beta.ListProjectGrantsResponse
 */
export declare type ListProjectGrantsResponse = Message<"zitadel.project.v2beta.ListProjectGrantsResponse"> & {
  /**
   * @generated from field: zitadel.filter.v2beta.PaginationResponse pagination = 1;
   */
  pagination?: PaginationResponse;

  /**
   * @generated from field: repeated zitadel.project.v2beta.ProjectGrant project_grants = 2;
   */
  projectGrants: ProjectGrant[];
};

/**
 * @generated from message zitadel.project.v2beta.ListProjectGrantsResponse
 */
export declare type ListProjectGrantsResponseJson = {
  /**
   * @generated from field: zitadel.filter.v2beta.PaginationResponse pagination = 1;
   */
  pagination?: PaginationResponseJson;

  /**
   * @generated from field: repeated zitadel.project.v2beta.ProjectGrant project_grants = 2;
   */
  projectGrants?: ProjectGrantJson[];
};

/**
 * Describes the message zitadel.project.v2beta.ListProjectGrantsResponse.
 * Use `create(ListProjectGrantsResponseSchema)` to create a new message.
 */
export declare const ListProjectGrantsResponseSchema: GenMessage<ListProjectGrantsResponse, {jsonType: ListProjectGrantsResponseJson}>;

/**
 * Service to manage projects.
 *
 * @generated from service zitadel.project.v2beta.ProjectService
 */
export declare const ProjectService: GenService<{
  /**
   * Create Project
   *
   * Create a new Project.
   *
   * Required permission:
   *   - `project.create`
   *
   * @generated from rpc zitadel.project.v2beta.ProjectService.CreateProject
   */
  createProject: {
    methodKind: "unary";
    input: typeof CreateProjectRequestSchema;
    output: typeof CreateProjectResponseSchema;
  },
  /**
   * Update Project
   *
   * Update an existing project.
   *
   * Required permission:
   *   - `project.write`
   *
   * @generated from rpc zitadel.project.v2beta.ProjectService.UpdateProject
   */
  updateProject: {
    methodKind: "unary";
    input: typeof UpdateProjectRequestSchema;
    output: typeof UpdateProjectResponseSchema;
  },
  /**
   * Delete Project
   *
   * Delete an existing project.
   * In case the project is not found, the request will return a successful response as
   * the desired state is already achieved.
   *
   * Required permission:
   *   - `project.delete`
   *
   * @generated from rpc zitadel.project.v2beta.ProjectService.DeleteProject
   */
  deleteProject: {
    methodKind: "unary";
    input: typeof DeleteProjectRequestSchema;
    output: typeof DeleteProjectResponseSchema;
  },
  /**
   * Get Project
   *
   * Returns the project identified by the requested ID.
   *
   * Required permission:
   *   - `project.read`
   *
   * @generated from rpc zitadel.project.v2beta.ProjectService.GetProject
   */
  getProject: {
    methodKind: "unary";
    input: typeof GetProjectRequestSchema;
    output: typeof GetProjectResponseSchema;
  },
  /**
   * List Projects
   *
   * List all matching projects. By default all projects of the instance that the caller has permission to read are returned.
   * Make sure to include a limit and sorting for pagination.
   *
   * Required permission:
   *   - `project.read`
   *
   * @generated from rpc zitadel.project.v2beta.ProjectService.ListProjects
   */
  listProjects: {
    methodKind: "unary";
    input: typeof ListProjectsRequestSchema;
    output: typeof ListProjectsResponseSchema;
  },
  /**
   * Deactivate Project
   *
   * Set the state of a project to deactivated. Request returns no error if the project is already deactivated.
   * Applications under deactivated projects are not able to login anymore.
   *
   * Required permission:
   *   - `project.write`
   *
   * @generated from rpc zitadel.project.v2beta.ProjectService.DeactivateProject
   */
  deactivateProject: {
    methodKind: "unary";
    input: typeof DeactivateProjectRequestSchema;
    output: typeof DeactivateProjectResponseSchema;
  },
  /**
   * Activate Project
   *
   * Set the state of a project to active. Request returns no error if the project is already activated.
   *
   * Required permission:
   *   - `project.write`
   *
   * @generated from rpc zitadel.project.v2beta.ProjectService.ActivateProject
   */
  activateProject: {
    methodKind: "unary";
    input: typeof ActivateProjectRequestSchema;
    output: typeof ActivateProjectResponseSchema;
  },
  /**
   * Add Project Role
   *
   * Add a new project role to a project. The key must be unique within the project.
   *
   * Required permission:
   *   - `project.role.write`
   *
   * @generated from rpc zitadel.project.v2beta.ProjectService.AddProjectRole
   */
  addProjectRole: {
    methodKind: "unary";
    input: typeof AddProjectRoleRequestSchema;
    output: typeof AddProjectRoleResponseSchema;
  },
  /**
   * Update Project Role
   *
   * Change a project role. The key is not editable. If a key should change, remove the role and create a new one.
   *
   * Required permission:
   *   - `project.role.write`
   *
   * @generated from rpc zitadel.project.v2beta.ProjectService.UpdateProjectRole
   */
  updateProjectRole: {
    methodKind: "unary";
    input: typeof UpdateProjectRoleRequestSchema;
    output: typeof UpdateProjectRoleResponseSchema;
  },
  /**
   * Remove Project Role
   *
   * Removes the role from the project and on every resource it has a dependency. This includes project grants and user grants.
   *
   * Required permission:
   *   - `project.role.write`
   *
   * @generated from rpc zitadel.project.v2beta.ProjectService.RemoveProjectRole
   */
  removeProjectRole: {
    methodKind: "unary";
    input: typeof RemoveProjectRoleRequestSchema;
    output: typeof RemoveProjectRoleResponseSchema;
  },
  /**
   * List Project Roles
   *
   * Returns all roles of a project matching the search query.
   *
   * Required permission:
   *   - `project.role.read`
   *
   * @generated from rpc zitadel.project.v2beta.ProjectService.ListProjectRoles
   */
  listProjectRoles: {
    methodKind: "unary";
    input: typeof ListProjectRolesRequestSchema;
    output: typeof ListProjectRolesResponseSchema;
  },
  /**
   * Create Project Grant
   *
   * Grant a project to another organization.
   * The project grant will allow the granted organization to access the project and manage the authorizations for its users.
   *
   * Required permission:
   *   - `project.grant.create`
   *
   * @generated from rpc zitadel.project.v2beta.ProjectService.CreateProjectGrant
   */
  createProjectGrant: {
    methodKind: "unary";
    input: typeof CreateProjectGrantRequestSchema;
    output: typeof CreateProjectGrantResponseSchema;
  },
  /**
   * Update Project Grant
   *
   * Change the roles of the project that is granted to another organization.
   * The project grant will allow the granted organization to access the project and manage the authorizations for its users.
   *
   * Required permission:
   *   - `project.grant.write`
   *
   * @generated from rpc zitadel.project.v2beta.ProjectService.UpdateProjectGrant
   */
  updateProjectGrant: {
    methodKind: "unary";
    input: typeof UpdateProjectGrantRequestSchema;
    output: typeof UpdateProjectGrantResponseSchema;
  },
  /**
   * Delete Project Grant
   *
   * Delete a project grant. All user grants for this project grant will also be removed.
   * A user will not have access to the project afterward (if permissions are checked).
   * In case the project grant is not found, the request will return a successful response as
   * the desired state is already achieved.
   *
   * Required permission:
   *   - `project.grant.delete`
   *
   * @generated from rpc zitadel.project.v2beta.ProjectService.DeleteProjectGrant
   */
  deleteProjectGrant: {
    methodKind: "unary";
    input: typeof DeleteProjectGrantRequestSchema;
    output: typeof DeleteProjectGrantResponseSchema;
  },
  /**
   * Deactivate Project Grant
   *
   * Set the state of the project grant to deactivated.
   * Applications under deactivated projects grants are not able to login anymore.
   *
   * Required permission:
   *   - `project.grant.write`
   *
   * @generated from rpc zitadel.project.v2beta.ProjectService.DeactivateProjectGrant
   */
  deactivateProjectGrant: {
    methodKind: "unary";
    input: typeof DeactivateProjectGrantRequestSchema;
    output: typeof DeactivateProjectGrantResponseSchema;
  },
  /**
   * Activate Project Grant
   *
   * Set the state of the project grant to activated.
   *
   * Required permission:
   *   - `project.grant.write`
   *
   * @generated from rpc zitadel.project.v2beta.ProjectService.ActivateProjectGrant
   */
  activateProjectGrant: {
    methodKind: "unary";
    input: typeof ActivateProjectGrantRequestSchema;
    output: typeof ActivateProjectGrantResponseSchema;
  },
  /**
   * List Project Grants
   *
   * Returns a list of project grants. A project grant is when the organization grants its project to another organization.
   *
   * Required permission:
   *   - `project.grant.write`
   *
   * @generated from rpc zitadel.project.v2beta.ProjectService.ListProjectGrants
   */
  listProjectGrants: {
    methodKind: "unary";
    input: typeof ListProjectGrantsRequestSchema;
    output: typeof ListProjectGrantsResponseSchema;
  },
}>;

