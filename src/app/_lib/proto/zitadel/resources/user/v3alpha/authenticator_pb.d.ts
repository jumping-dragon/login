// @generated by protoc-gen-es v2.6.0 with parameter "json_types=true,import_extension=js"
// @generated from file zitadel/resources/user/v3alpha/authenticator.proto (package zitadel.resources.user.v3alpha, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv2";
import type { JsonObject, Message } from "@bufbuild/protobuf";
import type { StructJson, Timestamp, TimestampJson } from "@bufbuild/protobuf/wkt";
import type { Details, DetailsJson } from "../../object/v3alpha/object_pb.js";

/**
 * Describes the file zitadel/resources/user/v3alpha/authenticator.proto.
 */
export declare const file_zitadel_resources_user_v3alpha_authenticator: GenFile;

/**
 * @generated from message zitadel.resources.user.v3alpha.Authenticators
 */
export declare type Authenticators = Message<"zitadel.resources.user.v3alpha.Authenticators"> & {
  /**
   * All of the user's usernames, which will be used for identification during authentication.
   *
   * @generated from field: repeated zitadel.resources.user.v3alpha.Username usernames = 1;
   */
  usernames: Username[];

  /**
   * If the user has set a password, the time it was last changed will be returned.
   *
   * @generated from field: zitadel.resources.user.v3alpha.Password password = 2;
   */
  password?: Password;

  /**
   * Meta information about the user's WebAuthN authenticators.
   *
   * @generated from field: repeated zitadel.resources.user.v3alpha.WebAuthN web_auth_n = 3;
   */
  webAuthN: WebAuthN[];

  /**
   * A list of the user's time-based one-time password (TOTP) authenticators,
   * incl. the name for identification.
   *
   * @generated from field: repeated zitadel.resources.user.v3alpha.TOTP totps = 4;
   */
  totps: TOTP[];

  /**
   * A list of the user's one-time password (OTP) SMS authenticators.
   *
   * @generated from field: repeated zitadel.resources.user.v3alpha.OTPSMS otp_sms = 5;
   */
  otpSms: OTPSMS[];

  /**
   * A list of the user's one-time password (OTP) Email authenticators.
   *
   * @generated from field: repeated zitadel.resources.user.v3alpha.OTPEmail otp_email = 6;
   */
  otpEmail: OTPEmail[];

  /**
   * A list of the user's authentication keys. They can be used to authenticate e.g. by JWT Profile.
   *
   * @generated from field: repeated zitadel.resources.user.v3alpha.AuthenticationKey authentication_keys = 7;
   */
  authenticationKeys: AuthenticationKey[];

  /**
   * A list of the user's linked identity providers (IDPs).
   *
   * @generated from field: repeated zitadel.resources.user.v3alpha.IdentityProvider identity_providers = 8;
   */
  identityProviders: IdentityProvider[];
};

/**
 * @generated from message zitadel.resources.user.v3alpha.Authenticators
 */
export declare type AuthenticatorsJson = {
  /**
   * All of the user's usernames, which will be used for identification during authentication.
   *
   * @generated from field: repeated zitadel.resources.user.v3alpha.Username usernames = 1;
   */
  usernames?: UsernameJson[];

  /**
   * If the user has set a password, the time it was last changed will be returned.
   *
   * @generated from field: zitadel.resources.user.v3alpha.Password password = 2;
   */
  password?: PasswordJson;

  /**
   * Meta information about the user's WebAuthN authenticators.
   *
   * @generated from field: repeated zitadel.resources.user.v3alpha.WebAuthN web_auth_n = 3;
   */
  webAuthN?: WebAuthNJson[];

  /**
   * A list of the user's time-based one-time password (TOTP) authenticators,
   * incl. the name for identification.
   *
   * @generated from field: repeated zitadel.resources.user.v3alpha.TOTP totps = 4;
   */
  totps?: TOTPJson[];

  /**
   * A list of the user's one-time password (OTP) SMS authenticators.
   *
   * @generated from field: repeated zitadel.resources.user.v3alpha.OTPSMS otp_sms = 5;
   */
  otpSms?: OTPSMSJson[];

  /**
   * A list of the user's one-time password (OTP) Email authenticators.
   *
   * @generated from field: repeated zitadel.resources.user.v3alpha.OTPEmail otp_email = 6;
   */
  otpEmail?: OTPEmailJson[];

  /**
   * A list of the user's authentication keys. They can be used to authenticate e.g. by JWT Profile.
   *
   * @generated from field: repeated zitadel.resources.user.v3alpha.AuthenticationKey authentication_keys = 7;
   */
  authenticationKeys?: AuthenticationKeyJson[];

  /**
   * A list of the user's linked identity providers (IDPs).
   *
   * @generated from field: repeated zitadel.resources.user.v3alpha.IdentityProvider identity_providers = 8;
   */
  identityProviders?: IdentityProviderJson[];
};

/**
 * Describes the message zitadel.resources.user.v3alpha.Authenticators.
 * Use `create(AuthenticatorsSchema)` to create a new message.
 */
export declare const AuthenticatorsSchema: GenMessage<Authenticators, {jsonType: AuthenticatorsJson}>;

/**
 * @generated from message zitadel.resources.user.v3alpha.Username
 */
export declare type Username = Message<"zitadel.resources.user.v3alpha.Username"> & {
  /**
   * unique identifier of the username.
   *
   * @generated from field: string username_id = 1;
   */
  usernameId: string;

  /**
   * The user's unique username. It is used for identification during authentication.
   *
   * @generated from field: string username = 2;
   */
  username: string;

  /**
   * By default usernames must be unique across all organizations in an instance.
   * This option allow to restrict the uniqueness to the user's own organization.
   * As a result, this username can only be used if the authentication is limited
   * to the corresponding organization.
   *
   * This can be useful if you provide multiple usernames for a single user, where one
   * if specific to your organization, e.g.:
   * - gigi-giraffe@zitadel.com (unique across organizations)
   * - gigi-giraffe (unique only inside the ZITADEL organization)
   *
   * @generated from field: bool is_organization_specific = 3;
   */
  isOrganizationSpecific: boolean;
};

/**
 * @generated from message zitadel.resources.user.v3alpha.Username
 */
export declare type UsernameJson = {
  /**
   * unique identifier of the username.
   *
   * @generated from field: string username_id = 1;
   */
  usernameId?: string;

  /**
   * The user's unique username. It is used for identification during authentication.
   *
   * @generated from field: string username = 2;
   */
  username?: string;

  /**
   * By default usernames must be unique across all organizations in an instance.
   * This option allow to restrict the uniqueness to the user's own organization.
   * As a result, this username can only be used if the authentication is limited
   * to the corresponding organization.
   *
   * This can be useful if you provide multiple usernames for a single user, where one
   * if specific to your organization, e.g.:
   * - gigi-giraffe@zitadel.com (unique across organizations)
   * - gigi-giraffe (unique only inside the ZITADEL organization)
   *
   * @generated from field: bool is_organization_specific = 3;
   */
  isOrganizationSpecific?: boolean;
};

/**
 * Describes the message zitadel.resources.user.v3alpha.Username.
 * Use `create(UsernameSchema)` to create a new message.
 */
export declare const UsernameSchema: GenMessage<Username, {jsonType: UsernameJson}>;

/**
 * @generated from message zitadel.resources.user.v3alpha.SetUsername
 */
export declare type SetUsername = Message<"zitadel.resources.user.v3alpha.SetUsername"> & {
  /**
   * Set the user's username. This will be used for identification during authentication.
   *
   * @generated from field: string username = 1;
   */
  username: string;

  /**
   * By default username must be unique across all organizations in an instance.
   * This option allow to restrict the uniqueness to the user's own organization.
   * As a result, this username can only be used if the authentication is limited
   * to the corresponding organization.
   *
   * This can be useful if you provide multiple usernames for a single user, where one
   * if specific to your organization, e.g.:
   * - gigi-giraffe@zitadel.com (unique across organizations)
   * - gigi-giraffe (unique only inside the ZITADEL organization)
   *
   * @generated from field: bool is_organization_specific = 2;
   */
  isOrganizationSpecific: boolean;
};

/**
 * @generated from message zitadel.resources.user.v3alpha.SetUsername
 */
export declare type SetUsernameJson = {
  /**
   * Set the user's username. This will be used for identification during authentication.
   *
   * @generated from field: string username = 1;
   */
  username?: string;

  /**
   * By default username must be unique across all organizations in an instance.
   * This option allow to restrict the uniqueness to the user's own organization.
   * As a result, this username can only be used if the authentication is limited
   * to the corresponding organization.
   *
   * This can be useful if you provide multiple usernames for a single user, where one
   * if specific to your organization, e.g.:
   * - gigi-giraffe@zitadel.com (unique across organizations)
   * - gigi-giraffe (unique only inside the ZITADEL organization)
   *
   * @generated from field: bool is_organization_specific = 2;
   */
  isOrganizationSpecific?: boolean;
};

/**
 * Describes the message zitadel.resources.user.v3alpha.SetUsername.
 * Use `create(SetUsernameSchema)` to create a new message.
 */
export declare const SetUsernameSchema: GenMessage<SetUsername, {jsonType: SetUsernameJson}>;

/**
 * @generated from message zitadel.resources.user.v3alpha.Password
 */
export declare type Password = Message<"zitadel.resources.user.v3alpha.Password"> & {
  /**
   * States the time the password was last changed.
   *
   * @generated from field: google.protobuf.Timestamp last_changed = 1;
   */
  lastChanged?: Timestamp;
};

/**
 * @generated from message zitadel.resources.user.v3alpha.Password
 */
export declare type PasswordJson = {
  /**
   * States the time the password was last changed.
   *
   * @generated from field: google.protobuf.Timestamp last_changed = 1;
   */
  lastChanged?: TimestampJson;
};

/**
 * Describes the message zitadel.resources.user.v3alpha.Password.
 * Use `create(PasswordSchema)` to create a new message.
 */
export declare const PasswordSchema: GenMessage<Password, {jsonType: PasswordJson}>;

/**
 * @generated from message zitadel.resources.user.v3alpha.WebAuthN
 */
export declare type WebAuthN = Message<"zitadel.resources.user.v3alpha.WebAuthN"> & {
  /**
   * unique identifier of the WebAuthN authenticator.
   *
   * @generated from field: string web_auth_n_id = 1;
   */
  webAuthNId: string;

  /**
   * Name of the WebAuthN authenticator. This is used for easier identification.
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * State whether the WebAuthN registration has been completed.
   *
   * @generated from field: bool is_verified = 3;
   */
  isVerified: boolean;

  /**
   * States if the user has been verified during the registration. Authentication with this device
   * will be considered as multi-factor authentication (MFA) without the need to check a password
   * (typically known as Passkeys).
   * Without user verification it will be a second factor authentication (2FA), typically done
   * after a password check.
   *
   * More on WebAuthN User Verification: https://www.w3.org/TR/webauthn/#user-verification
   *
   * @generated from field: bool user_verified = 4;
   */
  userVerified: boolean;
};

/**
 * @generated from message zitadel.resources.user.v3alpha.WebAuthN
 */
export declare type WebAuthNJson = {
  /**
   * unique identifier of the WebAuthN authenticator.
   *
   * @generated from field: string web_auth_n_id = 1;
   */
  webAuthNId?: string;

  /**
   * Name of the WebAuthN authenticator. This is used for easier identification.
   *
   * @generated from field: string name = 2;
   */
  name?: string;

  /**
   * State whether the WebAuthN registration has been completed.
   *
   * @generated from field: bool is_verified = 3;
   */
  isVerified?: boolean;

  /**
   * States if the user has been verified during the registration. Authentication with this device
   * will be considered as multi-factor authentication (MFA) without the need to check a password
   * (typically known as Passkeys).
   * Without user verification it will be a second factor authentication (2FA), typically done
   * after a password check.
   *
   * More on WebAuthN User Verification: https://www.w3.org/TR/webauthn/#user-verification
   *
   * @generated from field: bool user_verified = 4;
   */
  userVerified?: boolean;
};

/**
 * Describes the message zitadel.resources.user.v3alpha.WebAuthN.
 * Use `create(WebAuthNSchema)` to create a new message.
 */
export declare const WebAuthNSchema: GenMessage<WebAuthN, {jsonType: WebAuthNJson}>;

/**
 * @generated from message zitadel.resources.user.v3alpha.StartWebAuthNRegistration
 */
export declare type StartWebAuthNRegistration = Message<"zitadel.resources.user.v3alpha.StartWebAuthNRegistration"> & {
  /**
   * Domain on which the user currently is or will be authenticated.
   *
   * @generated from field: string domain = 1;
   */
  domain: string;

  /**
   * Optionally specify the authenticator type of the passkey device (platform or cross-platform).
   * If none is provided, both values are allowed.
   *
   * @generated from field: zitadel.resources.user.v3alpha.WebAuthNAuthenticatorType authenticator_type = 2;
   */
  authenticatorType: WebAuthNAuthenticatorType;

  /**
   * Optionally provide a one time code generated by ZITADEL.
   * This is required to start the passkey registration without user authentication.
   *
   * @generated from field: optional zitadel.resources.user.v3alpha.AuthenticatorRegistrationCode code = 3;
   */
  code?: AuthenticatorRegistrationCode;
};

/**
 * @generated from message zitadel.resources.user.v3alpha.StartWebAuthNRegistration
 */
export declare type StartWebAuthNRegistrationJson = {
  /**
   * Domain on which the user currently is or will be authenticated.
   *
   * @generated from field: string domain = 1;
   */
  domain?: string;

  /**
   * Optionally specify the authenticator type of the passkey device (platform or cross-platform).
   * If none is provided, both values are allowed.
   *
   * @generated from field: zitadel.resources.user.v3alpha.WebAuthNAuthenticatorType authenticator_type = 2;
   */
  authenticatorType?: WebAuthNAuthenticatorTypeJson;

  /**
   * Optionally provide a one time code generated by ZITADEL.
   * This is required to start the passkey registration without user authentication.
   *
   * @generated from field: optional zitadel.resources.user.v3alpha.AuthenticatorRegistrationCode code = 3;
   */
  code?: AuthenticatorRegistrationCodeJson;
};

/**
 * Describes the message zitadel.resources.user.v3alpha.StartWebAuthNRegistration.
 * Use `create(StartWebAuthNRegistrationSchema)` to create a new message.
 */
export declare const StartWebAuthNRegistrationSchema: GenMessage<StartWebAuthNRegistration, {jsonType: StartWebAuthNRegistrationJson}>;

/**
 * @generated from message zitadel.resources.user.v3alpha.VerifyWebAuthNRegistration
 */
export declare type VerifyWebAuthNRegistration = Message<"zitadel.resources.user.v3alpha.VerifyWebAuthNRegistration"> & {
  /**
   * PublicKeyCredential Interface.
   * Generated helper methods populate the field from JSON created by a WebAuthN client.
   * See also:  https://www.w3.org/TR/webauthn/#publickeycredential
   *
   * @generated from field: google.protobuf.Struct public_key_credential = 1;
   */
  publicKeyCredential?: JsonObject;

  /**
   * Provide a name for the WebAuthN device. This will help identify it in the future.
   *
   * @generated from field: string web_auth_n_name = 2;
   */
  webAuthNName: string;
};

/**
 * @generated from message zitadel.resources.user.v3alpha.VerifyWebAuthNRegistration
 */
export declare type VerifyWebAuthNRegistrationJson = {
  /**
   * PublicKeyCredential Interface.
   * Generated helper methods populate the field from JSON created by a WebAuthN client.
   * See also:  https://www.w3.org/TR/webauthn/#publickeycredential
   *
   * @generated from field: google.protobuf.Struct public_key_credential = 1;
   */
  publicKeyCredential?: StructJson;

  /**
   * Provide a name for the WebAuthN device. This will help identify it in the future.
   *
   * @generated from field: string web_auth_n_name = 2;
   */
  webAuthNName?: string;
};

/**
 * Describes the message zitadel.resources.user.v3alpha.VerifyWebAuthNRegistration.
 * Use `create(VerifyWebAuthNRegistrationSchema)` to create a new message.
 */
export declare const VerifyWebAuthNRegistrationSchema: GenMessage<VerifyWebAuthNRegistration, {jsonType: VerifyWebAuthNRegistrationJson}>;

/**
 * @generated from message zitadel.resources.user.v3alpha.OTPSMS
 */
export declare type OTPSMS = Message<"zitadel.resources.user.v3alpha.OTPSMS"> & {
  /**
   * unique identifier of the one-time password (OTP) SMS authenticator.
   *
   * @generated from field: string otp_sms_id = 1;
   */
  otpSmsId: string;

  /**
   * The phone number used for the OTP SMS authenticator.
   *
   * @generated from field: string phone = 2;
   */
  phone: string;

  /**
   * State whether the OTP SMS registration has been completed.
   *
   * @generated from field: bool is_verified = 3;
   */
  isVerified: boolean;
};

/**
 * @generated from message zitadel.resources.user.v3alpha.OTPSMS
 */
export declare type OTPSMSJson = {
  /**
   * unique identifier of the one-time password (OTP) SMS authenticator.
   *
   * @generated from field: string otp_sms_id = 1;
   */
  otpSmsId?: string;

  /**
   * The phone number used for the OTP SMS authenticator.
   *
   * @generated from field: string phone = 2;
   */
  phone?: string;

  /**
   * State whether the OTP SMS registration has been completed.
   *
   * @generated from field: bool is_verified = 3;
   */
  isVerified?: boolean;
};

/**
 * Describes the message zitadel.resources.user.v3alpha.OTPSMS.
 * Use `create(OTPSMSSchema)` to create a new message.
 */
export declare const OTPSMSSchema: GenMessage<OTPSMS, {jsonType: OTPSMSJson}>;

/**
 * @generated from message zitadel.resources.user.v3alpha.OTPEmail
 */
export declare type OTPEmail = Message<"zitadel.resources.user.v3alpha.OTPEmail"> & {
  /**
   * unique identifier of the one-time password (OTP) Email authenticator.
   *
   * @generated from field: string otp_email_id = 1;
   */
  otpEmailId: string;

  /**
   * The email address used for the OTP Email authenticator.
   *
   * @generated from field: string address = 2;
   */
  address: string;

  /**
   * State whether the OTP Email registration has been completed.
   *
   * @generated from field: bool is_verified = 3;
   */
  isVerified: boolean;
};

/**
 * @generated from message zitadel.resources.user.v3alpha.OTPEmail
 */
export declare type OTPEmailJson = {
  /**
   * unique identifier of the one-time password (OTP) Email authenticator.
   *
   * @generated from field: string otp_email_id = 1;
   */
  otpEmailId?: string;

  /**
   * The email address used for the OTP Email authenticator.
   *
   * @generated from field: string address = 2;
   */
  address?: string;

  /**
   * State whether the OTP Email registration has been completed.
   *
   * @generated from field: bool is_verified = 3;
   */
  isVerified?: boolean;
};

/**
 * Describes the message zitadel.resources.user.v3alpha.OTPEmail.
 * Use `create(OTPEmailSchema)` to create a new message.
 */
export declare const OTPEmailSchema: GenMessage<OTPEmail, {jsonType: OTPEmailJson}>;

/**
 * @generated from message zitadel.resources.user.v3alpha.TOTP
 */
export declare type TOTP = Message<"zitadel.resources.user.v3alpha.TOTP"> & {
  /**
   * unique identifier of the time-based one-time password (TOTP) authenticator.
   *
   * @generated from field: string totp_id = 1;
   */
  totpId: string;

  /**
   * The name provided during registration. This is used for easier identification.
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * State whether the TOTP registration has been completed.
   *
   * @generated from field: bool is_verified = 3;
   */
  isVerified: boolean;
};

/**
 * @generated from message zitadel.resources.user.v3alpha.TOTP
 */
export declare type TOTPJson = {
  /**
   * unique identifier of the time-based one-time password (TOTP) authenticator.
   *
   * @generated from field: string totp_id = 1;
   */
  totpId?: string;

  /**
   * The name provided during registration. This is used for easier identification.
   *
   * @generated from field: string name = 2;
   */
  name?: string;

  /**
   * State whether the TOTP registration has been completed.
   *
   * @generated from field: bool is_verified = 3;
   */
  isVerified?: boolean;
};

/**
 * Describes the message zitadel.resources.user.v3alpha.TOTP.
 * Use `create(TOTPSchema)` to create a new message.
 */
export declare const TOTPSchema: GenMessage<TOTP, {jsonType: TOTPJson}>;

/**
 * @generated from message zitadel.resources.user.v3alpha.AuthenticationKey
 */
export declare type AuthenticationKey = Message<"zitadel.resources.user.v3alpha.AuthenticationKey"> & {
  /**
   * ID is the read-only unique identifier of the authentication key.
   *
   * @generated from field: string authentication_key_id = 1;
   */
  authenticationKeyId: string;

  /**
   * @generated from field: zitadel.resources.object.v3alpha.Details details = 2;
   */
  details?: Details;

  /**
   * the file type of the key
   *
   * @generated from field: zitadel.resources.user.v3alpha.AuthNKeyType type = 3;
   */
  type: AuthNKeyType;

  /**
   * After the expiration date, the key will no longer be usable for authentication.
   *
   * @generated from field: google.protobuf.Timestamp expiration_date = 4;
   */
  expirationDate?: Timestamp;
};

/**
 * @generated from message zitadel.resources.user.v3alpha.AuthenticationKey
 */
export declare type AuthenticationKeyJson = {
  /**
   * ID is the read-only unique identifier of the authentication key.
   *
   * @generated from field: string authentication_key_id = 1;
   */
  authenticationKeyId?: string;

  /**
   * @generated from field: zitadel.resources.object.v3alpha.Details details = 2;
   */
  details?: DetailsJson;

  /**
   * the file type of the key
   *
   * @generated from field: zitadel.resources.user.v3alpha.AuthNKeyType type = 3;
   */
  type?: AuthNKeyTypeJson;

  /**
   * After the expiration date, the key will no longer be usable for authentication.
   *
   * @generated from field: google.protobuf.Timestamp expiration_date = 4;
   */
  expirationDate?: TimestampJson;
};

/**
 * Describes the message zitadel.resources.user.v3alpha.AuthenticationKey.
 * Use `create(AuthenticationKeySchema)` to create a new message.
 */
export declare const AuthenticationKeySchema: GenMessage<AuthenticationKey, {jsonType: AuthenticationKeyJson}>;

/**
 * @generated from message zitadel.resources.user.v3alpha.IdentityProvider
 */
export declare type IdentityProvider = Message<"zitadel.resources.user.v3alpha.IdentityProvider"> & {
  /**
   * IDP ID is the read-only unique identifier of the identity provider in ZITADEL.
   *
   * @generated from field: string idp_id = 1;
   */
  idpId: string;

  /**
   * IDP name is the name of the identity provider in ZITADEL.
   *
   * @generated from field: string idp_name = 3;
   */
  idpName: string;

  /**
   * The user ID represents the ID provided by the identity provider.
   * This ID is used to link the user in ZITADEL with the identity provider.
   *
   * @generated from field: string user_id = 4;
   */
  userId: string;

  /**
   * The username represents the username provided by the identity provider.
   *
   * @generated from field: string username = 5;
   */
  username: string;
};

/**
 * @generated from message zitadel.resources.user.v3alpha.IdentityProvider
 */
export declare type IdentityProviderJson = {
  /**
   * IDP ID is the read-only unique identifier of the identity provider in ZITADEL.
   *
   * @generated from field: string idp_id = 1;
   */
  idpId?: string;

  /**
   * IDP name is the name of the identity provider in ZITADEL.
   *
   * @generated from field: string idp_name = 3;
   */
  idpName?: string;

  /**
   * The user ID represents the ID provided by the identity provider.
   * This ID is used to link the user in ZITADEL with the identity provider.
   *
   * @generated from field: string user_id = 4;
   */
  userId?: string;

  /**
   * The username represents the username provided by the identity provider.
   *
   * @generated from field: string username = 5;
   */
  username?: string;
};

/**
 * Describes the message zitadel.resources.user.v3alpha.IdentityProvider.
 * Use `create(IdentityProviderSchema)` to create a new message.
 */
export declare const IdentityProviderSchema: GenMessage<IdentityProvider, {jsonType: IdentityProviderJson}>;

/**
 * @generated from message zitadel.resources.user.v3alpha.SetAuthenticators
 */
export declare type SetAuthenticators = Message<"zitadel.resources.user.v3alpha.SetAuthenticators"> & {
  /**
   * @generated from field: repeated zitadel.resources.user.v3alpha.SetUsername usernames = 1;
   */
  usernames: SetUsername[];

  /**
   * @generated from field: zitadel.resources.user.v3alpha.SetPassword password = 2;
   */
  password?: SetPassword;
};

/**
 * @generated from message zitadel.resources.user.v3alpha.SetAuthenticators
 */
export declare type SetAuthenticatorsJson = {
  /**
   * @generated from field: repeated zitadel.resources.user.v3alpha.SetUsername usernames = 1;
   */
  usernames?: SetUsernameJson[];

  /**
   * @generated from field: zitadel.resources.user.v3alpha.SetPassword password = 2;
   */
  password?: SetPasswordJson;
};

/**
 * Describes the message zitadel.resources.user.v3alpha.SetAuthenticators.
 * Use `create(SetAuthenticatorsSchema)` to create a new message.
 */
export declare const SetAuthenticatorsSchema: GenMessage<SetAuthenticators, {jsonType: SetAuthenticatorsJson}>;

/**
 * @generated from message zitadel.resources.user.v3alpha.SetPassword
 */
export declare type SetPassword = Message<"zitadel.resources.user.v3alpha.SetPassword"> & {
  /**
   * @generated from oneof zitadel.resources.user.v3alpha.SetPassword.type
   */
  type: {
    /**
     * Provide the plain text password. ZITADEL will take care to store it in a secure way (hash).
     *
     * @generated from field: string password = 1;
     */
    value: string;
    case: "password";
  } | {
    /**
     * Encoded hash of a password in Modular Crypt Format:
     * https://zitadel.com/docs/concepts/architecture/secrets#hashed-secrets.
     *
     * @generated from field: string hash = 2;
     */
    value: string;
    case: "hash";
  } | { case: undefined; value?: undefined };

  /**
   * Provide if the user needs to change the password on the next use.
   *
   * @generated from field: bool change_required = 3;
   */
  changeRequired: boolean;

  /**
   * If neither, the current password nor a verification code generated by the PasswordReset is provided,
   * the user must be granted permission to set a password.
   *
   * @generated from oneof zitadel.resources.user.v3alpha.SetPassword.verification
   */
  verification: {
    /**
     * Provide the current password to verify you're allowed to change the password.
     *
     * @generated from field: string current_password = 4;
     */
    value: string;
    case: "currentPassword";
  } | {
    /**
     * Or provider the verification code generated during password reset request.
     *
     * @generated from field: string verification_code = 5;
     */
    value: string;
    case: "verificationCode";
  } | { case: undefined; value?: undefined };
};

/**
 * @generated from message zitadel.resources.user.v3alpha.SetPassword
 */
export declare type SetPasswordJson = {
  /**
   * Provide the plain text password. ZITADEL will take care to store it in a secure way (hash).
   *
   * @generated from field: string password = 1;
   */
  password?: string;

  /**
   * Encoded hash of a password in Modular Crypt Format:
   * https://zitadel.com/docs/concepts/architecture/secrets#hashed-secrets.
   *
   * @generated from field: string hash = 2;
   */
  hash?: string;

  /**
   * Provide if the user needs to change the password on the next use.
   *
   * @generated from field: bool change_required = 3;
   */
  changeRequired?: boolean;

  /**
   * Provide the current password to verify you're allowed to change the password.
   *
   * @generated from field: string current_password = 4;
   */
  currentPassword?: string;

  /**
   * Or provider the verification code generated during password reset request.
   *
   * @generated from field: string verification_code = 5;
   */
  verificationCode?: string;
};

/**
 * Describes the message zitadel.resources.user.v3alpha.SetPassword.
 * Use `create(SetPasswordSchema)` to create a new message.
 */
export declare const SetPasswordSchema: GenMessage<SetPassword, {jsonType: SetPasswordJson}>;

/**
 * @generated from message zitadel.resources.user.v3alpha.SendPasswordResetEmail
 */
export declare type SendPasswordResetEmail = Message<"zitadel.resources.user.v3alpha.SendPasswordResetEmail"> & {
  /**
   * Optionally set a url_template, which will be used in the password reset mail
   * sent by ZITADEL to guide the user to your password change page.
   * If no template is set, the default ZITADEL url will be used.
   *
   * @generated from field: optional string url_template = 2;
   */
  urlTemplate?: string;
};

/**
 * @generated from message zitadel.resources.user.v3alpha.SendPasswordResetEmail
 */
export declare type SendPasswordResetEmailJson = {
  /**
   * Optionally set a url_template, which will be used in the password reset mail
   * sent by ZITADEL to guide the user to your password change page.
   * If no template is set, the default ZITADEL url will be used.
   *
   * @generated from field: optional string url_template = 2;
   */
  urlTemplate?: string;
};

/**
 * Describes the message zitadel.resources.user.v3alpha.SendPasswordResetEmail.
 * Use `create(SendPasswordResetEmailSchema)` to create a new message.
 */
export declare const SendPasswordResetEmailSchema: GenMessage<SendPasswordResetEmail, {jsonType: SendPasswordResetEmailJson}>;

/**
 * @generated from message zitadel.resources.user.v3alpha.SendPasswordResetSMS
 */
export declare type SendPasswordResetSMS = Message<"zitadel.resources.user.v3alpha.SendPasswordResetSMS"> & {
};

/**
 * @generated from message zitadel.resources.user.v3alpha.SendPasswordResetSMS
 */
export declare type SendPasswordResetSMSJson = {
};

/**
 * Describes the message zitadel.resources.user.v3alpha.SendPasswordResetSMS.
 * Use `create(SendPasswordResetSMSSchema)` to create a new message.
 */
export declare const SendPasswordResetSMSSchema: GenMessage<SendPasswordResetSMS, {jsonType: SendPasswordResetSMSJson}>;

/**
 * @generated from message zitadel.resources.user.v3alpha.ReturnPasswordResetCode
 */
export declare type ReturnPasswordResetCode = Message<"zitadel.resources.user.v3alpha.ReturnPasswordResetCode"> & {
};

/**
 * @generated from message zitadel.resources.user.v3alpha.ReturnPasswordResetCode
 */
export declare type ReturnPasswordResetCodeJson = {
};

/**
 * Describes the message zitadel.resources.user.v3alpha.ReturnPasswordResetCode.
 * Use `create(ReturnPasswordResetCodeSchema)` to create a new message.
 */
export declare const ReturnPasswordResetCodeSchema: GenMessage<ReturnPasswordResetCode, {jsonType: ReturnPasswordResetCodeJson}>;

/**
 * @generated from message zitadel.resources.user.v3alpha.AuthenticatorRegistrationCode
 */
export declare type AuthenticatorRegistrationCode = Message<"zitadel.resources.user.v3alpha.AuthenticatorRegistrationCode"> & {
  /**
   * ID to the one time code generated by ZITADEL.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * one time code generated by ZITADEL.
   *
   * @generated from field: string code = 2;
   */
  code: string;
};

/**
 * @generated from message zitadel.resources.user.v3alpha.AuthenticatorRegistrationCode
 */
export declare type AuthenticatorRegistrationCodeJson = {
  /**
   * ID to the one time code generated by ZITADEL.
   *
   * @generated from field: string id = 1;
   */
  id?: string;

  /**
   * one time code generated by ZITADEL.
   *
   * @generated from field: string code = 2;
   */
  code?: string;
};

/**
 * Describes the message zitadel.resources.user.v3alpha.AuthenticatorRegistrationCode.
 * Use `create(AuthenticatorRegistrationCodeSchema)` to create a new message.
 */
export declare const AuthenticatorRegistrationCodeSchema: GenMessage<AuthenticatorRegistrationCode, {jsonType: AuthenticatorRegistrationCodeJson}>;

/**
 * @generated from message zitadel.resources.user.v3alpha.SendWebAuthNRegistrationLink
 */
export declare type SendWebAuthNRegistrationLink = Message<"zitadel.resources.user.v3alpha.SendWebAuthNRegistrationLink"> & {
  /**
   * Optionally set a url_template, which will be used in the mail sent by ZITADEL
   * to guide the user to your passkey registration page.
   * If no template is set, the default ZITADEL url will be used.
   *
   * @generated from field: optional string url_template = 1;
   */
  urlTemplate?: string;
};

/**
 * @generated from message zitadel.resources.user.v3alpha.SendWebAuthNRegistrationLink
 */
export declare type SendWebAuthNRegistrationLinkJson = {
  /**
   * Optionally set a url_template, which will be used in the mail sent by ZITADEL
   * to guide the user to your passkey registration page.
   * If no template is set, the default ZITADEL url will be used.
   *
   * @generated from field: optional string url_template = 1;
   */
  urlTemplate?: string;
};

/**
 * Describes the message zitadel.resources.user.v3alpha.SendWebAuthNRegistrationLink.
 * Use `create(SendWebAuthNRegistrationLinkSchema)` to create a new message.
 */
export declare const SendWebAuthNRegistrationLinkSchema: GenMessage<SendWebAuthNRegistrationLink, {jsonType: SendWebAuthNRegistrationLinkJson}>;

/**
 * @generated from message zitadel.resources.user.v3alpha.ReturnWebAuthNRegistrationCode
 */
export declare type ReturnWebAuthNRegistrationCode = Message<"zitadel.resources.user.v3alpha.ReturnWebAuthNRegistrationCode"> & {
};

/**
 * @generated from message zitadel.resources.user.v3alpha.ReturnWebAuthNRegistrationCode
 */
export declare type ReturnWebAuthNRegistrationCodeJson = {
};

/**
 * Describes the message zitadel.resources.user.v3alpha.ReturnWebAuthNRegistrationCode.
 * Use `create(ReturnWebAuthNRegistrationCodeSchema)` to create a new message.
 */
export declare const ReturnWebAuthNRegistrationCodeSchema: GenMessage<ReturnWebAuthNRegistrationCode, {jsonType: ReturnWebAuthNRegistrationCodeJson}>;

/**
 * @generated from message zitadel.resources.user.v3alpha.RedirectURLs
 */
export declare type RedirectURLs = Message<"zitadel.resources.user.v3alpha.RedirectURLs"> & {
  /**
   * URL to which the user will be redirected after a successful login.
   *
   * @generated from field: string success_url = 1;
   */
  successUrl: string;

  /**
   * URL to which the user will be redirected after a failed login.
   *
   * @generated from field: string failure_url = 2;
   */
  failureUrl: string;
};

/**
 * @generated from message zitadel.resources.user.v3alpha.RedirectURLs
 */
export declare type RedirectURLsJson = {
  /**
   * URL to which the user will be redirected after a successful login.
   *
   * @generated from field: string success_url = 1;
   */
  successUrl?: string;

  /**
   * URL to which the user will be redirected after a failed login.
   *
   * @generated from field: string failure_url = 2;
   */
  failureUrl?: string;
};

/**
 * Describes the message zitadel.resources.user.v3alpha.RedirectURLs.
 * Use `create(RedirectURLsSchema)` to create a new message.
 */
export declare const RedirectURLsSchema: GenMessage<RedirectURLs, {jsonType: RedirectURLsJson}>;

/**
 * @generated from message zitadel.resources.user.v3alpha.LDAPCredentials
 */
export declare type LDAPCredentials = Message<"zitadel.resources.user.v3alpha.LDAPCredentials"> & {
  /**
   * Username used to login through LDAP.
   *
   * @generated from field: string username = 1;
   */
  username: string;

  /**
   * Password used to login through LDAP.
   *
   * @generated from field: string password = 2;
   */
  password: string;
};

/**
 * @generated from message zitadel.resources.user.v3alpha.LDAPCredentials
 */
export declare type LDAPCredentialsJson = {
  /**
   * Username used to login through LDAP.
   *
   * @generated from field: string username = 1;
   */
  username?: string;

  /**
   * Password used to login through LDAP.
   *
   * @generated from field: string password = 2;
   */
  password?: string;
};

/**
 * Describes the message zitadel.resources.user.v3alpha.LDAPCredentials.
 * Use `create(LDAPCredentialsSchema)` to create a new message.
 */
export declare const LDAPCredentialsSchema: GenMessage<LDAPCredentials, {jsonType: LDAPCredentialsJson}>;

/**
 * @generated from message zitadel.resources.user.v3alpha.IdentityProviderIntent
 */
export declare type IdentityProviderIntent = Message<"zitadel.resources.user.v3alpha.IdentityProviderIntent"> & {
  /**
   * ID of the identity provider (IDP) intent.
   *
   * @generated from field: string idp_intent_id = 1;
   */
  idpIntentId: string;

  /**
   * Token of the identity provider (IDP) intent.
   *
   * @generated from field: string idp_intent_token = 2;
   */
  idpIntentToken: string;

  /**
   * If the user was already federated and linked to a ZITADEL user, it's id will be returned.
   *
   * @generated from field: optional string user_id = 3;
   */
  userId?: string;
};

/**
 * @generated from message zitadel.resources.user.v3alpha.IdentityProviderIntent
 */
export declare type IdentityProviderIntentJson = {
  /**
   * ID of the identity provider (IDP) intent.
   *
   * @generated from field: string idp_intent_id = 1;
   */
  idpIntentId?: string;

  /**
   * Token of the identity provider (IDP) intent.
   *
   * @generated from field: string idp_intent_token = 2;
   */
  idpIntentToken?: string;

  /**
   * If the user was already federated and linked to a ZITADEL user, it's id will be returned.
   *
   * @generated from field: optional string user_id = 3;
   */
  userId?: string;
};

/**
 * Describes the message zitadel.resources.user.v3alpha.IdentityProviderIntent.
 * Use `create(IdentityProviderIntentSchema)` to create a new message.
 */
export declare const IdentityProviderIntentSchema: GenMessage<IdentityProviderIntent, {jsonType: IdentityProviderIntentJson}>;

/**
 * @generated from message zitadel.resources.user.v3alpha.IDPInformation
 */
export declare type IDPInformation = Message<"zitadel.resources.user.v3alpha.IDPInformation"> & {
  /**
   * ID of the identity provider.
   *
   * @generated from field: string idp_id = 1;
   */
  idpId: string;

  /**
   * ID of the user provided by the identity provider.
   *
   * @generated from field: string user_id = 2;
   */
  userId: string;

  /**
   * Username of the user provided by the identity provider.
   *
   * @generated from field: string user_name = 3;
   */
  userName: string;

  /**
   * Complete information returned by the identity provider.
   *
   * @generated from field: google.protobuf.Struct raw_information = 4;
   */
  rawInformation?: JsonObject;

  /**
   * additional access information returned by the identity provider.
   *
   * @generated from oneof zitadel.resources.user.v3alpha.IDPInformation.access
   */
  access: {
    /**
     * OAuth/OIDC access (and id_token) returned by the identity provider.
     *
     * @generated from field: zitadel.resources.user.v3alpha.IDPOAuthAccessInformation oauth = 5;
     */
    value: IDPOAuthAccessInformation;
    case: "oauth";
  } | {
    /**
     * LDAP entity attributes returned by the identity provider
     *
     * @generated from field: zitadel.resources.user.v3alpha.IDPLDAPAccessInformation ldap = 6;
     */
    value: IDPLDAPAccessInformation;
    case: "ldap";
  } | {
    /**
     * SAMLResponse returned by the identity provider
     *
     * @generated from field: zitadel.resources.user.v3alpha.IDPSAMLAccessInformation saml = 7;
     */
    value: IDPSAMLAccessInformation;
    case: "saml";
  } | { case: undefined; value?: undefined };
};

/**
 * @generated from message zitadel.resources.user.v3alpha.IDPInformation
 */
export declare type IDPInformationJson = {
  /**
   * ID of the identity provider.
   *
   * @generated from field: string idp_id = 1;
   */
  idpId?: string;

  /**
   * ID of the user provided by the identity provider.
   *
   * @generated from field: string user_id = 2;
   */
  userId?: string;

  /**
   * Username of the user provided by the identity provider.
   *
   * @generated from field: string user_name = 3;
   */
  userName?: string;

  /**
   * Complete information returned by the identity provider.
   *
   * @generated from field: google.protobuf.Struct raw_information = 4;
   */
  rawInformation?: StructJson;

  /**
   * OAuth/OIDC access (and id_token) returned by the identity provider.
   *
   * @generated from field: zitadel.resources.user.v3alpha.IDPOAuthAccessInformation oauth = 5;
   */
  oauth?: IDPOAuthAccessInformationJson;

  /**
   * LDAP entity attributes returned by the identity provider
   *
   * @generated from field: zitadel.resources.user.v3alpha.IDPLDAPAccessInformation ldap = 6;
   */
  ldap?: IDPLDAPAccessInformationJson;

  /**
   * SAMLResponse returned by the identity provider
   *
   * @generated from field: zitadel.resources.user.v3alpha.IDPSAMLAccessInformation saml = 7;
   */
  saml?: IDPSAMLAccessInformationJson;
};

/**
 * Describes the message zitadel.resources.user.v3alpha.IDPInformation.
 * Use `create(IDPInformationSchema)` to create a new message.
 */
export declare const IDPInformationSchema: GenMessage<IDPInformation, {jsonType: IDPInformationJson}>;

/**
 * @generated from message zitadel.resources.user.v3alpha.IDPOAuthAccessInformation
 */
export declare type IDPOAuthAccessInformation = Message<"zitadel.resources.user.v3alpha.IDPOAuthAccessInformation"> & {
  /**
   * The access_token returned by the identity provider.
   *
   * @generated from field: string access_token = 1;
   */
  accessToken: string;

  /**
   * In case the provider returned an id_token.
   *
   * @generated from field: optional string id_token = 2;
   */
  idToken?: string;
};

/**
 * @generated from message zitadel.resources.user.v3alpha.IDPOAuthAccessInformation
 */
export declare type IDPOAuthAccessInformationJson = {
  /**
   * The access_token returned by the identity provider.
   *
   * @generated from field: string access_token = 1;
   */
  accessToken?: string;

  /**
   * In case the provider returned an id_token.
   *
   * @generated from field: optional string id_token = 2;
   */
  idToken?: string;
};

/**
 * Describes the message zitadel.resources.user.v3alpha.IDPOAuthAccessInformation.
 * Use `create(IDPOAuthAccessInformationSchema)` to create a new message.
 */
export declare const IDPOAuthAccessInformationSchema: GenMessage<IDPOAuthAccessInformation, {jsonType: IDPOAuthAccessInformationJson}>;

/**
 * @generated from message zitadel.resources.user.v3alpha.IDPLDAPAccessInformation
 */
export declare type IDPLDAPAccessInformation = Message<"zitadel.resources.user.v3alpha.IDPLDAPAccessInformation"> & {
  /**
   * The attributes of the user returned by the identity provider.
   *
   * @generated from field: google.protobuf.Struct attributes = 1;
   */
  attributes?: JsonObject;
};

/**
 * @generated from message zitadel.resources.user.v3alpha.IDPLDAPAccessInformation
 */
export declare type IDPLDAPAccessInformationJson = {
  /**
   * The attributes of the user returned by the identity provider.
   *
   * @generated from field: google.protobuf.Struct attributes = 1;
   */
  attributes?: StructJson;
};

/**
 * Describes the message zitadel.resources.user.v3alpha.IDPLDAPAccessInformation.
 * Use `create(IDPLDAPAccessInformationSchema)` to create a new message.
 */
export declare const IDPLDAPAccessInformationSchema: GenMessage<IDPLDAPAccessInformation, {jsonType: IDPLDAPAccessInformationJson}>;

/**
 * @generated from message zitadel.resources.user.v3alpha.IDPSAMLAccessInformation
 */
export declare type IDPSAMLAccessInformation = Message<"zitadel.resources.user.v3alpha.IDPSAMLAccessInformation"> & {
  /**
   * The SAML assertion returned by the identity provider.
   *
   * @generated from field: bytes assertion = 1;
   */
  assertion: Uint8Array;
};

/**
 * @generated from message zitadel.resources.user.v3alpha.IDPSAMLAccessInformation
 */
export declare type IDPSAMLAccessInformationJson = {
  /**
   * The SAML assertion returned by the identity provider.
   *
   * @generated from field: bytes assertion = 1;
   */
  assertion?: string;
};

/**
 * Describes the message zitadel.resources.user.v3alpha.IDPSAMLAccessInformation.
 * Use `create(IDPSAMLAccessInformationSchema)` to create a new message.
 */
export declare const IDPSAMLAccessInformationSchema: GenMessage<IDPSAMLAccessInformation, {jsonType: IDPSAMLAccessInformationJson}>;

/**
 * @generated from message zitadel.resources.user.v3alpha.IDPAuthenticator
 */
export declare type IDPAuthenticator = Message<"zitadel.resources.user.v3alpha.IDPAuthenticator"> & {
  /**
   * ID of the identity provider
   *
   * @generated from field: string idp_id = 1;
   */
  idpId: string;

  /**
   * ID of the user provided by the identity provider
   *
   * @generated from field: string user_id = 2;
   */
  userId: string;

  /**
   * Username of the user provided by the identity provider.
   *
   * @generated from field: string user_name = 3;
   */
  userName: string;
};

/**
 * @generated from message zitadel.resources.user.v3alpha.IDPAuthenticator
 */
export declare type IDPAuthenticatorJson = {
  /**
   * ID of the identity provider
   *
   * @generated from field: string idp_id = 1;
   */
  idpId?: string;

  /**
   * ID of the user provided by the identity provider
   *
   * @generated from field: string user_id = 2;
   */
  userId?: string;

  /**
   * Username of the user provided by the identity provider.
   *
   * @generated from field: string user_name = 3;
   */
  userName?: string;
};

/**
 * Describes the message zitadel.resources.user.v3alpha.IDPAuthenticator.
 * Use `create(IDPAuthenticatorSchema)` to create a new message.
 */
export declare const IDPAuthenticatorSchema: GenMessage<IDPAuthenticator, {jsonType: IDPAuthenticatorJson}>;

/**
 * @generated from enum zitadel.resources.user.v3alpha.AuthNKeyType
 */
export enum AuthNKeyType {
  /**
   * @generated from enum value: AUTHN_KEY_TYPE_UNSPECIFIED = 0;
   */
  AUTHN_KEY_TYPE_UNSPECIFIED = 0,

  /**
   * @generated from enum value: AUTHN_KEY_TYPE_JSON = 1;
   */
  AUTHN_KEY_TYPE_JSON = 1,
}

/**
 * @generated from enum zitadel.resources.user.v3alpha.AuthNKeyType
 */
export declare type AuthNKeyTypeJson = "AUTHN_KEY_TYPE_UNSPECIFIED" | "AUTHN_KEY_TYPE_JSON";

/**
 * Describes the enum zitadel.resources.user.v3alpha.AuthNKeyType.
 */
export declare const AuthNKeyTypeSchema: GenEnum<AuthNKeyType, AuthNKeyTypeJson>;

/**
 * @generated from enum zitadel.resources.user.v3alpha.WebAuthNAuthenticatorType
 */
export enum WebAuthNAuthenticatorType {
  /**
   * @generated from enum value: WEB_AUTH_N_AUTHENTICATOR_UNSPECIFIED = 0;
   */
  WEB_AUTH_N_AUTHENTICATOR_UNSPECIFIED = 0,

  /**
   * @generated from enum value: WEB_AUTH_N_AUTHENTICATOR_PLATFORM = 1;
   */
  WEB_AUTH_N_AUTHENTICATOR_PLATFORM = 1,

  /**
   * @generated from enum value: WEB_AUTH_N_AUTHENTICATOR_CROSS_PLATFORM = 2;
   */
  WEB_AUTH_N_AUTHENTICATOR_CROSS_PLATFORM = 2,
}

/**
 * @generated from enum zitadel.resources.user.v3alpha.WebAuthNAuthenticatorType
 */
export declare type WebAuthNAuthenticatorTypeJson = "WEB_AUTH_N_AUTHENTICATOR_UNSPECIFIED" | "WEB_AUTH_N_AUTHENTICATOR_PLATFORM" | "WEB_AUTH_N_AUTHENTICATOR_CROSS_PLATFORM";

/**
 * Describes the enum zitadel.resources.user.v3alpha.WebAuthNAuthenticatorType.
 */
export declare const WebAuthNAuthenticatorTypeSchema: GenEnum<WebAuthNAuthenticatorType, WebAuthNAuthenticatorTypeJson>;

