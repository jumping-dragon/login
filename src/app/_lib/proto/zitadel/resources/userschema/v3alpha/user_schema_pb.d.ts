// @generated by protoc-gen-es v2.6.0 with parameter "json_types=true,import_extension=js"
// @generated from file zitadel/resources/userschema/v3alpha/user_schema.proto (package zitadel.resources.userschema.v3alpha, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv2";
import type { JsonObject, Message } from "@bufbuild/protobuf";
import type { Details, DetailsJson, TextFilterMethod, TextFilterMethodJson } from "../../object/v3alpha/object_pb.js";
import type { StructJson } from "@bufbuild/protobuf/wkt";

/**
 * Describes the file zitadel/resources/userschema/v3alpha/user_schema.proto.
 */
export declare const file_zitadel_resources_userschema_v3alpha_user_schema: GenFile;

/**
 * @generated from message zitadel.resources.userschema.v3alpha.GetUserSchema
 */
export declare type GetUserSchema = Message<"zitadel.resources.userschema.v3alpha.GetUserSchema"> & {
  /**
   * Details provide some base information (such as the last change date) of the schema.
   *
   * @generated from field: zitadel.resources.object.v3alpha.Details details = 1;
   */
  details?: Details;

  /**
   * @generated from field: zitadel.resources.userschema.v3alpha.UserSchema config = 2;
   */
  config?: UserSchema;

  /**
   * Current state of the schema.
   *
   * @generated from field: zitadel.resources.userschema.v3alpha.State state = 3;
   */
  state: State;

  /**
   * Revision is a read only version of the schema, each update of the `schema`-field increases the revision.
   *
   * @generated from field: uint32 revision = 4;
   */
  revision: number;
};

/**
 * @generated from message zitadel.resources.userschema.v3alpha.GetUserSchema
 */
export declare type GetUserSchemaJson = {
  /**
   * Details provide some base information (such as the last change date) of the schema.
   *
   * @generated from field: zitadel.resources.object.v3alpha.Details details = 1;
   */
  details?: DetailsJson;

  /**
   * @generated from field: zitadel.resources.userschema.v3alpha.UserSchema config = 2;
   */
  config?: UserSchemaJson;

  /**
   * Current state of the schema.
   *
   * @generated from field: zitadel.resources.userschema.v3alpha.State state = 3;
   */
  state?: StateJson;

  /**
   * Revision is a read only version of the schema, each update of the `schema`-field increases the revision.
   *
   * @generated from field: uint32 revision = 4;
   */
  revision?: number;
};

/**
 * Describes the message zitadel.resources.userschema.v3alpha.GetUserSchema.
 * Use `create(GetUserSchemaSchema)` to create a new message.
 */
export declare const GetUserSchemaSchema: GenMessage<GetUserSchema, {jsonType: GetUserSchemaJson}>;

/**
 * @generated from message zitadel.resources.userschema.v3alpha.UserSchema
 */
export declare type UserSchema = Message<"zitadel.resources.userschema.v3alpha.UserSchema"> & {
  /**
   * Type is a human readable word describing the schema.
   *
   * @generated from field: string type = 1;
   */
  type: string;

  /**
   * @generated from oneof zitadel.resources.userschema.v3alpha.UserSchema.data_type
   */
  dataType: {
    /**
     * JSON schema representation defining the user.
     *
     * @generated from field: google.protobuf.Struct schema = 2;
     */
    value: JsonObject;
    case: "schema";
  } | { case: undefined; value?: undefined };

  /**
   * Defines the possible types of authenticators.
   *
   * @generated from field: repeated zitadel.resources.userschema.v3alpha.AuthenticatorType possible_authenticators = 3;
   */
  possibleAuthenticators: AuthenticatorType[];
};

/**
 * @generated from message zitadel.resources.userschema.v3alpha.UserSchema
 */
export declare type UserSchemaJson = {
  /**
   * Type is a human readable word describing the schema.
   *
   * @generated from field: string type = 1;
   */
  type?: string;

  /**
   * JSON schema representation defining the user.
   *
   * @generated from field: google.protobuf.Struct schema = 2;
   */
  schema?: StructJson;

  /**
   * Defines the possible types of authenticators.
   *
   * @generated from field: repeated zitadel.resources.userschema.v3alpha.AuthenticatorType possible_authenticators = 3;
   */
  possibleAuthenticators?: AuthenticatorTypeJson[];
};

/**
 * Describes the message zitadel.resources.userschema.v3alpha.UserSchema.
 * Use `create(UserSchemaSchema)` to create a new message.
 */
export declare const UserSchemaSchema: GenMessage<UserSchema, {jsonType: UserSchemaJson}>;

/**
 * @generated from message zitadel.resources.userschema.v3alpha.PatchUserSchema
 */
export declare type PatchUserSchema = Message<"zitadel.resources.userschema.v3alpha.PatchUserSchema"> & {
  /**
   * Type is a human readable word describing the schema.
   *
   * @generated from field: optional string type = 2;
   */
  type?: string;

  /**
   * @generated from oneof zitadel.resources.userschema.v3alpha.PatchUserSchema.data_type
   */
  dataType: {
    /**
     * JSON schema representation defining the user.
     *
     * @generated from field: google.protobuf.Struct schema = 3;
     */
    value: JsonObject;
    case: "schema";
  } | { case: undefined; value?: undefined };

  /**
   * Defines the possible types of authenticators.
   *
   * Removal of an authenticator does not remove the authenticator on a user.
   *
   * @generated from field: repeated zitadel.resources.userschema.v3alpha.AuthenticatorType possible_authenticators = 4;
   */
  possibleAuthenticators: AuthenticatorType[];
};

/**
 * @generated from message zitadel.resources.userschema.v3alpha.PatchUserSchema
 */
export declare type PatchUserSchemaJson = {
  /**
   * Type is a human readable word describing the schema.
   *
   * @generated from field: optional string type = 2;
   */
  type?: string;

  /**
   * JSON schema representation defining the user.
   *
   * @generated from field: google.protobuf.Struct schema = 3;
   */
  schema?: StructJson;

  /**
   * Defines the possible types of authenticators.
   *
   * Removal of an authenticator does not remove the authenticator on a user.
   *
   * @generated from field: repeated zitadel.resources.userschema.v3alpha.AuthenticatorType possible_authenticators = 4;
   */
  possibleAuthenticators?: AuthenticatorTypeJson[];
};

/**
 * Describes the message zitadel.resources.userschema.v3alpha.PatchUserSchema.
 * Use `create(PatchUserSchemaSchema)` to create a new message.
 */
export declare const PatchUserSchemaSchema: GenMessage<PatchUserSchema, {jsonType: PatchUserSchemaJson}>;

/**
 * @generated from message zitadel.resources.userschema.v3alpha.SearchFilter
 */
export declare type SearchFilter = Message<"zitadel.resources.userschema.v3alpha.SearchFilter"> & {
  /**
   * @generated from oneof zitadel.resources.userschema.v3alpha.SearchFilter.Filter
   */
  Filter: {
    /**
     * Union the results of each sub filter ('OR').
     *
     * @generated from field: zitadel.resources.userschema.v3alpha.OrFilter or_filter = 1;
     */
    value: OrFilter;
    case: "orFilter";
  } | {
    /**
     * Limit the result to match all sub queries ('AND').
     * Note that if you specify multiple queries, they will be implicitly used as andQueries.
     * Use the andFilter in combination with orFilter and notFilter.
     *
     * @generated from field: zitadel.resources.userschema.v3alpha.AndFilter and_filter = 2;
     */
    value: AndFilter;
    case: "andFilter";
  } | {
    /**
     * Exclude / Negate the result of the sub filter ('NOT').
     *
     * @generated from field: zitadel.resources.userschema.v3alpha.NotFilter not_filter = 3;
     */
    value: NotFilter;
    case: "notFilter";
  } | {
    /**
     * Limit the result to a specific schema type.
     *
     * @generated from field: zitadel.resources.userschema.v3alpha.TypeFilter type_filter = 5;
     */
    value: TypeFilter;
    case: "typeFilter";
  } | {
    /**
     * Limit the result to a specific state of the schema.
     *
     * @generated from field: zitadel.resources.userschema.v3alpha.StateFilter state_filter = 6;
     */
    value: StateFilter;
    case: "stateFilter";
  } | {
    /**
     * Limit the result to a specific schema ID.
     *
     * @generated from field: zitadel.resources.userschema.v3alpha.IDFilter id_filter = 7;
     */
    value: IDFilter;
    case: "idFilter";
  } | { case: undefined; value?: undefined };
};

/**
 * @generated from message zitadel.resources.userschema.v3alpha.SearchFilter
 */
export declare type SearchFilterJson = {
  /**
   * Union the results of each sub filter ('OR').
   *
   * @generated from field: zitadel.resources.userschema.v3alpha.OrFilter or_filter = 1;
   */
  orFilter?: OrFilterJson;

  /**
   * Limit the result to match all sub queries ('AND').
   * Note that if you specify multiple queries, they will be implicitly used as andQueries.
   * Use the andFilter in combination with orFilter and notFilter.
   *
   * @generated from field: zitadel.resources.userschema.v3alpha.AndFilter and_filter = 2;
   */
  andFilter?: AndFilterJson;

  /**
   * Exclude / Negate the result of the sub filter ('NOT').
   *
   * @generated from field: zitadel.resources.userschema.v3alpha.NotFilter not_filter = 3;
   */
  notFilter?: NotFilterJson;

  /**
   * Limit the result to a specific schema type.
   *
   * @generated from field: zitadel.resources.userschema.v3alpha.TypeFilter type_filter = 5;
   */
  typeFilter?: TypeFilterJson;

  /**
   * Limit the result to a specific state of the schema.
   *
   * @generated from field: zitadel.resources.userschema.v3alpha.StateFilter state_filter = 6;
   */
  stateFilter?: StateFilterJson;

  /**
   * Limit the result to a specific schema ID.
   *
   * @generated from field: zitadel.resources.userschema.v3alpha.IDFilter id_filter = 7;
   */
  idFilter?: IDFilterJson;
};

/**
 * Describes the message zitadel.resources.userschema.v3alpha.SearchFilter.
 * Use `create(SearchFilterSchema)` to create a new message.
 */
export declare const SearchFilterSchema: GenMessage<SearchFilter, {jsonType: SearchFilterJson}>;

/**
 * @generated from message zitadel.resources.userschema.v3alpha.OrFilter
 */
export declare type OrFilter = Message<"zitadel.resources.userschema.v3alpha.OrFilter"> & {
  /**
   * @generated from field: repeated zitadel.resources.userschema.v3alpha.SearchFilter queries = 1;
   */
  queries: SearchFilter[];
};

/**
 * @generated from message zitadel.resources.userschema.v3alpha.OrFilter
 */
export declare type OrFilterJson = {
  /**
   * @generated from field: repeated zitadel.resources.userschema.v3alpha.SearchFilter queries = 1;
   */
  queries?: SearchFilterJson[];
};

/**
 * Describes the message zitadel.resources.userschema.v3alpha.OrFilter.
 * Use `create(OrFilterSchema)` to create a new message.
 */
export declare const OrFilterSchema: GenMessage<OrFilter, {jsonType: OrFilterJson}>;

/**
 * @generated from message zitadel.resources.userschema.v3alpha.AndFilter
 */
export declare type AndFilter = Message<"zitadel.resources.userschema.v3alpha.AndFilter"> & {
  /**
   * @generated from field: repeated zitadel.resources.userschema.v3alpha.SearchFilter queries = 1;
   */
  queries: SearchFilter[];
};

/**
 * @generated from message zitadel.resources.userschema.v3alpha.AndFilter
 */
export declare type AndFilterJson = {
  /**
   * @generated from field: repeated zitadel.resources.userschema.v3alpha.SearchFilter queries = 1;
   */
  queries?: SearchFilterJson[];
};

/**
 * Describes the message zitadel.resources.userschema.v3alpha.AndFilter.
 * Use `create(AndFilterSchema)` to create a new message.
 */
export declare const AndFilterSchema: GenMessage<AndFilter, {jsonType: AndFilterJson}>;

/**
 * @generated from message zitadel.resources.userschema.v3alpha.NotFilter
 */
export declare type NotFilter = Message<"zitadel.resources.userschema.v3alpha.NotFilter"> & {
  /**
   * @generated from field: zitadel.resources.userschema.v3alpha.SearchFilter filter = 1;
   */
  filter?: SearchFilter;
};

/**
 * @generated from message zitadel.resources.userschema.v3alpha.NotFilter
 */
export declare type NotFilterJson = {
  /**
   * @generated from field: zitadel.resources.userschema.v3alpha.SearchFilter filter = 1;
   */
  filter?: SearchFilterJson;
};

/**
 * Describes the message zitadel.resources.userschema.v3alpha.NotFilter.
 * Use `create(NotFilterSchema)` to create a new message.
 */
export declare const NotFilterSchema: GenMessage<NotFilter, {jsonType: NotFilterJson}>;

/**
 * @generated from message zitadel.resources.userschema.v3alpha.IDFilter
 */
export declare type IDFilter = Message<"zitadel.resources.userschema.v3alpha.IDFilter"> & {
  /**
   * Defines the ID of the user schema to filter for.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * Defines which text comparison method used for the id filter.
   *
   * @generated from field: zitadel.resources.object.v3alpha.TextFilterMethod method = 2;
   */
  method: TextFilterMethod;
};

/**
 * @generated from message zitadel.resources.userschema.v3alpha.IDFilter
 */
export declare type IDFilterJson = {
  /**
   * Defines the ID of the user schema to filter for.
   *
   * @generated from field: string id = 1;
   */
  id?: string;

  /**
   * Defines which text comparison method used for the id filter.
   *
   * @generated from field: zitadel.resources.object.v3alpha.TextFilterMethod method = 2;
   */
  method?: TextFilterMethodJson;
};

/**
 * Describes the message zitadel.resources.userschema.v3alpha.IDFilter.
 * Use `create(IDFilterSchema)` to create a new message.
 */
export declare const IDFilterSchema: GenMessage<IDFilter, {jsonType: IDFilterJson}>;

/**
 * @generated from message zitadel.resources.userschema.v3alpha.TypeFilter
 */
export declare type TypeFilter = Message<"zitadel.resources.userschema.v3alpha.TypeFilter"> & {
  /**
   * Defines which type to filter for.
   *
   * @generated from field: string type = 1;
   */
  type: string;

  /**
   * Defines which text comparison method used for the type filter.
   *
   * @generated from field: zitadel.resources.object.v3alpha.TextFilterMethod method = 2;
   */
  method: TextFilterMethod;
};

/**
 * @generated from message zitadel.resources.userschema.v3alpha.TypeFilter
 */
export declare type TypeFilterJson = {
  /**
   * Defines which type to filter for.
   *
   * @generated from field: string type = 1;
   */
  type?: string;

  /**
   * Defines which text comparison method used for the type filter.
   *
   * @generated from field: zitadel.resources.object.v3alpha.TextFilterMethod method = 2;
   */
  method?: TextFilterMethodJson;
};

/**
 * Describes the message zitadel.resources.userschema.v3alpha.TypeFilter.
 * Use `create(TypeFilterSchema)` to create a new message.
 */
export declare const TypeFilterSchema: GenMessage<TypeFilter, {jsonType: TypeFilterJson}>;

/**
 * @generated from message zitadel.resources.userschema.v3alpha.StateFilter
 */
export declare type StateFilter = Message<"zitadel.resources.userschema.v3alpha.StateFilter"> & {
  /**
   * Defines the state to filter for.
   *
   * @generated from field: zitadel.resources.userschema.v3alpha.State state = 1;
   */
  state: State;
};

/**
 * @generated from message zitadel.resources.userschema.v3alpha.StateFilter
 */
export declare type StateFilterJson = {
  /**
   * Defines the state to filter for.
   *
   * @generated from field: zitadel.resources.userschema.v3alpha.State state = 1;
   */
  state?: StateJson;
};

/**
 * Describes the message zitadel.resources.userschema.v3alpha.StateFilter.
 * Use `create(StateFilterSchema)` to create a new message.
 */
export declare const StateFilterSchema: GenMessage<StateFilter, {jsonType: StateFilterJson}>;

/**
 * @generated from enum zitadel.resources.userschema.v3alpha.FieldName
 */
export enum FieldName {
  /**
   * @generated from enum value: FIELD_NAME_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: FIELD_NAME_TYPE = 1;
   */
  TYPE = 1,

  /**
   * @generated from enum value: FIELD_NAME_STATE = 2;
   */
  STATE = 2,

  /**
   * @generated from enum value: FIELD_NAME_REVISION = 3;
   */
  REVISION = 3,

  /**
   * @generated from enum value: FIELD_NAME_CHANGE_DATE = 4;
   */
  CHANGE_DATE = 4,

  /**
   * @generated from enum value: FIELD_NAME_CREATION_DATE = 5;
   */
  CREATION_DATE = 5,
}

/**
 * @generated from enum zitadel.resources.userschema.v3alpha.FieldName
 */
export declare type FieldNameJson = "FIELD_NAME_UNSPECIFIED" | "FIELD_NAME_TYPE" | "FIELD_NAME_STATE" | "FIELD_NAME_REVISION" | "FIELD_NAME_CHANGE_DATE" | "FIELD_NAME_CREATION_DATE";

/**
 * Describes the enum zitadel.resources.userschema.v3alpha.FieldName.
 */
export declare const FieldNameSchema: GenEnum<FieldName, FieldNameJson>;

/**
 * @generated from enum zitadel.resources.userschema.v3alpha.State
 */
export enum State {
  /**
   * @generated from enum value: STATE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: STATE_ACTIVE = 1;
   */
  ACTIVE = 1,

  /**
   * @generated from enum value: STATE_INACTIVE = 2;
   */
  INACTIVE = 2,
}

/**
 * @generated from enum zitadel.resources.userschema.v3alpha.State
 */
export declare type StateJson = "STATE_UNSPECIFIED" | "STATE_ACTIVE" | "STATE_INACTIVE";

/**
 * Describes the enum zitadel.resources.userschema.v3alpha.State.
 */
export declare const StateSchema: GenEnum<State, StateJson>;

/**
 * @generated from enum zitadel.resources.userschema.v3alpha.AuthenticatorType
 */
export enum AuthenticatorType {
  /**
   * @generated from enum value: AUTHENTICATOR_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: AUTHENTICATOR_TYPE_USERNAME = 1;
   */
  USERNAME = 1,

  /**
   * @generated from enum value: AUTHENTICATOR_TYPE_PASSWORD = 2;
   */
  PASSWORD = 2,

  /**
   * @generated from enum value: AUTHENTICATOR_TYPE_WEBAUTHN = 3;
   */
  WEBAUTHN = 3,

  /**
   * @generated from enum value: AUTHENTICATOR_TYPE_TOTP = 4;
   */
  TOTP = 4,

  /**
   * @generated from enum value: AUTHENTICATOR_TYPE_OTP_EMAIL = 5;
   */
  OTP_EMAIL = 5,

  /**
   * @generated from enum value: AUTHENTICATOR_TYPE_OTP_SMS = 6;
   */
  OTP_SMS = 6,

  /**
   * @generated from enum value: AUTHENTICATOR_TYPE_AUTHENTICATION_KEY = 7;
   */
  AUTHENTICATION_KEY = 7,

  /**
   * @generated from enum value: AUTHENTICATOR_TYPE_IDENTITY_PROVIDER = 8;
   */
  IDENTITY_PROVIDER = 8,
}

/**
 * @generated from enum zitadel.resources.userschema.v3alpha.AuthenticatorType
 */
export declare type AuthenticatorTypeJson = "AUTHENTICATOR_TYPE_UNSPECIFIED" | "AUTHENTICATOR_TYPE_USERNAME" | "AUTHENTICATOR_TYPE_PASSWORD" | "AUTHENTICATOR_TYPE_WEBAUTHN" | "AUTHENTICATOR_TYPE_TOTP" | "AUTHENTICATOR_TYPE_OTP_EMAIL" | "AUTHENTICATOR_TYPE_OTP_SMS" | "AUTHENTICATOR_TYPE_AUTHENTICATION_KEY" | "AUTHENTICATOR_TYPE_IDENTITY_PROVIDER";

/**
 * Describes the enum zitadel.resources.userschema.v3alpha.AuthenticatorType.
 */
export declare const AuthenticatorTypeSchema: GenEnum<AuthenticatorType, AuthenticatorTypeJson>;

