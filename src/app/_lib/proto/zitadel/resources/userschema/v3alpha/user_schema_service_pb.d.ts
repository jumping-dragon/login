// @generated by protoc-gen-es v2.6.0 with parameter "json_types=true,import_extension=js"
// @generated from file zitadel/resources/userschema/v3alpha/user_schema_service.proto (package zitadel.resources.userschema.v3alpha, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import type { Message } from "@bufbuild/protobuf";
import type { Instance, InstanceJson } from "../../../object/v3alpha/object_pb.js";
import type { Details, DetailsJson, ListDetails, ListDetailsJson, SearchQuery, SearchQueryJson } from "../../object/v3alpha/object_pb.js";
import type { FieldName, FieldNameJson, GetUserSchema, GetUserSchemaJson, PatchUserSchema, PatchUserSchemaJson, SearchFilter, SearchFilterJson, UserSchema, UserSchemaJson } from "./user_schema_pb.js";

/**
 * Describes the file zitadel/resources/userschema/v3alpha/user_schema_service.proto.
 */
export declare const file_zitadel_resources_userschema_v3alpha_user_schema_service: GenFile;

/**
 * @generated from message zitadel.resources.userschema.v3alpha.SearchUserSchemasRequest
 */
export declare type SearchUserSchemasRequest = Message<"zitadel.resources.userschema.v3alpha.SearchUserSchemasRequest"> & {
  /**
   * @generated from field: optional zitadel.object.v3alpha.Instance instance = 1;
   */
  instance?: Instance;

  /**
   * list limitations and ordering.
   *
   * @generated from field: optional zitadel.resources.object.v3alpha.SearchQuery query = 2;
   */
  query?: SearchQuery;

  /**
   * The field the result is sorted by. The default is the creation date. Beware that if you change this, your result pagination might be inconsistent.
   *
   * @generated from field: optional zitadel.resources.userschema.v3alpha.FieldName sorting_column = 3;
   */
  sortingColumn?: FieldName;

  /**
   * Define the criteria to filter for.
   *
   * @generated from field: repeated zitadel.resources.userschema.v3alpha.SearchFilter filters = 4;
   */
  filters: SearchFilter[];
};

/**
 * @generated from message zitadel.resources.userschema.v3alpha.SearchUserSchemasRequest
 */
export declare type SearchUserSchemasRequestJson = {
  /**
   * @generated from field: optional zitadel.object.v3alpha.Instance instance = 1;
   */
  instance?: InstanceJson;

  /**
   * list limitations and ordering.
   *
   * @generated from field: optional zitadel.resources.object.v3alpha.SearchQuery query = 2;
   */
  query?: SearchQueryJson;

  /**
   * The field the result is sorted by. The default is the creation date. Beware that if you change this, your result pagination might be inconsistent.
   *
   * @generated from field: optional zitadel.resources.userschema.v3alpha.FieldName sorting_column = 3;
   */
  sortingColumn?: FieldNameJson;

  /**
   * Define the criteria to filter for.
   *
   * @generated from field: repeated zitadel.resources.userschema.v3alpha.SearchFilter filters = 4;
   */
  filters?: SearchFilterJson[];
};

/**
 * Describes the message zitadel.resources.userschema.v3alpha.SearchUserSchemasRequest.
 * Use `create(SearchUserSchemasRequestSchema)` to create a new message.
 */
export declare const SearchUserSchemasRequestSchema: GenMessage<SearchUserSchemasRequest, {jsonType: SearchUserSchemasRequestJson}>;

/**
 * @generated from message zitadel.resources.userschema.v3alpha.SearchUserSchemasResponse
 */
export declare type SearchUserSchemasResponse = Message<"zitadel.resources.userschema.v3alpha.SearchUserSchemasResponse"> & {
  /**
   * Details provides information about the returned result including total amount found.
   *
   * @generated from field: zitadel.resources.object.v3alpha.ListDetails details = 1;
   */
  details?: ListDetails;

  /**
   * States by which field the results are sorted.
   *
   * @generated from field: zitadel.resources.userschema.v3alpha.FieldName sorting_column = 2;
   */
  sortingColumn: FieldName;

  /**
   * The result contains the user schemas, which matched the queries.
   *
   * @generated from field: repeated zitadel.resources.userschema.v3alpha.GetUserSchema result = 3;
   */
  result: GetUserSchema[];
};

/**
 * @generated from message zitadel.resources.userschema.v3alpha.SearchUserSchemasResponse
 */
export declare type SearchUserSchemasResponseJson = {
  /**
   * Details provides information about the returned result including total amount found.
   *
   * @generated from field: zitadel.resources.object.v3alpha.ListDetails details = 1;
   */
  details?: ListDetailsJson;

  /**
   * States by which field the results are sorted.
   *
   * @generated from field: zitadel.resources.userschema.v3alpha.FieldName sorting_column = 2;
   */
  sortingColumn?: FieldNameJson;

  /**
   * The result contains the user schemas, which matched the queries.
   *
   * @generated from field: repeated zitadel.resources.userschema.v3alpha.GetUserSchema result = 3;
   */
  result?: GetUserSchemaJson[];
};

/**
 * Describes the message zitadel.resources.userschema.v3alpha.SearchUserSchemasResponse.
 * Use `create(SearchUserSchemasResponseSchema)` to create a new message.
 */
export declare const SearchUserSchemasResponseSchema: GenMessage<SearchUserSchemasResponse, {jsonType: SearchUserSchemasResponseJson}>;

/**
 * @generated from message zitadel.resources.userschema.v3alpha.GetUserSchemaRequest
 */
export declare type GetUserSchemaRequest = Message<"zitadel.resources.userschema.v3alpha.GetUserSchemaRequest"> & {
  /**
   * unique identifier of the schema.
   *
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * @generated from message zitadel.resources.userschema.v3alpha.GetUserSchemaRequest
 */
export declare type GetUserSchemaRequestJson = {
  /**
   * unique identifier of the schema.
   *
   * @generated from field: string id = 1;
   */
  id?: string;
};

/**
 * Describes the message zitadel.resources.userschema.v3alpha.GetUserSchemaRequest.
 * Use `create(GetUserSchemaRequestSchema)` to create a new message.
 */
export declare const GetUserSchemaRequestSchema: GenMessage<GetUserSchemaRequest, {jsonType: GetUserSchemaRequestJson}>;

/**
 * @generated from message zitadel.resources.userschema.v3alpha.GetUserSchemaResponse
 */
export declare type GetUserSchemaResponse = Message<"zitadel.resources.userschema.v3alpha.GetUserSchemaResponse"> & {
  /**
   * @generated from field: zitadel.resources.userschema.v3alpha.GetUserSchema user_schema = 2;
   */
  userSchema?: GetUserSchema;
};

/**
 * @generated from message zitadel.resources.userschema.v3alpha.GetUserSchemaResponse
 */
export declare type GetUserSchemaResponseJson = {
  /**
   * @generated from field: zitadel.resources.userschema.v3alpha.GetUserSchema user_schema = 2;
   */
  userSchema?: GetUserSchemaJson;
};

/**
 * Describes the message zitadel.resources.userschema.v3alpha.GetUserSchemaResponse.
 * Use `create(GetUserSchemaResponseSchema)` to create a new message.
 */
export declare const GetUserSchemaResponseSchema: GenMessage<GetUserSchemaResponse, {jsonType: GetUserSchemaResponseJson}>;

/**
 * @generated from message zitadel.resources.userschema.v3alpha.CreateUserSchemaRequest
 */
export declare type CreateUserSchemaRequest = Message<"zitadel.resources.userschema.v3alpha.CreateUserSchemaRequest"> & {
  /**
   * @generated from field: optional zitadel.object.v3alpha.Instance instance = 1;
   */
  instance?: Instance;

  /**
   * @generated from field: zitadel.resources.userschema.v3alpha.UserSchema user_schema = 2;
   */
  userSchema?: UserSchema;
};

/**
 * @generated from message zitadel.resources.userschema.v3alpha.CreateUserSchemaRequest
 */
export declare type CreateUserSchemaRequestJson = {
  /**
   * @generated from field: optional zitadel.object.v3alpha.Instance instance = 1;
   */
  instance?: InstanceJson;

  /**
   * @generated from field: zitadel.resources.userschema.v3alpha.UserSchema user_schema = 2;
   */
  userSchema?: UserSchemaJson;
};

/**
 * Describes the message zitadel.resources.userschema.v3alpha.CreateUserSchemaRequest.
 * Use `create(CreateUserSchemaRequestSchema)` to create a new message.
 */
export declare const CreateUserSchemaRequestSchema: GenMessage<CreateUserSchemaRequest, {jsonType: CreateUserSchemaRequestJson}>;

/**
 * @generated from message zitadel.resources.userschema.v3alpha.CreateUserSchemaResponse
 */
export declare type CreateUserSchemaResponse = Message<"zitadel.resources.userschema.v3alpha.CreateUserSchemaResponse"> & {
  /**
   * Details provide some base information (such as the last change date) of the schema.
   *
   * @generated from field: zitadel.resources.object.v3alpha.Details details = 2;
   */
  details?: Details;
};

/**
 * @generated from message zitadel.resources.userschema.v3alpha.CreateUserSchemaResponse
 */
export declare type CreateUserSchemaResponseJson = {
  /**
   * Details provide some base information (such as the last change date) of the schema.
   *
   * @generated from field: zitadel.resources.object.v3alpha.Details details = 2;
   */
  details?: DetailsJson;
};

/**
 * Describes the message zitadel.resources.userschema.v3alpha.CreateUserSchemaResponse.
 * Use `create(CreateUserSchemaResponseSchema)` to create a new message.
 */
export declare const CreateUserSchemaResponseSchema: GenMessage<CreateUserSchemaResponse, {jsonType: CreateUserSchemaResponseJson}>;

/**
 * @generated from message zitadel.resources.userschema.v3alpha.PatchUserSchemaRequest
 */
export declare type PatchUserSchemaRequest = Message<"zitadel.resources.userschema.v3alpha.PatchUserSchemaRequest"> & {
  /**
   * @generated from field: optional zitadel.object.v3alpha.Instance instance = 1;
   */
  instance?: Instance;

  /**
   * unique identifier of the schema.
   *
   * @generated from field: string id = 2;
   */
  id: string;

  /**
   * @generated from field: zitadel.resources.userschema.v3alpha.PatchUserSchema user_schema = 3;
   */
  userSchema?: PatchUserSchema;
};

/**
 * @generated from message zitadel.resources.userschema.v3alpha.PatchUserSchemaRequest
 */
export declare type PatchUserSchemaRequestJson = {
  /**
   * @generated from field: optional zitadel.object.v3alpha.Instance instance = 1;
   */
  instance?: InstanceJson;

  /**
   * unique identifier of the schema.
   *
   * @generated from field: string id = 2;
   */
  id?: string;

  /**
   * @generated from field: zitadel.resources.userschema.v3alpha.PatchUserSchema user_schema = 3;
   */
  userSchema?: PatchUserSchemaJson;
};

/**
 * Describes the message zitadel.resources.userschema.v3alpha.PatchUserSchemaRequest.
 * Use `create(PatchUserSchemaRequestSchema)` to create a new message.
 */
export declare const PatchUserSchemaRequestSchema: GenMessage<PatchUserSchemaRequest, {jsonType: PatchUserSchemaRequestJson}>;

/**
 * @generated from message zitadel.resources.userschema.v3alpha.PatchUserSchemaResponse
 */
export declare type PatchUserSchemaResponse = Message<"zitadel.resources.userschema.v3alpha.PatchUserSchemaResponse"> & {
  /**
   * Details provide some base information (such as the last change date) of the schema.
   *
   * @generated from field: zitadel.resources.object.v3alpha.Details details = 1;
   */
  details?: Details;
};

/**
 * @generated from message zitadel.resources.userschema.v3alpha.PatchUserSchemaResponse
 */
export declare type PatchUserSchemaResponseJson = {
  /**
   * Details provide some base information (such as the last change date) of the schema.
   *
   * @generated from field: zitadel.resources.object.v3alpha.Details details = 1;
   */
  details?: DetailsJson;
};

/**
 * Describes the message zitadel.resources.userschema.v3alpha.PatchUserSchemaResponse.
 * Use `create(PatchUserSchemaResponseSchema)` to create a new message.
 */
export declare const PatchUserSchemaResponseSchema: GenMessage<PatchUserSchemaResponse, {jsonType: PatchUserSchemaResponseJson}>;

/**
 * @generated from message zitadel.resources.userschema.v3alpha.DeactivateUserSchemaRequest
 */
export declare type DeactivateUserSchemaRequest = Message<"zitadel.resources.userschema.v3alpha.DeactivateUserSchemaRequest"> & {
  /**
   * @generated from field: optional zitadel.object.v3alpha.Instance instance = 2;
   */
  instance?: Instance;

  /**
   * unique identifier of the schema.
   *
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * @generated from message zitadel.resources.userschema.v3alpha.DeactivateUserSchemaRequest
 */
export declare type DeactivateUserSchemaRequestJson = {
  /**
   * @generated from field: optional zitadel.object.v3alpha.Instance instance = 2;
   */
  instance?: InstanceJson;

  /**
   * unique identifier of the schema.
   *
   * @generated from field: string id = 1;
   */
  id?: string;
};

/**
 * Describes the message zitadel.resources.userschema.v3alpha.DeactivateUserSchemaRequest.
 * Use `create(DeactivateUserSchemaRequestSchema)` to create a new message.
 */
export declare const DeactivateUserSchemaRequestSchema: GenMessage<DeactivateUserSchemaRequest, {jsonType: DeactivateUserSchemaRequestJson}>;

/**
 * @generated from message zitadel.resources.userschema.v3alpha.DeactivateUserSchemaResponse
 */
export declare type DeactivateUserSchemaResponse = Message<"zitadel.resources.userschema.v3alpha.DeactivateUserSchemaResponse"> & {
  /**
   * Details provide some base information (such as the last change date) of the schema.
   *
   * @generated from field: zitadel.resources.object.v3alpha.Details details = 1;
   */
  details?: Details;
};

/**
 * @generated from message zitadel.resources.userschema.v3alpha.DeactivateUserSchemaResponse
 */
export declare type DeactivateUserSchemaResponseJson = {
  /**
   * Details provide some base information (such as the last change date) of the schema.
   *
   * @generated from field: zitadel.resources.object.v3alpha.Details details = 1;
   */
  details?: DetailsJson;
};

/**
 * Describes the message zitadel.resources.userschema.v3alpha.DeactivateUserSchemaResponse.
 * Use `create(DeactivateUserSchemaResponseSchema)` to create a new message.
 */
export declare const DeactivateUserSchemaResponseSchema: GenMessage<DeactivateUserSchemaResponse, {jsonType: DeactivateUserSchemaResponseJson}>;

/**
 * @generated from message zitadel.resources.userschema.v3alpha.ReactivateUserSchemaRequest
 */
export declare type ReactivateUserSchemaRequest = Message<"zitadel.resources.userschema.v3alpha.ReactivateUserSchemaRequest"> & {
  /**
   * @generated from field: optional zitadel.object.v3alpha.Instance instance = 2;
   */
  instance?: Instance;

  /**
   * unique identifier of the schema.
   *
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * @generated from message zitadel.resources.userschema.v3alpha.ReactivateUserSchemaRequest
 */
export declare type ReactivateUserSchemaRequestJson = {
  /**
   * @generated from field: optional zitadel.object.v3alpha.Instance instance = 2;
   */
  instance?: InstanceJson;

  /**
   * unique identifier of the schema.
   *
   * @generated from field: string id = 1;
   */
  id?: string;
};

/**
 * Describes the message zitadel.resources.userschema.v3alpha.ReactivateUserSchemaRequest.
 * Use `create(ReactivateUserSchemaRequestSchema)` to create a new message.
 */
export declare const ReactivateUserSchemaRequestSchema: GenMessage<ReactivateUserSchemaRequest, {jsonType: ReactivateUserSchemaRequestJson}>;

/**
 * @generated from message zitadel.resources.userschema.v3alpha.ReactivateUserSchemaResponse
 */
export declare type ReactivateUserSchemaResponse = Message<"zitadel.resources.userschema.v3alpha.ReactivateUserSchemaResponse"> & {
  /**
   * Details provide some base information (such as the last change date) of the schema.
   *
   * @generated from field: zitadel.resources.object.v3alpha.Details details = 1;
   */
  details?: Details;
};

/**
 * @generated from message zitadel.resources.userschema.v3alpha.ReactivateUserSchemaResponse
 */
export declare type ReactivateUserSchemaResponseJson = {
  /**
   * Details provide some base information (such as the last change date) of the schema.
   *
   * @generated from field: zitadel.resources.object.v3alpha.Details details = 1;
   */
  details?: DetailsJson;
};

/**
 * Describes the message zitadel.resources.userschema.v3alpha.ReactivateUserSchemaResponse.
 * Use `create(ReactivateUserSchemaResponseSchema)` to create a new message.
 */
export declare const ReactivateUserSchemaResponseSchema: GenMessage<ReactivateUserSchemaResponse, {jsonType: ReactivateUserSchemaResponseJson}>;

/**
 * @generated from message zitadel.resources.userschema.v3alpha.DeleteUserSchemaRequest
 */
export declare type DeleteUserSchemaRequest = Message<"zitadel.resources.userschema.v3alpha.DeleteUserSchemaRequest"> & {
  /**
   * @generated from field: optional zitadel.object.v3alpha.Instance instance = 2;
   */
  instance?: Instance;

  /**
   * unique identifier of the schema.
   *
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * @generated from message zitadel.resources.userschema.v3alpha.DeleteUserSchemaRequest
 */
export declare type DeleteUserSchemaRequestJson = {
  /**
   * @generated from field: optional zitadel.object.v3alpha.Instance instance = 2;
   */
  instance?: InstanceJson;

  /**
   * unique identifier of the schema.
   *
   * @generated from field: string id = 1;
   */
  id?: string;
};

/**
 * Describes the message zitadel.resources.userschema.v3alpha.DeleteUserSchemaRequest.
 * Use `create(DeleteUserSchemaRequestSchema)` to create a new message.
 */
export declare const DeleteUserSchemaRequestSchema: GenMessage<DeleteUserSchemaRequest, {jsonType: DeleteUserSchemaRequestJson}>;

/**
 * @generated from message zitadel.resources.userschema.v3alpha.DeleteUserSchemaResponse
 */
export declare type DeleteUserSchemaResponse = Message<"zitadel.resources.userschema.v3alpha.DeleteUserSchemaResponse"> & {
  /**
   * Details provide some base information (such as the last change date) of the schema.
   *
   * @generated from field: zitadel.resources.object.v3alpha.Details details = 1;
   */
  details?: Details;
};

/**
 * @generated from message zitadel.resources.userschema.v3alpha.DeleteUserSchemaResponse
 */
export declare type DeleteUserSchemaResponseJson = {
  /**
   * Details provide some base information (such as the last change date) of the schema.
   *
   * @generated from field: zitadel.resources.object.v3alpha.Details details = 1;
   */
  details?: DetailsJson;
};

/**
 * Describes the message zitadel.resources.userschema.v3alpha.DeleteUserSchemaResponse.
 * Use `create(DeleteUserSchemaResponseSchema)` to create a new message.
 */
export declare const DeleteUserSchemaResponseSchema: GenMessage<DeleteUserSchemaResponse, {jsonType: DeleteUserSchemaResponseJson}>;

/**
 * @generated from service zitadel.resources.userschema.v3alpha.ZITADELUserSchemas
 */
export declare const ZITADELUserSchemas: GenService<{
  /**
   * Search user schemas
   *
   * Search all matching user schemas. By default, we will return all user schema of your instance. Make sure to include a limit and sorting for pagination.
   *
   * @generated from rpc zitadel.resources.userschema.v3alpha.ZITADELUserSchemas.SearchUserSchemas
   */
  searchUserSchemas: {
    methodKind: "unary";
    input: typeof SearchUserSchemasRequestSchema;
    output: typeof SearchUserSchemasResponseSchema;
  },
  /**
   * User schema by ID
   *
   * Returns the user schema identified by the requested ID.
   *
   * @generated from rpc zitadel.resources.userschema.v3alpha.ZITADELUserSchemas.GetUserSchema
   */
  getUserSchema: {
    methodKind: "unary";
    input: typeof GetUserSchemaRequestSchema;
    output: typeof GetUserSchemaResponseSchema;
  },
  /**
   * Create a user schema
   *
   * Create the first revision of a new user schema. The schema can then be used on users to store and validate their data.
   *
   * @generated from rpc zitadel.resources.userschema.v3alpha.ZITADELUserSchemas.CreateUserSchema
   */
  createUserSchema: {
    methodKind: "unary";
    input: typeof CreateUserSchemaRequestSchema;
    output: typeof CreateUserSchemaResponseSchema;
  },
  /**
   * Patch a user schema
   *
   * Patch an existing user schema to a new revision. Users based on the current revision will not be affected until they are updated.
   *
   * @generated from rpc zitadel.resources.userschema.v3alpha.ZITADELUserSchemas.PatchUserSchema
   */
  patchUserSchema: {
    methodKind: "unary";
    input: typeof PatchUserSchemaRequestSchema;
    output: typeof PatchUserSchemaResponseSchema;
  },
  /**
   * Deactivate a user schema
   *
   * Deactivate an existing user schema and change it into a read-only state. Users based on this schema cannot be updated anymore, but are still able to authenticate.
   *
   * @generated from rpc zitadel.resources.userschema.v3alpha.ZITADELUserSchemas.DeactivateUserSchema
   */
  deactivateUserSchema: {
    methodKind: "unary";
    input: typeof DeactivateUserSchemaRequestSchema;
    output: typeof DeactivateUserSchemaResponseSchema;
  },
  /**
   * Reactivate a user schema
   *
   * Reactivate an previously deactivated user schema and change it into an active state again.
   *
   * @generated from rpc zitadel.resources.userschema.v3alpha.ZITADELUserSchemas.ReactivateUserSchema
   */
  reactivateUserSchema: {
    methodKind: "unary";
    input: typeof ReactivateUserSchemaRequestSchema;
    output: typeof ReactivateUserSchemaResponseSchema;
  },
  /**
   * Delete a user schema
   *
   * Delete an existing user schema. This operation is only allowed if there are no associated users to it.
   *
   * @generated from rpc zitadel.resources.userschema.v3alpha.ZITADELUserSchemas.DeleteUserSchema
   */
  deleteUserSchema: {
    methodKind: "unary";
    input: typeof DeleteUserSchemaRequestSchema;
    output: typeof DeleteUserSchemaResponseSchema;
  },
}>;

