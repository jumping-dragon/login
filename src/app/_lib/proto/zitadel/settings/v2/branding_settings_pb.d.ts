// @generated by protoc-gen-es v2.6.0 with parameter "json_types=true,import_extension=js"
// @generated from file zitadel/settings/v2/branding_settings.proto (package zitadel.settings.v2, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv2";
import type { Message } from "@bufbuild/protobuf";
import type { ResourceOwnerType, ResourceOwnerTypeJson } from "./settings_pb.js";

/**
 * Describes the file zitadel/settings/v2/branding_settings.proto.
 */
export declare const file_zitadel_settings_v2_branding_settings: GenFile;

/**
 * @generated from message zitadel.settings.v2.BrandingSettings
 */
export declare type BrandingSettings = Message<"zitadel.settings.v2.BrandingSettings"> & {
  /**
   * @generated from field: zitadel.settings.v2.Theme light_theme = 1;
   */
  lightTheme?: Theme;

  /**
   * @generated from field: zitadel.settings.v2.Theme dark_theme = 2;
   */
  darkTheme?: Theme;

  /**
   * @generated from field: string font_url = 3;
   */
  fontUrl: string;

  /**
   * hides the org suffix on the login form if the scope \"urn:zitadel:iam:org:domain:primary:{domainname}\" is set
   *
   * @generated from field: bool hide_login_name_suffix = 4;
   */
  hideLoginNameSuffix: boolean;

  /**
   * @generated from field: bool disable_watermark = 5;
   */
  disableWatermark: boolean;

  /**
   * resource_owner_type returns if the setting is managed on the organization or on the instance
   *
   * @generated from field: zitadel.settings.v2.ResourceOwnerType resource_owner_type = 6;
   */
  resourceOwnerType: ResourceOwnerType;

  /**
   * @generated from field: zitadel.settings.v2.ThemeMode theme_mode = 7;
   */
  themeMode: ThemeMode;
};

/**
 * @generated from message zitadel.settings.v2.BrandingSettings
 */
export declare type BrandingSettingsJson = {
  /**
   * @generated from field: zitadel.settings.v2.Theme light_theme = 1;
   */
  lightTheme?: ThemeJson;

  /**
   * @generated from field: zitadel.settings.v2.Theme dark_theme = 2;
   */
  darkTheme?: ThemeJson;

  /**
   * @generated from field: string font_url = 3;
   */
  fontUrl?: string;

  /**
   * hides the org suffix on the login form if the scope \"urn:zitadel:iam:org:domain:primary:{domainname}\" is set
   *
   * @generated from field: bool hide_login_name_suffix = 4;
   */
  hideLoginNameSuffix?: boolean;

  /**
   * @generated from field: bool disable_watermark = 5;
   */
  disableWatermark?: boolean;

  /**
   * resource_owner_type returns if the setting is managed on the organization or on the instance
   *
   * @generated from field: zitadel.settings.v2.ResourceOwnerType resource_owner_type = 6;
   */
  resourceOwnerType?: ResourceOwnerTypeJson;

  /**
   * @generated from field: zitadel.settings.v2.ThemeMode theme_mode = 7;
   */
  themeMode?: ThemeModeJson;
};

/**
 * Describes the message zitadel.settings.v2.BrandingSettings.
 * Use `create(BrandingSettingsSchema)` to create a new message.
 */
export declare const BrandingSettingsSchema: GenMessage<BrandingSettings, {jsonType: BrandingSettingsJson}>;

/**
 * @generated from message zitadel.settings.v2.Theme
 */
export declare type Theme = Message<"zitadel.settings.v2.Theme"> & {
  /**
   * hex value for primary color
   *
   * @generated from field: string primary_color = 1;
   */
  primaryColor: string;

  /**
   * hex value for background color
   *
   * @generated from field: string background_color = 2;
   */
  backgroundColor: string;

  /**
   * hex value for warning color
   *
   * @generated from field: string warn_color = 3;
   */
  warnColor: string;

  /**
   * hex value for font color
   *
   * @generated from field: string font_color = 4;
   */
  fontColor: string;

  /**
   * url where the logo is served
   *
   * @generated from field: string logo_url = 5;
   */
  logoUrl: string;

  /**
   * url where the icon is served
   *
   * @generated from field: string icon_url = 6;
   */
  iconUrl: string;
};

/**
 * @generated from message zitadel.settings.v2.Theme
 */
export declare type ThemeJson = {
  /**
   * hex value for primary color
   *
   * @generated from field: string primary_color = 1;
   */
  primaryColor?: string;

  /**
   * hex value for background color
   *
   * @generated from field: string background_color = 2;
   */
  backgroundColor?: string;

  /**
   * hex value for warning color
   *
   * @generated from field: string warn_color = 3;
   */
  warnColor?: string;

  /**
   * hex value for font color
   *
   * @generated from field: string font_color = 4;
   */
  fontColor?: string;

  /**
   * url where the logo is served
   *
   * @generated from field: string logo_url = 5;
   */
  logoUrl?: string;

  /**
   * url where the icon is served
   *
   * @generated from field: string icon_url = 6;
   */
  iconUrl?: string;
};

/**
 * Describes the message zitadel.settings.v2.Theme.
 * Use `create(ThemeSchema)` to create a new message.
 */
export declare const ThemeSchema: GenMessage<Theme, {jsonType: ThemeJson}>;

/**
 * @generated from enum zitadel.settings.v2.ThemeMode
 */
export enum ThemeMode {
  /**
   * @generated from enum value: THEME_MODE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: THEME_MODE_AUTO = 1;
   */
  AUTO = 1,

  /**
   * @generated from enum value: THEME_MODE_LIGHT = 2;
   */
  LIGHT = 2,

  /**
   * @generated from enum value: THEME_MODE_DARK = 3;
   */
  DARK = 3,
}

/**
 * @generated from enum zitadel.settings.v2.ThemeMode
 */
export declare type ThemeModeJson = "THEME_MODE_UNSPECIFIED" | "THEME_MODE_AUTO" | "THEME_MODE_LIGHT" | "THEME_MODE_DARK";

/**
 * Describes the enum zitadel.settings.v2.ThemeMode.
 */
export declare const ThemeModeSchema: GenEnum<ThemeMode, ThemeModeJson>;

