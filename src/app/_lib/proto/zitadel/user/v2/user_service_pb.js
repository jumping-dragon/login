// @generated by protoc-gen-es v2.6.0 with parameter "json_types=true,import_extension=js"
// @generated from file zitadel/user/v2/user_service.proto (package zitadel.user.v2, syntax proto3)
/* eslint-disable */

import { enumDesc, fileDesc, messageDesc, serviceDesc, tsEnum } from "@bufbuild/protobuf/codegenv2";
import { file_google_protobuf_duration, file_google_protobuf_struct, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_api_annotations } from "../../../google/api/annotations_pb.js";
import { file_google_api_field_behavior } from "../../../google/api/field_behavior_pb.js";
import { file_protoc_gen_openapiv2_options_annotations } from "../../../protoc-gen-openapiv2/options/annotations_pb.js";
import { file_validate_validate } from "../../../validate/validate_pb.js";
import { file_zitadel_object_v2_object } from "../../object/v2/object_pb.js";
import { file_zitadel_protoc_gen_zitadel_v2_options } from "../../protoc_gen_zitadel/v2/options_pb.js";
import { file_zitadel_user_v2_auth } from "./auth_pb.js";
import { file_zitadel_user_v2_email } from "./email_pb.js";
import { file_zitadel_user_v2_phone } from "./phone_pb.js";
import { file_zitadel_user_v2_idp } from "./idp_pb.js";
import { file_zitadel_user_v2_password } from "./password_pb.js";
import { file_zitadel_user_v2_user } from "./user_pb.js";
import { file_zitadel_user_v2_key } from "./key_pb.js";
import { file_zitadel_user_v2_pat } from "./pat_pb.js";
import { file_zitadel_user_v2_query } from "./query_pb.js";
import { file_zitadel_filter_v2_filter } from "../../filter/v2/filter_pb.js";

/**
 * Describes the file zitadel/user/v2/user_service.proto.
 */
export const file_zitadel_user_v2_user_service = /*@__PURE__*/
  fileDesc("", [file_google_protobuf_timestamp, file_google_api_annotations, file_google_api_field_behavior, file_google_protobuf_duration, file_google_protobuf_struct, file_protoc_gen_openapiv2_options_annotations, file_validate_validate, file_zitadel_object_v2_object, file_zitadel_protoc_gen_zitadel_v2_options, file_zitadel_user_v2_auth, file_zitadel_user_v2_email, file_zitadel_user_v2_phone, file_zitadel_user_v2_idp, file_zitadel_user_v2_password, file_zitadel_user_v2_user, file_zitadel_user_v2_key, file_zitadel_user_v2_pat, file_zitadel_user_v2_query, file_zitadel_filter_v2_filter]);

/**
 * Describes the message zitadel.user.v2.AddHumanUserRequest.
 * Use `create(AddHumanUserRequestSchema)` to create a new message.
 */
export const AddHumanUserRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 0);

/**
 * Describes the message zitadel.user.v2.AddHumanUserResponse.
 * Use `create(AddHumanUserResponseSchema)` to create a new message.
 */
export const AddHumanUserResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 1);

/**
 * Describes the message zitadel.user.v2.CreateUserRequest.
 * Use `create(CreateUserRequestSchema)` to create a new message.
 */
export const CreateUserRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 2);

/**
 * Describes the message zitadel.user.v2.CreateUserRequest.Human.
 * Use `create(CreateUserRequest_HumanSchema)` to create a new message.
 */
export const CreateUserRequest_HumanSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 2, 0);

/**
 * Describes the message zitadel.user.v2.CreateUserRequest.Machine.
 * Use `create(CreateUserRequest_MachineSchema)` to create a new message.
 */
export const CreateUserRequest_MachineSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 2, 1);

/**
 * Describes the message zitadel.user.v2.CreateUserResponse.
 * Use `create(CreateUserResponseSchema)` to create a new message.
 */
export const CreateUserResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 3);

/**
 * Describes the message zitadel.user.v2.GetUserByIDRequest.
 * Use `create(GetUserByIDRequestSchema)` to create a new message.
 */
export const GetUserByIDRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 4);

/**
 * Describes the message zitadel.user.v2.GetUserByIDResponse.
 * Use `create(GetUserByIDResponseSchema)` to create a new message.
 */
export const GetUserByIDResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 5);

/**
 * Describes the message zitadel.user.v2.ListUsersRequest.
 * Use `create(ListUsersRequestSchema)` to create a new message.
 */
export const ListUsersRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 6);

/**
 * Describes the message zitadel.user.v2.ListUsersResponse.
 * Use `create(ListUsersResponseSchema)` to create a new message.
 */
export const ListUsersResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 7);

/**
 * Describes the message zitadel.user.v2.SetEmailRequest.
 * Use `create(SetEmailRequestSchema)` to create a new message.
 */
export const SetEmailRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 8);

/**
 * Describes the message zitadel.user.v2.SetEmailResponse.
 * Use `create(SetEmailResponseSchema)` to create a new message.
 */
export const SetEmailResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 9);

/**
 * Describes the message zitadel.user.v2.ResendEmailCodeRequest.
 * Use `create(ResendEmailCodeRequestSchema)` to create a new message.
 */
export const ResendEmailCodeRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 10);

/**
 * Describes the message zitadel.user.v2.ResendEmailCodeResponse.
 * Use `create(ResendEmailCodeResponseSchema)` to create a new message.
 */
export const ResendEmailCodeResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 11);

/**
 * Describes the message zitadel.user.v2.SendEmailCodeRequest.
 * Use `create(SendEmailCodeRequestSchema)` to create a new message.
 */
export const SendEmailCodeRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 12);

/**
 * Describes the message zitadel.user.v2.SendEmailCodeResponse.
 * Use `create(SendEmailCodeResponseSchema)` to create a new message.
 */
export const SendEmailCodeResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 13);

/**
 * Describes the message zitadel.user.v2.VerifyEmailRequest.
 * Use `create(VerifyEmailRequestSchema)` to create a new message.
 */
export const VerifyEmailRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 14);

/**
 * Describes the message zitadel.user.v2.VerifyEmailResponse.
 * Use `create(VerifyEmailResponseSchema)` to create a new message.
 */
export const VerifyEmailResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 15);

/**
 * Describes the message zitadel.user.v2.SetPhoneRequest.
 * Use `create(SetPhoneRequestSchema)` to create a new message.
 */
export const SetPhoneRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 16);

/**
 * Describes the message zitadel.user.v2.SetPhoneResponse.
 * Use `create(SetPhoneResponseSchema)` to create a new message.
 */
export const SetPhoneResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 17);

/**
 * Describes the message zitadel.user.v2.RemovePhoneRequest.
 * Use `create(RemovePhoneRequestSchema)` to create a new message.
 */
export const RemovePhoneRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 18);

/**
 * Describes the message zitadel.user.v2.RemovePhoneResponse.
 * Use `create(RemovePhoneResponseSchema)` to create a new message.
 */
export const RemovePhoneResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 19);

/**
 * Describes the message zitadel.user.v2.ResendPhoneCodeRequest.
 * Use `create(ResendPhoneCodeRequestSchema)` to create a new message.
 */
export const ResendPhoneCodeRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 20);

/**
 * Describes the message zitadel.user.v2.ResendPhoneCodeResponse.
 * Use `create(ResendPhoneCodeResponseSchema)` to create a new message.
 */
export const ResendPhoneCodeResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 21);

/**
 * Describes the message zitadel.user.v2.VerifyPhoneRequest.
 * Use `create(VerifyPhoneRequestSchema)` to create a new message.
 */
export const VerifyPhoneRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 22);

/**
 * Describes the message zitadel.user.v2.VerifyPhoneResponse.
 * Use `create(VerifyPhoneResponseSchema)` to create a new message.
 */
export const VerifyPhoneResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 23);

/**
 * Describes the message zitadel.user.v2.DeleteUserRequest.
 * Use `create(DeleteUserRequestSchema)` to create a new message.
 */
export const DeleteUserRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 24);

/**
 * Describes the message zitadel.user.v2.DeleteUserResponse.
 * Use `create(DeleteUserResponseSchema)` to create a new message.
 */
export const DeleteUserResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 25);

/**
 * Describes the message zitadel.user.v2.UpdateUserRequest.
 * Use `create(UpdateUserRequestSchema)` to create a new message.
 */
export const UpdateUserRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 26);

/**
 * Describes the message zitadel.user.v2.UpdateUserRequest.Human.
 * Use `create(UpdateUserRequest_HumanSchema)` to create a new message.
 */
export const UpdateUserRequest_HumanSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 26, 0);

/**
 * Describes the message zitadel.user.v2.UpdateUserRequest.Human.Profile.
 * Use `create(UpdateUserRequest_Human_ProfileSchema)` to create a new message.
 */
export const UpdateUserRequest_Human_ProfileSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 26, 0, 0);

/**
 * Describes the message zitadel.user.v2.UpdateUserRequest.Machine.
 * Use `create(UpdateUserRequest_MachineSchema)` to create a new message.
 */
export const UpdateUserRequest_MachineSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 26, 1);

/**
 * Describes the message zitadel.user.v2.UpdateUserResponse.
 * Use `create(UpdateUserResponseSchema)` to create a new message.
 */
export const UpdateUserResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 27);

/**
 * Describes the message zitadel.user.v2.UpdateHumanUserRequest.
 * Use `create(UpdateHumanUserRequestSchema)` to create a new message.
 */
export const UpdateHumanUserRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 28);

/**
 * Describes the message zitadel.user.v2.UpdateHumanUserResponse.
 * Use `create(UpdateHumanUserResponseSchema)` to create a new message.
 */
export const UpdateHumanUserResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 29);

/**
 * Describes the message zitadel.user.v2.DeactivateUserRequest.
 * Use `create(DeactivateUserRequestSchema)` to create a new message.
 */
export const DeactivateUserRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 30);

/**
 * Describes the message zitadel.user.v2.DeactivateUserResponse.
 * Use `create(DeactivateUserResponseSchema)` to create a new message.
 */
export const DeactivateUserResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 31);

/**
 * Describes the message zitadel.user.v2.ReactivateUserRequest.
 * Use `create(ReactivateUserRequestSchema)` to create a new message.
 */
export const ReactivateUserRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 32);

/**
 * Describes the message zitadel.user.v2.ReactivateUserResponse.
 * Use `create(ReactivateUserResponseSchema)` to create a new message.
 */
export const ReactivateUserResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 33);

/**
 * Describes the message zitadel.user.v2.LockUserRequest.
 * Use `create(LockUserRequestSchema)` to create a new message.
 */
export const LockUserRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 34);

/**
 * Describes the message zitadel.user.v2.LockUserResponse.
 * Use `create(LockUserResponseSchema)` to create a new message.
 */
export const LockUserResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 35);

/**
 * Describes the message zitadel.user.v2.UnlockUserRequest.
 * Use `create(UnlockUserRequestSchema)` to create a new message.
 */
export const UnlockUserRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 36);

/**
 * Describes the message zitadel.user.v2.UnlockUserResponse.
 * Use `create(UnlockUserResponseSchema)` to create a new message.
 */
export const UnlockUserResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 37);

/**
 * Describes the message zitadel.user.v2.RegisterPasskeyRequest.
 * Use `create(RegisterPasskeyRequestSchema)` to create a new message.
 */
export const RegisterPasskeyRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 38);

/**
 * Describes the message zitadel.user.v2.RegisterPasskeyResponse.
 * Use `create(RegisterPasskeyResponseSchema)` to create a new message.
 */
export const RegisterPasskeyResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 39);

/**
 * Describes the message zitadel.user.v2.VerifyPasskeyRegistrationRequest.
 * Use `create(VerifyPasskeyRegistrationRequestSchema)` to create a new message.
 */
export const VerifyPasskeyRegistrationRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 40);

/**
 * Describes the message zitadel.user.v2.VerifyPasskeyRegistrationResponse.
 * Use `create(VerifyPasskeyRegistrationResponseSchema)` to create a new message.
 */
export const VerifyPasskeyRegistrationResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 41);

/**
 * Describes the message zitadel.user.v2.RegisterU2FRequest.
 * Use `create(RegisterU2FRequestSchema)` to create a new message.
 */
export const RegisterU2FRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 42);

/**
 * Describes the message zitadel.user.v2.RegisterU2FResponse.
 * Use `create(RegisterU2FResponseSchema)` to create a new message.
 */
export const RegisterU2FResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 43);

/**
 * Describes the message zitadel.user.v2.VerifyU2FRegistrationRequest.
 * Use `create(VerifyU2FRegistrationRequestSchema)` to create a new message.
 */
export const VerifyU2FRegistrationRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 44);

/**
 * Describes the message zitadel.user.v2.VerifyU2FRegistrationResponse.
 * Use `create(VerifyU2FRegistrationResponseSchema)` to create a new message.
 */
export const VerifyU2FRegistrationResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 45);

/**
 * Describes the message zitadel.user.v2.RemoveU2FRequest.
 * Use `create(RemoveU2FRequestSchema)` to create a new message.
 */
export const RemoveU2FRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 46);

/**
 * Describes the message zitadel.user.v2.RemoveU2FResponse.
 * Use `create(RemoveU2FResponseSchema)` to create a new message.
 */
export const RemoveU2FResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 47);

/**
 * Describes the message zitadel.user.v2.RegisterTOTPRequest.
 * Use `create(RegisterTOTPRequestSchema)` to create a new message.
 */
export const RegisterTOTPRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 48);

/**
 * Describes the message zitadel.user.v2.RegisterTOTPResponse.
 * Use `create(RegisterTOTPResponseSchema)` to create a new message.
 */
export const RegisterTOTPResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 49);

/**
 * Describes the message zitadel.user.v2.VerifyTOTPRegistrationRequest.
 * Use `create(VerifyTOTPRegistrationRequestSchema)` to create a new message.
 */
export const VerifyTOTPRegistrationRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 50);

/**
 * Describes the message zitadel.user.v2.VerifyTOTPRegistrationResponse.
 * Use `create(VerifyTOTPRegistrationResponseSchema)` to create a new message.
 */
export const VerifyTOTPRegistrationResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 51);

/**
 * Describes the message zitadel.user.v2.RemoveTOTPRequest.
 * Use `create(RemoveTOTPRequestSchema)` to create a new message.
 */
export const RemoveTOTPRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 52);

/**
 * Describes the message zitadel.user.v2.RemoveTOTPResponse.
 * Use `create(RemoveTOTPResponseSchema)` to create a new message.
 */
export const RemoveTOTPResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 53);

/**
 * Describes the message zitadel.user.v2.AddOTPSMSRequest.
 * Use `create(AddOTPSMSRequestSchema)` to create a new message.
 */
export const AddOTPSMSRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 54);

/**
 * Describes the message zitadel.user.v2.AddOTPSMSResponse.
 * Use `create(AddOTPSMSResponseSchema)` to create a new message.
 */
export const AddOTPSMSResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 55);

/**
 * Describes the message zitadel.user.v2.RemoveOTPSMSRequest.
 * Use `create(RemoveOTPSMSRequestSchema)` to create a new message.
 */
export const RemoveOTPSMSRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 56);

/**
 * Describes the message zitadel.user.v2.RemoveOTPSMSResponse.
 * Use `create(RemoveOTPSMSResponseSchema)` to create a new message.
 */
export const RemoveOTPSMSResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 57);

/**
 * Describes the message zitadel.user.v2.AddOTPEmailRequest.
 * Use `create(AddOTPEmailRequestSchema)` to create a new message.
 */
export const AddOTPEmailRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 58);

/**
 * Describes the message zitadel.user.v2.AddOTPEmailResponse.
 * Use `create(AddOTPEmailResponseSchema)` to create a new message.
 */
export const AddOTPEmailResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 59);

/**
 * Describes the message zitadel.user.v2.RemoveOTPEmailRequest.
 * Use `create(RemoveOTPEmailRequestSchema)` to create a new message.
 */
export const RemoveOTPEmailRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 60);

/**
 * Describes the message zitadel.user.v2.RemoveOTPEmailResponse.
 * Use `create(RemoveOTPEmailResponseSchema)` to create a new message.
 */
export const RemoveOTPEmailResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 61);

/**
 * Describes the message zitadel.user.v2.CreatePasskeyRegistrationLinkRequest.
 * Use `create(CreatePasskeyRegistrationLinkRequestSchema)` to create a new message.
 */
export const CreatePasskeyRegistrationLinkRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 62);

/**
 * Describes the message zitadel.user.v2.CreatePasskeyRegistrationLinkResponse.
 * Use `create(CreatePasskeyRegistrationLinkResponseSchema)` to create a new message.
 */
export const CreatePasskeyRegistrationLinkResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 63);

/**
 * Describes the message zitadel.user.v2.ListPasskeysRequest.
 * Use `create(ListPasskeysRequestSchema)` to create a new message.
 */
export const ListPasskeysRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 64);

/**
 * Describes the message zitadel.user.v2.ListPasskeysResponse.
 * Use `create(ListPasskeysResponseSchema)` to create a new message.
 */
export const ListPasskeysResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 65);

/**
 * Describes the message zitadel.user.v2.RemovePasskeyRequest.
 * Use `create(RemovePasskeyRequestSchema)` to create a new message.
 */
export const RemovePasskeyRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 66);

/**
 * Describes the message zitadel.user.v2.RemovePasskeyResponse.
 * Use `create(RemovePasskeyResponseSchema)` to create a new message.
 */
export const RemovePasskeyResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 67);

/**
 * Describes the message zitadel.user.v2.StartIdentityProviderIntentRequest.
 * Use `create(StartIdentityProviderIntentRequestSchema)` to create a new message.
 */
export const StartIdentityProviderIntentRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 68);

/**
 * Describes the message zitadel.user.v2.StartIdentityProviderIntentResponse.
 * Use `create(StartIdentityProviderIntentResponseSchema)` to create a new message.
 */
export const StartIdentityProviderIntentResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 69);

/**
 * Describes the message zitadel.user.v2.RetrieveIdentityProviderIntentRequest.
 * Use `create(RetrieveIdentityProviderIntentRequestSchema)` to create a new message.
 */
export const RetrieveIdentityProviderIntentRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 70);

/**
 * Describes the message zitadel.user.v2.RetrieveIdentityProviderIntentResponse.
 * Use `create(RetrieveIdentityProviderIntentResponseSchema)` to create a new message.
 */
export const RetrieveIdentityProviderIntentResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 71);

/**
 * Describes the message zitadel.user.v2.AddIDPLinkRequest.
 * Use `create(AddIDPLinkRequestSchema)` to create a new message.
 */
export const AddIDPLinkRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 72);

/**
 * Describes the message zitadel.user.v2.AddIDPLinkResponse.
 * Use `create(AddIDPLinkResponseSchema)` to create a new message.
 */
export const AddIDPLinkResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 73);

/**
 * Describes the message zitadel.user.v2.ListIDPLinksRequest.
 * Use `create(ListIDPLinksRequestSchema)` to create a new message.
 */
export const ListIDPLinksRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 74);

/**
 * Describes the message zitadel.user.v2.ListIDPLinksResponse.
 * Use `create(ListIDPLinksResponseSchema)` to create a new message.
 */
export const ListIDPLinksResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 75);

/**
 * Describes the message zitadel.user.v2.RemoveIDPLinkRequest.
 * Use `create(RemoveIDPLinkRequestSchema)` to create a new message.
 */
export const RemoveIDPLinkRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 76);

/**
 * Describes the message zitadel.user.v2.RemoveIDPLinkResponse.
 * Use `create(RemoveIDPLinkResponseSchema)` to create a new message.
 */
export const RemoveIDPLinkResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 77);

/**
 * Describes the message zitadel.user.v2.PasswordResetRequest.
 * Use `create(PasswordResetRequestSchema)` to create a new message.
 */
export const PasswordResetRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 78);

/**
 * Describes the message zitadel.user.v2.PasswordResetResponse.
 * Use `create(PasswordResetResponseSchema)` to create a new message.
 */
export const PasswordResetResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 79);

/**
 * Describes the message zitadel.user.v2.SetPasswordRequest.
 * Use `create(SetPasswordRequestSchema)` to create a new message.
 */
export const SetPasswordRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 80);

/**
 * Describes the message zitadel.user.v2.SetPasswordResponse.
 * Use `create(SetPasswordResponseSchema)` to create a new message.
 */
export const SetPasswordResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 81);

/**
 * Describes the message zitadel.user.v2.ListAuthenticationMethodTypesRequest.
 * Use `create(ListAuthenticationMethodTypesRequestSchema)` to create a new message.
 */
export const ListAuthenticationMethodTypesRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 82);

/**
 * Describes the message zitadel.user.v2.DomainQuery.
 * Use `create(DomainQuerySchema)` to create a new message.
 */
export const DomainQuerySchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 83);

/**
 * Describes the message zitadel.user.v2.ListAuthenticationMethodTypesResponse.
 * Use `create(ListAuthenticationMethodTypesResponseSchema)` to create a new message.
 */
export const ListAuthenticationMethodTypesResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 84);

/**
 * Describes the message zitadel.user.v2.ListAuthenticationFactorsRequest.
 * Use `create(ListAuthenticationFactorsRequestSchema)` to create a new message.
 */
export const ListAuthenticationFactorsRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 85);

/**
 * Describes the message zitadel.user.v2.ListAuthenticationFactorsResponse.
 * Use `create(ListAuthenticationFactorsResponseSchema)` to create a new message.
 */
export const ListAuthenticationFactorsResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 86);

/**
 * Describes the message zitadel.user.v2.CreateInviteCodeRequest.
 * Use `create(CreateInviteCodeRequestSchema)` to create a new message.
 */
export const CreateInviteCodeRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 87);

/**
 * Describes the message zitadel.user.v2.CreateInviteCodeResponse.
 * Use `create(CreateInviteCodeResponseSchema)` to create a new message.
 */
export const CreateInviteCodeResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 88);

/**
 * Describes the message zitadel.user.v2.ResendInviteCodeRequest.
 * Use `create(ResendInviteCodeRequestSchema)` to create a new message.
 */
export const ResendInviteCodeRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 89);

/**
 * Describes the message zitadel.user.v2.ResendInviteCodeResponse.
 * Use `create(ResendInviteCodeResponseSchema)` to create a new message.
 */
export const ResendInviteCodeResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 90);

/**
 * Describes the message zitadel.user.v2.VerifyInviteCodeRequest.
 * Use `create(VerifyInviteCodeRequestSchema)` to create a new message.
 */
export const VerifyInviteCodeRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 91);

/**
 * Describes the message zitadel.user.v2.VerifyInviteCodeResponse.
 * Use `create(VerifyInviteCodeResponseSchema)` to create a new message.
 */
export const VerifyInviteCodeResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 92);

/**
 * Describes the message zitadel.user.v2.HumanMFAInitSkippedRequest.
 * Use `create(HumanMFAInitSkippedRequestSchema)` to create a new message.
 */
export const HumanMFAInitSkippedRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 93);

/**
 * Describes the message zitadel.user.v2.HumanMFAInitSkippedResponse.
 * Use `create(HumanMFAInitSkippedResponseSchema)` to create a new message.
 */
export const HumanMFAInitSkippedResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 94);

/**
 * Describes the message zitadel.user.v2.AddSecretRequest.
 * Use `create(AddSecretRequestSchema)` to create a new message.
 */
export const AddSecretRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 95);

/**
 * Describes the message zitadel.user.v2.AddSecretResponse.
 * Use `create(AddSecretResponseSchema)` to create a new message.
 */
export const AddSecretResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 96);

/**
 * Describes the message zitadel.user.v2.RemoveSecretRequest.
 * Use `create(RemoveSecretRequestSchema)` to create a new message.
 */
export const RemoveSecretRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 97);

/**
 * Describes the message zitadel.user.v2.RemoveSecretResponse.
 * Use `create(RemoveSecretResponseSchema)` to create a new message.
 */
export const RemoveSecretResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 98);

/**
 * Describes the message zitadel.user.v2.AddKeyRequest.
 * Use `create(AddKeyRequestSchema)` to create a new message.
 */
export const AddKeyRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 99);

/**
 * Describes the message zitadel.user.v2.AddKeyResponse.
 * Use `create(AddKeyResponseSchema)` to create a new message.
 */
export const AddKeyResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 100);

/**
 * Describes the message zitadel.user.v2.RemoveKeyRequest.
 * Use `create(RemoveKeyRequestSchema)` to create a new message.
 */
export const RemoveKeyRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 101);

/**
 * Describes the message zitadel.user.v2.RemoveKeyResponse.
 * Use `create(RemoveKeyResponseSchema)` to create a new message.
 */
export const RemoveKeyResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 102);

/**
 * Describes the message zitadel.user.v2.ListKeysRequest.
 * Use `create(ListKeysRequestSchema)` to create a new message.
 */
export const ListKeysRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 103);

/**
 * Describes the message zitadel.user.v2.ListKeysResponse.
 * Use `create(ListKeysResponseSchema)` to create a new message.
 */
export const ListKeysResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 104);

/**
 * Describes the message zitadel.user.v2.AddPersonalAccessTokenRequest.
 * Use `create(AddPersonalAccessTokenRequestSchema)` to create a new message.
 */
export const AddPersonalAccessTokenRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 105);

/**
 * Describes the message zitadel.user.v2.AddPersonalAccessTokenResponse.
 * Use `create(AddPersonalAccessTokenResponseSchema)` to create a new message.
 */
export const AddPersonalAccessTokenResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 106);

/**
 * Describes the message zitadel.user.v2.RemovePersonalAccessTokenRequest.
 * Use `create(RemovePersonalAccessTokenRequestSchema)` to create a new message.
 */
export const RemovePersonalAccessTokenRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 107);

/**
 * Describes the message zitadel.user.v2.RemovePersonalAccessTokenResponse.
 * Use `create(RemovePersonalAccessTokenResponseSchema)` to create a new message.
 */
export const RemovePersonalAccessTokenResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 108);

/**
 * Describes the message zitadel.user.v2.ListPersonalAccessTokensRequest.
 * Use `create(ListPersonalAccessTokensRequestSchema)` to create a new message.
 */
export const ListPersonalAccessTokensRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 109);

/**
 * Describes the message zitadel.user.v2.ListPersonalAccessTokensResponse.
 * Use `create(ListPersonalAccessTokensResponseSchema)` to create a new message.
 */
export const ListPersonalAccessTokensResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2_user_service, 110);

/**
 * Describes the enum zitadel.user.v2.AuthenticationMethodType.
 */
export const AuthenticationMethodTypeSchema = /*@__PURE__*/
  enumDesc(file_zitadel_user_v2_user_service, 0);

/**
 * @generated from enum zitadel.user.v2.AuthenticationMethodType
 */
export const AuthenticationMethodType = /*@__PURE__*/
  tsEnum(AuthenticationMethodTypeSchema);

/**
 * Describes the enum zitadel.user.v2.AuthFactors.
 */
export const AuthFactorsSchema = /*@__PURE__*/
  enumDesc(file_zitadel_user_v2_user_service, 1);

/**
 * @generated from enum zitadel.user.v2.AuthFactors
 */
export const AuthFactors = /*@__PURE__*/
  tsEnum(AuthFactorsSchema);

/**
 * @generated from service zitadel.user.v2.UserService
 */
export const UserService = /*@__PURE__*/
  serviceDesc(file_zitadel_user_v2_user_service, 0);

