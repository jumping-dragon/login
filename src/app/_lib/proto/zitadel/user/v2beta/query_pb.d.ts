// @generated by protoc-gen-es v2.6.0 with parameter "json_types=true,import_extension=js"
// @generated from file zitadel/user/v2beta/query.proto (package zitadel.user.v2beta, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv2";
import type { Message } from "@bufbuild/protobuf";
import type { TextQueryMethod, TextQueryMethodJson } from "../../object/v2beta/object_pb.js";
import type { UserState, UserStateJson } from "./user_pb.js";

/**
 * Describes the file zitadel/user/v2beta/query.proto.
 */
export declare const file_zitadel_user_v2beta_query: GenFile;

/**
 * @generated from message zitadel.user.v2beta.SearchQuery
 */
export declare type SearchQuery = Message<"zitadel.user.v2beta.SearchQuery"> & {
  /**
   * @generated from oneof zitadel.user.v2beta.SearchQuery.query
   */
  query: {
    /**
     * @generated from field: zitadel.user.v2beta.UserNameQuery user_name_query = 1;
     */
    value: UserNameQuery;
    case: "userNameQuery";
  } | {
    /**
     * @generated from field: zitadel.user.v2beta.FirstNameQuery first_name_query = 2;
     */
    value: FirstNameQuery;
    case: "firstNameQuery";
  } | {
    /**
     * @generated from field: zitadel.user.v2beta.LastNameQuery last_name_query = 3;
     */
    value: LastNameQuery;
    case: "lastNameQuery";
  } | {
    /**
     * @generated from field: zitadel.user.v2beta.NickNameQuery nick_name_query = 4;
     */
    value: NickNameQuery;
    case: "nickNameQuery";
  } | {
    /**
     * @generated from field: zitadel.user.v2beta.DisplayNameQuery display_name_query = 5;
     */
    value: DisplayNameQuery;
    case: "displayNameQuery";
  } | {
    /**
     * @generated from field: zitadel.user.v2beta.EmailQuery email_query = 6;
     */
    value: EmailQuery;
    case: "emailQuery";
  } | {
    /**
     * @generated from field: zitadel.user.v2beta.StateQuery state_query = 7;
     */
    value: StateQuery;
    case: "stateQuery";
  } | {
    /**
     * @generated from field: zitadel.user.v2beta.TypeQuery type_query = 8;
     */
    value: TypeQuery;
    case: "typeQuery";
  } | {
    /**
     * @generated from field: zitadel.user.v2beta.LoginNameQuery login_name_query = 9;
     */
    value: LoginNameQuery;
    case: "loginNameQuery";
  } | {
    /**
     * @generated from field: zitadel.user.v2beta.InUserIDQuery in_user_ids_query = 10;
     */
    value: InUserIDQuery;
    case: "inUserIdsQuery";
  } | {
    /**
     * @generated from field: zitadel.user.v2beta.OrQuery or_query = 11;
     */
    value: OrQuery;
    case: "orQuery";
  } | {
    /**
     * @generated from field: zitadel.user.v2beta.AndQuery and_query = 12;
     */
    value: AndQuery;
    case: "andQuery";
  } | {
    /**
     * @generated from field: zitadel.user.v2beta.NotQuery not_query = 13;
     */
    value: NotQuery;
    case: "notQuery";
  } | {
    /**
     * @generated from field: zitadel.user.v2beta.InUserEmailsQuery in_user_emails_query = 14;
     */
    value: InUserEmailsQuery;
    case: "inUserEmailsQuery";
  } | {
    /**
     * @generated from field: zitadel.user.v2beta.OrganizationIdQuery organization_id_query = 15;
     */
    value: OrganizationIdQuery;
    case: "organizationIdQuery";
  } | {
    /**
     * @generated from field: zitadel.user.v2beta.PhoneQuery phone_query = 16;
     */
    value: PhoneQuery;
    case: "phoneQuery";
  } | { case: undefined; value?: undefined };
};

/**
 * @generated from message zitadel.user.v2beta.SearchQuery
 */
export declare type SearchQueryJson = {
  /**
   * @generated from field: zitadel.user.v2beta.UserNameQuery user_name_query = 1;
   */
  userNameQuery?: UserNameQueryJson;

  /**
   * @generated from field: zitadel.user.v2beta.FirstNameQuery first_name_query = 2;
   */
  firstNameQuery?: FirstNameQueryJson;

  /**
   * @generated from field: zitadel.user.v2beta.LastNameQuery last_name_query = 3;
   */
  lastNameQuery?: LastNameQueryJson;

  /**
   * @generated from field: zitadel.user.v2beta.NickNameQuery nick_name_query = 4;
   */
  nickNameQuery?: NickNameQueryJson;

  /**
   * @generated from field: zitadel.user.v2beta.DisplayNameQuery display_name_query = 5;
   */
  displayNameQuery?: DisplayNameQueryJson;

  /**
   * @generated from field: zitadel.user.v2beta.EmailQuery email_query = 6;
   */
  emailQuery?: EmailQueryJson;

  /**
   * @generated from field: zitadel.user.v2beta.StateQuery state_query = 7;
   */
  stateQuery?: StateQueryJson;

  /**
   * @generated from field: zitadel.user.v2beta.TypeQuery type_query = 8;
   */
  typeQuery?: TypeQueryJson;

  /**
   * @generated from field: zitadel.user.v2beta.LoginNameQuery login_name_query = 9;
   */
  loginNameQuery?: LoginNameQueryJson;

  /**
   * @generated from field: zitadel.user.v2beta.InUserIDQuery in_user_ids_query = 10;
   */
  inUserIdsQuery?: InUserIDQueryJson;

  /**
   * @generated from field: zitadel.user.v2beta.OrQuery or_query = 11;
   */
  orQuery?: OrQueryJson;

  /**
   * @generated from field: zitadel.user.v2beta.AndQuery and_query = 12;
   */
  andQuery?: AndQueryJson;

  /**
   * @generated from field: zitadel.user.v2beta.NotQuery not_query = 13;
   */
  notQuery?: NotQueryJson;

  /**
   * @generated from field: zitadel.user.v2beta.InUserEmailsQuery in_user_emails_query = 14;
   */
  inUserEmailsQuery?: InUserEmailsQueryJson;

  /**
   * @generated from field: zitadel.user.v2beta.OrganizationIdQuery organization_id_query = 15;
   */
  organizationIdQuery?: OrganizationIdQueryJson;

  /**
   * @generated from field: zitadel.user.v2beta.PhoneQuery phone_query = 16;
   */
  phoneQuery?: PhoneQueryJson;
};

/**
 * Describes the message zitadel.user.v2beta.SearchQuery.
 * Use `create(SearchQuerySchema)` to create a new message.
 */
export declare const SearchQuerySchema: GenMessage<SearchQuery, {jsonType: SearchQueryJson}>;

/**
 * Connect multiple sub-condition with and OR operator.
 *
 * @generated from message zitadel.user.v2beta.OrQuery
 */
export declare type OrQuery = Message<"zitadel.user.v2beta.OrQuery"> & {
  /**
   * @generated from field: repeated zitadel.user.v2beta.SearchQuery queries = 1;
   */
  queries: SearchQuery[];
};

/**
 * Connect multiple sub-condition with and OR operator.
 *
 * @generated from message zitadel.user.v2beta.OrQuery
 */
export declare type OrQueryJson = {
  /**
   * @generated from field: repeated zitadel.user.v2beta.SearchQuery queries = 1;
   */
  queries?: SearchQueryJson[];
};

/**
 * Describes the message zitadel.user.v2beta.OrQuery.
 * Use `create(OrQuerySchema)` to create a new message.
 */
export declare const OrQuerySchema: GenMessage<OrQuery, {jsonType: OrQueryJson}>;

/**
 * Connect multiple sub-condition with and AND operator.
 *
 * @generated from message zitadel.user.v2beta.AndQuery
 */
export declare type AndQuery = Message<"zitadel.user.v2beta.AndQuery"> & {
  /**
   * @generated from field: repeated zitadel.user.v2beta.SearchQuery queries = 1;
   */
  queries: SearchQuery[];
};

/**
 * Connect multiple sub-condition with and AND operator.
 *
 * @generated from message zitadel.user.v2beta.AndQuery
 */
export declare type AndQueryJson = {
  /**
   * @generated from field: repeated zitadel.user.v2beta.SearchQuery queries = 1;
   */
  queries?: SearchQueryJson[];
};

/**
 * Describes the message zitadel.user.v2beta.AndQuery.
 * Use `create(AndQuerySchema)` to create a new message.
 */
export declare const AndQuerySchema: GenMessage<AndQuery, {jsonType: AndQueryJson}>;

/**
 * Negate the sub-condition.
 *
 * @generated from message zitadel.user.v2beta.NotQuery
 */
export declare type NotQuery = Message<"zitadel.user.v2beta.NotQuery"> & {
  /**
   * @generated from field: zitadel.user.v2beta.SearchQuery query = 1;
   */
  query?: SearchQuery;
};

/**
 * Negate the sub-condition.
 *
 * @generated from message zitadel.user.v2beta.NotQuery
 */
export declare type NotQueryJson = {
  /**
   * @generated from field: zitadel.user.v2beta.SearchQuery query = 1;
   */
  query?: SearchQueryJson;
};

/**
 * Describes the message zitadel.user.v2beta.NotQuery.
 * Use `create(NotQuerySchema)` to create a new message.
 */
export declare const NotQuerySchema: GenMessage<NotQuery, {jsonType: NotQueryJson}>;

/**
 * Query for users with ID in list of IDs.
 *
 * @generated from message zitadel.user.v2beta.InUserIDQuery
 */
export declare type InUserIDQuery = Message<"zitadel.user.v2beta.InUserIDQuery"> & {
  /**
   * @generated from field: repeated string user_ids = 1;
   */
  userIds: string[];
};

/**
 * Query for users with ID in list of IDs.
 *
 * @generated from message zitadel.user.v2beta.InUserIDQuery
 */
export declare type InUserIDQueryJson = {
  /**
   * @generated from field: repeated string user_ids = 1;
   */
  userIds?: string[];
};

/**
 * Describes the message zitadel.user.v2beta.InUserIDQuery.
 * Use `create(InUserIDQuerySchema)` to create a new message.
 */
export declare const InUserIDQuerySchema: GenMessage<InUserIDQuery, {jsonType: InUserIDQueryJson}>;

/**
 * Query for users with a specific user name.
 *
 * @generated from message zitadel.user.v2beta.UserNameQuery
 */
export declare type UserNameQuery = Message<"zitadel.user.v2beta.UserNameQuery"> & {
  /**
   * @generated from field: string user_name = 1;
   */
  userName: string;

  /**
   * @generated from field: zitadel.object.v2beta.TextQueryMethod method = 2;
   */
  method: TextQueryMethod;
};

/**
 * Query for users with a specific user name.
 *
 * @generated from message zitadel.user.v2beta.UserNameQuery
 */
export declare type UserNameQueryJson = {
  /**
   * @generated from field: string user_name = 1;
   */
  userName?: string;

  /**
   * @generated from field: zitadel.object.v2beta.TextQueryMethod method = 2;
   */
  method?: TextQueryMethodJson;
};

/**
 * Describes the message zitadel.user.v2beta.UserNameQuery.
 * Use `create(UserNameQuerySchema)` to create a new message.
 */
export declare const UserNameQuerySchema: GenMessage<UserNameQuery, {jsonType: UserNameQueryJson}>;

/**
 * Query for users with a specific first name.
 *
 * @generated from message zitadel.user.v2beta.FirstNameQuery
 */
export declare type FirstNameQuery = Message<"zitadel.user.v2beta.FirstNameQuery"> & {
  /**
   * @generated from field: string first_name = 1;
   */
  firstName: string;

  /**
   * @generated from field: zitadel.object.v2beta.TextQueryMethod method = 2;
   */
  method: TextQueryMethod;
};

/**
 * Query for users with a specific first name.
 *
 * @generated from message zitadel.user.v2beta.FirstNameQuery
 */
export declare type FirstNameQueryJson = {
  /**
   * @generated from field: string first_name = 1;
   */
  firstName?: string;

  /**
   * @generated from field: zitadel.object.v2beta.TextQueryMethod method = 2;
   */
  method?: TextQueryMethodJson;
};

/**
 * Describes the message zitadel.user.v2beta.FirstNameQuery.
 * Use `create(FirstNameQuerySchema)` to create a new message.
 */
export declare const FirstNameQuerySchema: GenMessage<FirstNameQuery, {jsonType: FirstNameQueryJson}>;

/**
 * Query for users with a specific last name.
 *
 * @generated from message zitadel.user.v2beta.LastNameQuery
 */
export declare type LastNameQuery = Message<"zitadel.user.v2beta.LastNameQuery"> & {
  /**
   * @generated from field: string last_name = 1;
   */
  lastName: string;

  /**
   * @generated from field: zitadel.object.v2beta.TextQueryMethod method = 2;
   */
  method: TextQueryMethod;
};

/**
 * Query for users with a specific last name.
 *
 * @generated from message zitadel.user.v2beta.LastNameQuery
 */
export declare type LastNameQueryJson = {
  /**
   * @generated from field: string last_name = 1;
   */
  lastName?: string;

  /**
   * @generated from field: zitadel.object.v2beta.TextQueryMethod method = 2;
   */
  method?: TextQueryMethodJson;
};

/**
 * Describes the message zitadel.user.v2beta.LastNameQuery.
 * Use `create(LastNameQuerySchema)` to create a new message.
 */
export declare const LastNameQuerySchema: GenMessage<LastNameQuery, {jsonType: LastNameQueryJson}>;

/**
 * Query for users with a specific nickname.
 *
 * @generated from message zitadel.user.v2beta.NickNameQuery
 */
export declare type NickNameQuery = Message<"zitadel.user.v2beta.NickNameQuery"> & {
  /**
   * @generated from field: string nick_name = 1;
   */
  nickName: string;

  /**
   * @generated from field: zitadel.object.v2beta.TextQueryMethod method = 2;
   */
  method: TextQueryMethod;
};

/**
 * Query for users with a specific nickname.
 *
 * @generated from message zitadel.user.v2beta.NickNameQuery
 */
export declare type NickNameQueryJson = {
  /**
   * @generated from field: string nick_name = 1;
   */
  nickName?: string;

  /**
   * @generated from field: zitadel.object.v2beta.TextQueryMethod method = 2;
   */
  method?: TextQueryMethodJson;
};

/**
 * Describes the message zitadel.user.v2beta.NickNameQuery.
 * Use `create(NickNameQuerySchema)` to create a new message.
 */
export declare const NickNameQuerySchema: GenMessage<NickNameQuery, {jsonType: NickNameQueryJson}>;

/**
 * Query for users with a specific display name.
 *
 * @generated from message zitadel.user.v2beta.DisplayNameQuery
 */
export declare type DisplayNameQuery = Message<"zitadel.user.v2beta.DisplayNameQuery"> & {
  /**
   * @generated from field: string display_name = 1;
   */
  displayName: string;

  /**
   * @generated from field: zitadel.object.v2beta.TextQueryMethod method = 2;
   */
  method: TextQueryMethod;
};

/**
 * Query for users with a specific display name.
 *
 * @generated from message zitadel.user.v2beta.DisplayNameQuery
 */
export declare type DisplayNameQueryJson = {
  /**
   * @generated from field: string display_name = 1;
   */
  displayName?: string;

  /**
   * @generated from field: zitadel.object.v2beta.TextQueryMethod method = 2;
   */
  method?: TextQueryMethodJson;
};

/**
 * Describes the message zitadel.user.v2beta.DisplayNameQuery.
 * Use `create(DisplayNameQuerySchema)` to create a new message.
 */
export declare const DisplayNameQuerySchema: GenMessage<DisplayNameQuery, {jsonType: DisplayNameQueryJson}>;

/**
 * Query for users with a specific email.
 *
 * @generated from message zitadel.user.v2beta.EmailQuery
 */
export declare type EmailQuery = Message<"zitadel.user.v2beta.EmailQuery"> & {
  /**
   * @generated from field: string email_address = 1;
   */
  emailAddress: string;

  /**
   * @generated from field: zitadel.object.v2beta.TextQueryMethod method = 2;
   */
  method: TextQueryMethod;
};

/**
 * Query for users with a specific email.
 *
 * @generated from message zitadel.user.v2beta.EmailQuery
 */
export declare type EmailQueryJson = {
  /**
   * @generated from field: string email_address = 1;
   */
  emailAddress?: string;

  /**
   * @generated from field: zitadel.object.v2beta.TextQueryMethod method = 2;
   */
  method?: TextQueryMethodJson;
};

/**
 * Describes the message zitadel.user.v2beta.EmailQuery.
 * Use `create(EmailQuerySchema)` to create a new message.
 */
export declare const EmailQuerySchema: GenMessage<EmailQuery, {jsonType: EmailQueryJson}>;

/**
 * Query for users with a specific phone.
 *
 * @generated from message zitadel.user.v2beta.PhoneQuery
 */
export declare type PhoneQuery = Message<"zitadel.user.v2beta.PhoneQuery"> & {
  /**
   * @generated from field: string number = 1;
   */
  number: string;

  /**
   * @generated from field: zitadel.object.v2beta.TextQueryMethod method = 2;
   */
  method: TextQueryMethod;
};

/**
 * Query for users with a specific phone.
 *
 * @generated from message zitadel.user.v2beta.PhoneQuery
 */
export declare type PhoneQueryJson = {
  /**
   * @generated from field: string number = 1;
   */
  number?: string;

  /**
   * @generated from field: zitadel.object.v2beta.TextQueryMethod method = 2;
   */
  method?: TextQueryMethodJson;
};

/**
 * Describes the message zitadel.user.v2beta.PhoneQuery.
 * Use `create(PhoneQuerySchema)` to create a new message.
 */
export declare const PhoneQuerySchema: GenMessage<PhoneQuery, {jsonType: PhoneQueryJson}>;

/**
 * Query for users with a specific state.
 *
 * @generated from message zitadel.user.v2beta.LoginNameQuery
 */
export declare type LoginNameQuery = Message<"zitadel.user.v2beta.LoginNameQuery"> & {
  /**
   * @generated from field: string login_name = 1;
   */
  loginName: string;

  /**
   * @generated from field: zitadel.object.v2beta.TextQueryMethod method = 2;
   */
  method: TextQueryMethod;
};

/**
 * Query for users with a specific state.
 *
 * @generated from message zitadel.user.v2beta.LoginNameQuery
 */
export declare type LoginNameQueryJson = {
  /**
   * @generated from field: string login_name = 1;
   */
  loginName?: string;

  /**
   * @generated from field: zitadel.object.v2beta.TextQueryMethod method = 2;
   */
  method?: TextQueryMethodJson;
};

/**
 * Describes the message zitadel.user.v2beta.LoginNameQuery.
 * Use `create(LoginNameQuerySchema)` to create a new message.
 */
export declare const LoginNameQuerySchema: GenMessage<LoginNameQuery, {jsonType: LoginNameQueryJson}>;

/**
 * Query for users with a specific state.
 *
 * @generated from message zitadel.user.v2beta.StateQuery
 */
export declare type StateQuery = Message<"zitadel.user.v2beta.StateQuery"> & {
  /**
   * @generated from field: zitadel.user.v2beta.UserState state = 1;
   */
  state: UserState;
};

/**
 * Query for users with a specific state.
 *
 * @generated from message zitadel.user.v2beta.StateQuery
 */
export declare type StateQueryJson = {
  /**
   * @generated from field: zitadel.user.v2beta.UserState state = 1;
   */
  state?: UserStateJson;
};

/**
 * Describes the message zitadel.user.v2beta.StateQuery.
 * Use `create(StateQuerySchema)` to create a new message.
 */
export declare const StateQuerySchema: GenMessage<StateQuery, {jsonType: StateQueryJson}>;

/**
 * Query for users with a specific type.
 *
 * @generated from message zitadel.user.v2beta.TypeQuery
 */
export declare type TypeQuery = Message<"zitadel.user.v2beta.TypeQuery"> & {
  /**
   * @generated from field: zitadel.user.v2beta.Type type = 1;
   */
  type: Type;
};

/**
 * Query for users with a specific type.
 *
 * @generated from message zitadel.user.v2beta.TypeQuery
 */
export declare type TypeQueryJson = {
  /**
   * @generated from field: zitadel.user.v2beta.Type type = 1;
   */
  type?: TypeJson;
};

/**
 * Describes the message zitadel.user.v2beta.TypeQuery.
 * Use `create(TypeQuerySchema)` to create a new message.
 */
export declare const TypeQuerySchema: GenMessage<TypeQuery, {jsonType: TypeQueryJson}>;

/**
 * Query for users with email in list of emails.
 *
 * @generated from message zitadel.user.v2beta.InUserEmailsQuery
 */
export declare type InUserEmailsQuery = Message<"zitadel.user.v2beta.InUserEmailsQuery"> & {
  /**
   * @generated from field: repeated string user_emails = 1;
   */
  userEmails: string[];
};

/**
 * Query for users with email in list of emails.
 *
 * @generated from message zitadel.user.v2beta.InUserEmailsQuery
 */
export declare type InUserEmailsQueryJson = {
  /**
   * @generated from field: repeated string user_emails = 1;
   */
  userEmails?: string[];
};

/**
 * Describes the message zitadel.user.v2beta.InUserEmailsQuery.
 * Use `create(InUserEmailsQuerySchema)` to create a new message.
 */
export declare const InUserEmailsQuerySchema: GenMessage<InUserEmailsQuery, {jsonType: InUserEmailsQueryJson}>;

/**
 * Query for users under a specific organization as resource owner.
 *
 * @generated from message zitadel.user.v2beta.OrganizationIdQuery
 */
export declare type OrganizationIdQuery = Message<"zitadel.user.v2beta.OrganizationIdQuery"> & {
  /**
   * @generated from field: string organization_id = 1;
   */
  organizationId: string;
};

/**
 * Query for users under a specific organization as resource owner.
 *
 * @generated from message zitadel.user.v2beta.OrganizationIdQuery
 */
export declare type OrganizationIdQueryJson = {
  /**
   * @generated from field: string organization_id = 1;
   */
  organizationId?: string;
};

/**
 * Describes the message zitadel.user.v2beta.OrganizationIdQuery.
 * Use `create(OrganizationIdQuerySchema)` to create a new message.
 */
export declare const OrganizationIdQuerySchema: GenMessage<OrganizationIdQuery, {jsonType: OrganizationIdQueryJson}>;

/**
 * @generated from enum zitadel.user.v2beta.Type
 */
export enum Type {
  /**
   * @generated from enum value: TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: TYPE_HUMAN = 1;
   */
  HUMAN = 1,

  /**
   * @generated from enum value: TYPE_MACHINE = 2;
   */
  MACHINE = 2,
}

/**
 * @generated from enum zitadel.user.v2beta.Type
 */
export declare type TypeJson = "TYPE_UNSPECIFIED" | "TYPE_HUMAN" | "TYPE_MACHINE";

/**
 * Describes the enum zitadel.user.v2beta.Type.
 */
export declare const TypeSchema: GenEnum<Type, TypeJson>;

/**
 * @generated from enum zitadel.user.v2beta.UserFieldName
 */
export enum UserFieldName {
  /**
   * @generated from enum value: USER_FIELD_NAME_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: USER_FIELD_NAME_USER_NAME = 1;
   */
  USER_NAME = 1,

  /**
   * @generated from enum value: USER_FIELD_NAME_FIRST_NAME = 2;
   */
  FIRST_NAME = 2,

  /**
   * @generated from enum value: USER_FIELD_NAME_LAST_NAME = 3;
   */
  LAST_NAME = 3,

  /**
   * @generated from enum value: USER_FIELD_NAME_NICK_NAME = 4;
   */
  NICK_NAME = 4,

  /**
   * @generated from enum value: USER_FIELD_NAME_DISPLAY_NAME = 5;
   */
  DISPLAY_NAME = 5,

  /**
   * @generated from enum value: USER_FIELD_NAME_EMAIL = 6;
   */
  EMAIL = 6,

  /**
   * @generated from enum value: USER_FIELD_NAME_STATE = 7;
   */
  STATE = 7,

  /**
   * @generated from enum value: USER_FIELD_NAME_TYPE = 8;
   */
  TYPE = 8,

  /**
   * @generated from enum value: USER_FIELD_NAME_CREATION_DATE = 9;
   */
  CREATION_DATE = 9,
}

/**
 * @generated from enum zitadel.user.v2beta.UserFieldName
 */
export declare type UserFieldNameJson = "USER_FIELD_NAME_UNSPECIFIED" | "USER_FIELD_NAME_USER_NAME" | "USER_FIELD_NAME_FIRST_NAME" | "USER_FIELD_NAME_LAST_NAME" | "USER_FIELD_NAME_NICK_NAME" | "USER_FIELD_NAME_DISPLAY_NAME" | "USER_FIELD_NAME_EMAIL" | "USER_FIELD_NAME_STATE" | "USER_FIELD_NAME_TYPE" | "USER_FIELD_NAME_CREATION_DATE";

/**
 * Describes the enum zitadel.user.v2beta.UserFieldName.
 */
export declare const UserFieldNameSchema: GenEnum<UserFieldName, UserFieldNameJson>;

