// @generated by protoc-gen-es v2.6.0 with parameter "json_types=true,import_extension=js"
// @generated from file zitadel/user/v2beta/user_service.proto (package zitadel.user.v2beta, syntax proto3)
/* eslint-disable */

import { enumDesc, fileDesc, messageDesc, serviceDesc, tsEnum } from "@bufbuild/protobuf/codegenv2";
import { file_zitadel_object_v2beta_object } from "../../object/v2beta/object_pb.js";
import { file_zitadel_protoc_gen_zitadel_v2_options } from "../../protoc_gen_zitadel/v2/options_pb.js";
import { file_zitadel_user_v2beta_auth } from "./auth_pb.js";
import { file_zitadel_user_v2beta_email } from "./email_pb.js";
import { file_zitadel_user_v2beta_phone } from "./phone_pb.js";
import { file_zitadel_user_v2beta_idp } from "./idp_pb.js";
import { file_zitadel_user_v2beta_password } from "./password_pb.js";
import { file_zitadel_user_v2beta_user } from "./user_pb.js";
import { file_zitadel_user_v2beta_query } from "./query_pb.js";
import { file_google_api_annotations } from "../../../google/api/annotations_pb.js";
import { file_google_api_field_behavior } from "../../../google/api/field_behavior_pb.js";
import { file_google_protobuf_duration, file_google_protobuf_struct } from "@bufbuild/protobuf/wkt";
import { file_protoc_gen_openapiv2_options_annotations } from "../../../protoc-gen-openapiv2/options/annotations_pb.js";
import { file_validate_validate } from "../../../validate/validate_pb.js";

/**
 * Describes the file zitadel/user/v2beta/user_service.proto.
 */
export const file_zitadel_user_v2beta_user_service = /*@__PURE__*/
  fileDesc("", [file_zitadel_object_v2beta_object, file_zitadel_protoc_gen_zitadel_v2_options, file_zitadel_user_v2beta_auth, file_zitadel_user_v2beta_email, file_zitadel_user_v2beta_phone, file_zitadel_user_v2beta_idp, file_zitadel_user_v2beta_password, file_zitadel_user_v2beta_user, file_zitadel_user_v2beta_query, file_google_api_annotations, file_google_api_field_behavior, file_google_protobuf_duration, file_google_protobuf_struct, file_protoc_gen_openapiv2_options_annotations, file_validate_validate]);

/**
 * Describes the message zitadel.user.v2beta.AddHumanUserRequest.
 * Use `create(AddHumanUserRequestSchema)` to create a new message.
 */
export const AddHumanUserRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2beta_user_service, 0);

/**
 * Describes the message zitadel.user.v2beta.AddHumanUserResponse.
 * Use `create(AddHumanUserResponseSchema)` to create a new message.
 */
export const AddHumanUserResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2beta_user_service, 1);

/**
 * Describes the message zitadel.user.v2beta.GetUserByIDRequest.
 * Use `create(GetUserByIDRequestSchema)` to create a new message.
 */
export const GetUserByIDRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2beta_user_service, 2);

/**
 * Describes the message zitadel.user.v2beta.GetUserByIDResponse.
 * Use `create(GetUserByIDResponseSchema)` to create a new message.
 */
export const GetUserByIDResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2beta_user_service, 3);

/**
 * Describes the message zitadel.user.v2beta.ListUsersRequest.
 * Use `create(ListUsersRequestSchema)` to create a new message.
 */
export const ListUsersRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2beta_user_service, 4);

/**
 * Describes the message zitadel.user.v2beta.ListUsersResponse.
 * Use `create(ListUsersResponseSchema)` to create a new message.
 */
export const ListUsersResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2beta_user_service, 5);

/**
 * Describes the message zitadel.user.v2beta.SetEmailRequest.
 * Use `create(SetEmailRequestSchema)` to create a new message.
 */
export const SetEmailRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2beta_user_service, 6);

/**
 * Describes the message zitadel.user.v2beta.SetEmailResponse.
 * Use `create(SetEmailResponseSchema)` to create a new message.
 */
export const SetEmailResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2beta_user_service, 7);

/**
 * Describes the message zitadel.user.v2beta.ResendEmailCodeRequest.
 * Use `create(ResendEmailCodeRequestSchema)` to create a new message.
 */
export const ResendEmailCodeRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2beta_user_service, 8);

/**
 * Describes the message zitadel.user.v2beta.ResendEmailCodeResponse.
 * Use `create(ResendEmailCodeResponseSchema)` to create a new message.
 */
export const ResendEmailCodeResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2beta_user_service, 9);

/**
 * Describes the message zitadel.user.v2beta.VerifyEmailRequest.
 * Use `create(VerifyEmailRequestSchema)` to create a new message.
 */
export const VerifyEmailRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2beta_user_service, 10);

/**
 * Describes the message zitadel.user.v2beta.VerifyEmailResponse.
 * Use `create(VerifyEmailResponseSchema)` to create a new message.
 */
export const VerifyEmailResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2beta_user_service, 11);

/**
 * Describes the message zitadel.user.v2beta.SetPhoneRequest.
 * Use `create(SetPhoneRequestSchema)` to create a new message.
 */
export const SetPhoneRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2beta_user_service, 12);

/**
 * Describes the message zitadel.user.v2beta.SetPhoneResponse.
 * Use `create(SetPhoneResponseSchema)` to create a new message.
 */
export const SetPhoneResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2beta_user_service, 13);

/**
 * Describes the message zitadel.user.v2beta.RemovePhoneRequest.
 * Use `create(RemovePhoneRequestSchema)` to create a new message.
 */
export const RemovePhoneRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2beta_user_service, 14);

/**
 * Describes the message zitadel.user.v2beta.RemovePhoneResponse.
 * Use `create(RemovePhoneResponseSchema)` to create a new message.
 */
export const RemovePhoneResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2beta_user_service, 15);

/**
 * Describes the message zitadel.user.v2beta.ResendPhoneCodeRequest.
 * Use `create(ResendPhoneCodeRequestSchema)` to create a new message.
 */
export const ResendPhoneCodeRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2beta_user_service, 16);

/**
 * Describes the message zitadel.user.v2beta.ResendPhoneCodeResponse.
 * Use `create(ResendPhoneCodeResponseSchema)` to create a new message.
 */
export const ResendPhoneCodeResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2beta_user_service, 17);

/**
 * Describes the message zitadel.user.v2beta.VerifyPhoneRequest.
 * Use `create(VerifyPhoneRequestSchema)` to create a new message.
 */
export const VerifyPhoneRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2beta_user_service, 18);

/**
 * Describes the message zitadel.user.v2beta.VerifyPhoneResponse.
 * Use `create(VerifyPhoneResponseSchema)` to create a new message.
 */
export const VerifyPhoneResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2beta_user_service, 19);

/**
 * Describes the message zitadel.user.v2beta.DeleteUserRequest.
 * Use `create(DeleteUserRequestSchema)` to create a new message.
 */
export const DeleteUserRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2beta_user_service, 20);

/**
 * Describes the message zitadel.user.v2beta.DeleteUserResponse.
 * Use `create(DeleteUserResponseSchema)` to create a new message.
 */
export const DeleteUserResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2beta_user_service, 21);

/**
 * Describes the message zitadel.user.v2beta.UpdateHumanUserRequest.
 * Use `create(UpdateHumanUserRequestSchema)` to create a new message.
 */
export const UpdateHumanUserRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2beta_user_service, 22);

/**
 * Describes the message zitadel.user.v2beta.UpdateHumanUserResponse.
 * Use `create(UpdateHumanUserResponseSchema)` to create a new message.
 */
export const UpdateHumanUserResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2beta_user_service, 23);

/**
 * Describes the message zitadel.user.v2beta.DeactivateUserRequest.
 * Use `create(DeactivateUserRequestSchema)` to create a new message.
 */
export const DeactivateUserRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2beta_user_service, 24);

/**
 * Describes the message zitadel.user.v2beta.DeactivateUserResponse.
 * Use `create(DeactivateUserResponseSchema)` to create a new message.
 */
export const DeactivateUserResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2beta_user_service, 25);

/**
 * Describes the message zitadel.user.v2beta.ReactivateUserRequest.
 * Use `create(ReactivateUserRequestSchema)` to create a new message.
 */
export const ReactivateUserRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2beta_user_service, 26);

/**
 * Describes the message zitadel.user.v2beta.ReactivateUserResponse.
 * Use `create(ReactivateUserResponseSchema)` to create a new message.
 */
export const ReactivateUserResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2beta_user_service, 27);

/**
 * Describes the message zitadel.user.v2beta.LockUserRequest.
 * Use `create(LockUserRequestSchema)` to create a new message.
 */
export const LockUserRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2beta_user_service, 28);

/**
 * Describes the message zitadel.user.v2beta.LockUserResponse.
 * Use `create(LockUserResponseSchema)` to create a new message.
 */
export const LockUserResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2beta_user_service, 29);

/**
 * Describes the message zitadel.user.v2beta.UnlockUserRequest.
 * Use `create(UnlockUserRequestSchema)` to create a new message.
 */
export const UnlockUserRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2beta_user_service, 30);

/**
 * Describes the message zitadel.user.v2beta.UnlockUserResponse.
 * Use `create(UnlockUserResponseSchema)` to create a new message.
 */
export const UnlockUserResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2beta_user_service, 31);

/**
 * Describes the message zitadel.user.v2beta.RegisterPasskeyRequest.
 * Use `create(RegisterPasskeyRequestSchema)` to create a new message.
 */
export const RegisterPasskeyRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2beta_user_service, 32);

/**
 * Describes the message zitadel.user.v2beta.RegisterPasskeyResponse.
 * Use `create(RegisterPasskeyResponseSchema)` to create a new message.
 */
export const RegisterPasskeyResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2beta_user_service, 33);

/**
 * Describes the message zitadel.user.v2beta.VerifyPasskeyRegistrationRequest.
 * Use `create(VerifyPasskeyRegistrationRequestSchema)` to create a new message.
 */
export const VerifyPasskeyRegistrationRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2beta_user_service, 34);

/**
 * Describes the message zitadel.user.v2beta.VerifyPasskeyRegistrationResponse.
 * Use `create(VerifyPasskeyRegistrationResponseSchema)` to create a new message.
 */
export const VerifyPasskeyRegistrationResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2beta_user_service, 35);

/**
 * Describes the message zitadel.user.v2beta.RegisterU2FRequest.
 * Use `create(RegisterU2FRequestSchema)` to create a new message.
 */
export const RegisterU2FRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2beta_user_service, 36);

/**
 * Describes the message zitadel.user.v2beta.RegisterU2FResponse.
 * Use `create(RegisterU2FResponseSchema)` to create a new message.
 */
export const RegisterU2FResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2beta_user_service, 37);

/**
 * Describes the message zitadel.user.v2beta.VerifyU2FRegistrationRequest.
 * Use `create(VerifyU2FRegistrationRequestSchema)` to create a new message.
 */
export const VerifyU2FRegistrationRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2beta_user_service, 38);

/**
 * Describes the message zitadel.user.v2beta.VerifyU2FRegistrationResponse.
 * Use `create(VerifyU2FRegistrationResponseSchema)` to create a new message.
 */
export const VerifyU2FRegistrationResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2beta_user_service, 39);

/**
 * Describes the message zitadel.user.v2beta.RegisterTOTPRequest.
 * Use `create(RegisterTOTPRequestSchema)` to create a new message.
 */
export const RegisterTOTPRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2beta_user_service, 40);

/**
 * Describes the message zitadel.user.v2beta.RegisterTOTPResponse.
 * Use `create(RegisterTOTPResponseSchema)` to create a new message.
 */
export const RegisterTOTPResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2beta_user_service, 41);

/**
 * Describes the message zitadel.user.v2beta.VerifyTOTPRegistrationRequest.
 * Use `create(VerifyTOTPRegistrationRequestSchema)` to create a new message.
 */
export const VerifyTOTPRegistrationRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2beta_user_service, 42);

/**
 * Describes the message zitadel.user.v2beta.VerifyTOTPRegistrationResponse.
 * Use `create(VerifyTOTPRegistrationResponseSchema)` to create a new message.
 */
export const VerifyTOTPRegistrationResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2beta_user_service, 43);

/**
 * Describes the message zitadel.user.v2beta.RemoveTOTPRequest.
 * Use `create(RemoveTOTPRequestSchema)` to create a new message.
 */
export const RemoveTOTPRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2beta_user_service, 44);

/**
 * Describes the message zitadel.user.v2beta.RemoveTOTPResponse.
 * Use `create(RemoveTOTPResponseSchema)` to create a new message.
 */
export const RemoveTOTPResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2beta_user_service, 45);

/**
 * Describes the message zitadel.user.v2beta.AddOTPSMSRequest.
 * Use `create(AddOTPSMSRequestSchema)` to create a new message.
 */
export const AddOTPSMSRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2beta_user_service, 46);

/**
 * Describes the message zitadel.user.v2beta.AddOTPSMSResponse.
 * Use `create(AddOTPSMSResponseSchema)` to create a new message.
 */
export const AddOTPSMSResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2beta_user_service, 47);

/**
 * Describes the message zitadel.user.v2beta.RemoveOTPSMSRequest.
 * Use `create(RemoveOTPSMSRequestSchema)` to create a new message.
 */
export const RemoveOTPSMSRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2beta_user_service, 48);

/**
 * Describes the message zitadel.user.v2beta.RemoveOTPSMSResponse.
 * Use `create(RemoveOTPSMSResponseSchema)` to create a new message.
 */
export const RemoveOTPSMSResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2beta_user_service, 49);

/**
 * Describes the message zitadel.user.v2beta.AddOTPEmailRequest.
 * Use `create(AddOTPEmailRequestSchema)` to create a new message.
 */
export const AddOTPEmailRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2beta_user_service, 50);

/**
 * Describes the message zitadel.user.v2beta.AddOTPEmailResponse.
 * Use `create(AddOTPEmailResponseSchema)` to create a new message.
 */
export const AddOTPEmailResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2beta_user_service, 51);

/**
 * Describes the message zitadel.user.v2beta.RemoveOTPEmailRequest.
 * Use `create(RemoveOTPEmailRequestSchema)` to create a new message.
 */
export const RemoveOTPEmailRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2beta_user_service, 52);

/**
 * Describes the message zitadel.user.v2beta.RemoveOTPEmailResponse.
 * Use `create(RemoveOTPEmailResponseSchema)` to create a new message.
 */
export const RemoveOTPEmailResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2beta_user_service, 53);

/**
 * Describes the message zitadel.user.v2beta.CreatePasskeyRegistrationLinkRequest.
 * Use `create(CreatePasskeyRegistrationLinkRequestSchema)` to create a new message.
 */
export const CreatePasskeyRegistrationLinkRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2beta_user_service, 54);

/**
 * Describes the message zitadel.user.v2beta.CreatePasskeyRegistrationLinkResponse.
 * Use `create(CreatePasskeyRegistrationLinkResponseSchema)` to create a new message.
 */
export const CreatePasskeyRegistrationLinkResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2beta_user_service, 55);

/**
 * Describes the message zitadel.user.v2beta.StartIdentityProviderIntentRequest.
 * Use `create(StartIdentityProviderIntentRequestSchema)` to create a new message.
 */
export const StartIdentityProviderIntentRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2beta_user_service, 56);

/**
 * Describes the message zitadel.user.v2beta.StartIdentityProviderIntentResponse.
 * Use `create(StartIdentityProviderIntentResponseSchema)` to create a new message.
 */
export const StartIdentityProviderIntentResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2beta_user_service, 57);

/**
 * Describes the message zitadel.user.v2beta.RetrieveIdentityProviderIntentRequest.
 * Use `create(RetrieveIdentityProviderIntentRequestSchema)` to create a new message.
 */
export const RetrieveIdentityProviderIntentRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2beta_user_service, 58);

/**
 * Describes the message zitadel.user.v2beta.RetrieveIdentityProviderIntentResponse.
 * Use `create(RetrieveIdentityProviderIntentResponseSchema)` to create a new message.
 */
export const RetrieveIdentityProviderIntentResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2beta_user_service, 59);

/**
 * Describes the message zitadel.user.v2beta.AddIDPLinkRequest.
 * Use `create(AddIDPLinkRequestSchema)` to create a new message.
 */
export const AddIDPLinkRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2beta_user_service, 60);

/**
 * Describes the message zitadel.user.v2beta.AddIDPLinkResponse.
 * Use `create(AddIDPLinkResponseSchema)` to create a new message.
 */
export const AddIDPLinkResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2beta_user_service, 61);

/**
 * Describes the message zitadel.user.v2beta.PasswordResetRequest.
 * Use `create(PasswordResetRequestSchema)` to create a new message.
 */
export const PasswordResetRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2beta_user_service, 62);

/**
 * Describes the message zitadel.user.v2beta.PasswordResetResponse.
 * Use `create(PasswordResetResponseSchema)` to create a new message.
 */
export const PasswordResetResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2beta_user_service, 63);

/**
 * Describes the message zitadel.user.v2beta.SetPasswordRequest.
 * Use `create(SetPasswordRequestSchema)` to create a new message.
 */
export const SetPasswordRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2beta_user_service, 64);

/**
 * Describes the message zitadel.user.v2beta.SetPasswordResponse.
 * Use `create(SetPasswordResponseSchema)` to create a new message.
 */
export const SetPasswordResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2beta_user_service, 65);

/**
 * Describes the message zitadel.user.v2beta.ListAuthenticationMethodTypesRequest.
 * Use `create(ListAuthenticationMethodTypesRequestSchema)` to create a new message.
 */
export const ListAuthenticationMethodTypesRequestSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2beta_user_service, 66);

/**
 * Describes the message zitadel.user.v2beta.ListAuthenticationMethodTypesResponse.
 * Use `create(ListAuthenticationMethodTypesResponseSchema)` to create a new message.
 */
export const ListAuthenticationMethodTypesResponseSchema = /*@__PURE__*/
  messageDesc(file_zitadel_user_v2beta_user_service, 67);

/**
 * Describes the enum zitadel.user.v2beta.AuthenticationMethodType.
 */
export const AuthenticationMethodTypeSchema = /*@__PURE__*/
  enumDesc(file_zitadel_user_v2beta_user_service, 0);

/**
 * @generated from enum zitadel.user.v2beta.AuthenticationMethodType
 */
export const AuthenticationMethodType = /*@__PURE__*/
  tsEnum(AuthenticationMethodTypeSchema);

/**
 * @generated from service zitadel.user.v2beta.UserService
 */
export const UserService = /*@__PURE__*/
  serviceDesc(file_zitadel_user_v2beta_user_service, 0);

