// @generated by protoc-gen-es v2.6.0 with parameter "json_types=true,import_extension=js"
// @generated from file zitadel/webkey/v2beta/key.proto (package zitadel.webkey.v2beta, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv2";
import type { Message } from "@bufbuild/protobuf";
import type { Timestamp, TimestampJson } from "@bufbuild/protobuf/wkt";

/**
 * Describes the file zitadel/webkey/v2beta/key.proto.
 */
export declare const file_zitadel_webkey_v2beta_key: GenFile;

/**
 * @generated from message zitadel.webkey.v2beta.WebKey
 */
export declare type WebKey = Message<"zitadel.webkey.v2beta.WebKey"> & {
  /**
   * The unique identifier of the key.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * The timestamp of the key creation.
   *
   * @generated from field: google.protobuf.Timestamp creation_date = 2;
   */
  creationDate?: Timestamp;

  /**
   * The timestamp of the last change to the key (e.g. creation, activation, deactivation).
   *
   * @generated from field: google.protobuf.Timestamp change_date = 3;
   */
  changeDate?: Timestamp;

  /**
   * State of the key
   *
   * @generated from field: zitadel.webkey.v2beta.State state = 4;
   */
  state: State;

  /**
   * Configured type of the key (either RSA, ECDSA or ED25519)
   *
   * @generated from oneof zitadel.webkey.v2beta.WebKey.key
   */
  key: {
    /**
     * @generated from field: zitadel.webkey.v2beta.RSA rsa = 5;
     */
    value: RSA;
    case: "rsa";
  } | {
    /**
     * @generated from field: zitadel.webkey.v2beta.ECDSA ecdsa = 6;
     */
    value: ECDSA;
    case: "ecdsa";
  } | {
    /**
     * @generated from field: zitadel.webkey.v2beta.ED25519 ed25519 = 7;
     */
    value: ED25519;
    case: "ed25519";
  } | { case: undefined; value?: undefined };
};

/**
 * @generated from message zitadel.webkey.v2beta.WebKey
 */
export declare type WebKeyJson = {
  /**
   * The unique identifier of the key.
   *
   * @generated from field: string id = 1;
   */
  id?: string;

  /**
   * The timestamp of the key creation.
   *
   * @generated from field: google.protobuf.Timestamp creation_date = 2;
   */
  creationDate?: TimestampJson;

  /**
   * The timestamp of the last change to the key (e.g. creation, activation, deactivation).
   *
   * @generated from field: google.protobuf.Timestamp change_date = 3;
   */
  changeDate?: TimestampJson;

  /**
   * State of the key
   *
   * @generated from field: zitadel.webkey.v2beta.State state = 4;
   */
  state?: StateJson;

  /**
   * @generated from field: zitadel.webkey.v2beta.RSA rsa = 5;
   */
  rsa?: RSAJson;

  /**
   * @generated from field: zitadel.webkey.v2beta.ECDSA ecdsa = 6;
   */
  ecdsa?: ECDSAJson;

  /**
   * @generated from field: zitadel.webkey.v2beta.ED25519 ed25519 = 7;
   */
  ed25519?: ED25519Json;
};

/**
 * Describes the message zitadel.webkey.v2beta.WebKey.
 * Use `create(WebKeySchema)` to create a new message.
 */
export declare const WebKeySchema: GenMessage<WebKey, {jsonType: WebKeyJson}>;

/**
 * @generated from message zitadel.webkey.v2beta.RSA
 */
export declare type RSA = Message<"zitadel.webkey.v2beta.RSA"> & {
  /**
   * Bit size of the RSA key. Default is 2048 bits.
   *
   * @generated from field: zitadel.webkey.v2beta.RSABits bits = 1;
   */
  bits: RSABits;

  /**
   * Signing algrithm used. Default is SHA256.
   *
   * @generated from field: zitadel.webkey.v2beta.RSAHasher hasher = 2;
   */
  hasher: RSAHasher;
};

/**
 * @generated from message zitadel.webkey.v2beta.RSA
 */
export declare type RSAJson = {
  /**
   * Bit size of the RSA key. Default is 2048 bits.
   *
   * @generated from field: zitadel.webkey.v2beta.RSABits bits = 1;
   */
  bits?: RSABitsJson;

  /**
   * Signing algrithm used. Default is SHA256.
   *
   * @generated from field: zitadel.webkey.v2beta.RSAHasher hasher = 2;
   */
  hasher?: RSAHasherJson;
};

/**
 * Describes the message zitadel.webkey.v2beta.RSA.
 * Use `create(RSASchema)` to create a new message.
 */
export declare const RSASchema: GenMessage<RSA, {jsonType: RSAJson}>;

/**
 * @generated from message zitadel.webkey.v2beta.ECDSA
 */
export declare type ECDSA = Message<"zitadel.webkey.v2beta.ECDSA"> & {
  /**
   * Curve of the ECDSA key. Default is P-256.
   *
   * @generated from field: zitadel.webkey.v2beta.ECDSACurve curve = 1;
   */
  curve: ECDSACurve;
};

/**
 * @generated from message zitadel.webkey.v2beta.ECDSA
 */
export declare type ECDSAJson = {
  /**
   * Curve of the ECDSA key. Default is P-256.
   *
   * @generated from field: zitadel.webkey.v2beta.ECDSACurve curve = 1;
   */
  curve?: ECDSACurveJson;
};

/**
 * Describes the message zitadel.webkey.v2beta.ECDSA.
 * Use `create(ECDSASchema)` to create a new message.
 */
export declare const ECDSASchema: GenMessage<ECDSA, {jsonType: ECDSAJson}>;

/**
 * @generated from message zitadel.webkey.v2beta.ED25519
 */
export declare type ED25519 = Message<"zitadel.webkey.v2beta.ED25519"> & {
};

/**
 * @generated from message zitadel.webkey.v2beta.ED25519
 */
export declare type ED25519Json = {
};

/**
 * Describes the message zitadel.webkey.v2beta.ED25519.
 * Use `create(ED25519Schema)` to create a new message.
 */
export declare const ED25519Schema: GenMessage<ED25519, {jsonType: ED25519Json}>;

/**
 * @generated from enum zitadel.webkey.v2beta.State
 */
export enum State {
  /**
   * @generated from enum value: STATE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * A newly created key is in the initial state and published to the public key endpoint.
   *
   * @generated from enum value: STATE_INITIAL = 1;
   */
  INITIAL = 1,

  /**
   * The active key is used to sign tokens. Only one key can be active at a time.
   *
   * @generated from enum value: STATE_ACTIVE = 2;
   */
  ACTIVE = 2,

  /**
   * The inactive key is not used to sign tokens anymore, but still published to the public key endpoint.
   *
   * @generated from enum value: STATE_INACTIVE = 3;
   */
  INACTIVE = 3,

  /**
   * The removed key is not used to sign tokens anymore and not published to the public key endpoint.
   *
   * @generated from enum value: STATE_REMOVED = 4;
   */
  REMOVED = 4,
}

/**
 * @generated from enum zitadel.webkey.v2beta.State
 */
export declare type StateJson = "STATE_UNSPECIFIED" | "STATE_INITIAL" | "STATE_ACTIVE" | "STATE_INACTIVE" | "STATE_REMOVED";

/**
 * Describes the enum zitadel.webkey.v2beta.State.
 */
export declare const StateSchema: GenEnum<State, StateJson>;

/**
 * @generated from enum zitadel.webkey.v2beta.RSABits
 */
export enum RSABits {
  /**
   * @generated from enum value: RSA_BITS_UNSPECIFIED = 0;
   */
  RSA_BITS_UNSPECIFIED = 0,

  /**
   * 2048 bit RSA key
   *
   * @generated from enum value: RSA_BITS_2048 = 1;
   */
  RSA_BITS_2048 = 1,

  /**
   * 3072 bit RSA key
   *
   * @generated from enum value: RSA_BITS_3072 = 2;
   */
  RSA_BITS_3072 = 2,

  /**
   * 4096 bit RSA key
   *
   * @generated from enum value: RSA_BITS_4096 = 3;
   */
  RSA_BITS_4096 = 3,
}

/**
 * @generated from enum zitadel.webkey.v2beta.RSABits
 */
export declare type RSABitsJson = "RSA_BITS_UNSPECIFIED" | "RSA_BITS_2048" | "RSA_BITS_3072" | "RSA_BITS_4096";

/**
 * Describes the enum zitadel.webkey.v2beta.RSABits.
 */
export declare const RSABitsSchema: GenEnum<RSABits, RSABitsJson>;

/**
 * @generated from enum zitadel.webkey.v2beta.RSAHasher
 */
export enum RSAHasher {
  /**
   * @generated from enum value: RSA_HASHER_UNSPECIFIED = 0;
   */
  RSA_HASHER_UNSPECIFIED = 0,

  /**
   * SHA256 hashing algorithm resulting in the RS256 algorithm header
   *
   * @generated from enum value: RSA_HASHER_SHA256 = 1;
   */
  RSA_HASHER_SHA256 = 1,

  /**
   * SHA384 hashing algorithm resulting in the RS384 algorithm header
   *
   * @generated from enum value: RSA_HASHER_SHA384 = 2;
   */
  RSA_HASHER_SHA384 = 2,

  /**
   * SHA512 hashing algorithm resulting in the RS512 algorithm header
   *
   * @generated from enum value: RSA_HASHER_SHA512 = 3;
   */
  RSA_HASHER_SHA512 = 3,
}

/**
 * @generated from enum zitadel.webkey.v2beta.RSAHasher
 */
export declare type RSAHasherJson = "RSA_HASHER_UNSPECIFIED" | "RSA_HASHER_SHA256" | "RSA_HASHER_SHA384" | "RSA_HASHER_SHA512";

/**
 * Describes the enum zitadel.webkey.v2beta.RSAHasher.
 */
export declare const RSAHasherSchema: GenEnum<RSAHasher, RSAHasherJson>;

/**
 * @generated from enum zitadel.webkey.v2beta.ECDSACurve
 */
export enum ECDSACurve {
  /**
   * @generated from enum value: ECDSA_CURVE_UNSPECIFIED = 0;
   */
  ECDSA_CURVE_UNSPECIFIED = 0,

  /**
   * NIST P-256 curve resulting in the ES256 algorithm header
   *
   * @generated from enum value: ECDSA_CURVE_P256 = 1;
   */
  ECDSA_CURVE_P256 = 1,

  /**
   * NIST P-384 curve resulting in the ES384 algorithm header
   *
   * @generated from enum value: ECDSA_CURVE_P384 = 2;
   */
  ECDSA_CURVE_P384 = 2,

  /**
   * NIST P-512 curve resulting in the ES512 algorithm header
   *
   * @generated from enum value: ECDSA_CURVE_P512 = 3;
   */
  ECDSA_CURVE_P512 = 3,
}

/**
 * @generated from enum zitadel.webkey.v2beta.ECDSACurve
 */
export declare type ECDSACurveJson = "ECDSA_CURVE_UNSPECIFIED" | "ECDSA_CURVE_P256" | "ECDSA_CURVE_P384" | "ECDSA_CURVE_P512";

/**
 * Describes the enum zitadel.webkey.v2beta.ECDSACurve.
 */
export declare const ECDSACurveSchema: GenEnum<ECDSACurve, ECDSACurveJson>;

