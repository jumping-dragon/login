// @generated by protoc-gen-es v2.6.0 with parameter "json_types=true,import_extension=js"
// @generated from file zitadel/webkey/v2beta/webkey_service.proto (package zitadel.webkey.v2beta, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import type { Message } from "@bufbuild/protobuf";
import type { ECDSA, ECDSAJson, ED25519, ED25519Json, RSA, RSAJson, WebKey, WebKeyJson } from "./key_pb.js";
import type { Timestamp, TimestampJson } from "@bufbuild/protobuf/wkt";

/**
 * Describes the file zitadel/webkey/v2beta/webkey_service.proto.
 */
export declare const file_zitadel_webkey_v2beta_webkey_service: GenFile;

/**
 * @generated from message zitadel.webkey.v2beta.CreateWebKeyRequest
 */
export declare type CreateWebKeyRequest = Message<"zitadel.webkey.v2beta.CreateWebKeyRequest"> & {
  /**
   * The key type to create (RSA, ECDSA, ED25519).
   * If no key type is provided, a RSA key pair with 2048 bits and SHA256 hashing will be created.
   *
   * @generated from oneof zitadel.webkey.v2beta.CreateWebKeyRequest.key
   */
  key: {
    /**
     * Create a RSA key pair and specify the bit size and hashing algorithm.
     * If no bits and hasher are provided, a RSA key pair with 2048 bits and SHA256 hashing will be created.
     *
     * @generated from field: zitadel.webkey.v2beta.RSA rsa = 1;
     */
    value: RSA;
    case: "rsa";
  } | {
    /**
     * Create a ECDSA key pair and specify the curve.
     * If no curve is provided, a ECDSA key pair with P-256 curve will be created.
     *
     * @generated from field: zitadel.webkey.v2beta.ECDSA ecdsa = 2;
     */
    value: ECDSA;
    case: "ecdsa";
  } | {
    /**
     * Create a ED25519 key pair.
     *
     * @generated from field: zitadel.webkey.v2beta.ED25519 ed25519 = 3;
     */
    value: ED25519;
    case: "ed25519";
  } | { case: undefined; value?: undefined };
};

/**
 * @generated from message zitadel.webkey.v2beta.CreateWebKeyRequest
 */
export declare type CreateWebKeyRequestJson = {
  /**
   * Create a RSA key pair and specify the bit size and hashing algorithm.
   * If no bits and hasher are provided, a RSA key pair with 2048 bits and SHA256 hashing will be created.
   *
   * @generated from field: zitadel.webkey.v2beta.RSA rsa = 1;
   */
  rsa?: RSAJson;

  /**
   * Create a ECDSA key pair and specify the curve.
   * If no curve is provided, a ECDSA key pair with P-256 curve will be created.
   *
   * @generated from field: zitadel.webkey.v2beta.ECDSA ecdsa = 2;
   */
  ecdsa?: ECDSAJson;

  /**
   * Create a ED25519 key pair.
   *
   * @generated from field: zitadel.webkey.v2beta.ED25519 ed25519 = 3;
   */
  ed25519?: ED25519Json;
};

/**
 * Describes the message zitadel.webkey.v2beta.CreateWebKeyRequest.
 * Use `create(CreateWebKeyRequestSchema)` to create a new message.
 */
export declare const CreateWebKeyRequestSchema: GenMessage<CreateWebKeyRequest, {jsonType: CreateWebKeyRequestJson}>;

/**
 * @generated from message zitadel.webkey.v2beta.CreateWebKeyResponse
 */
export declare type CreateWebKeyResponse = Message<"zitadel.webkey.v2beta.CreateWebKeyResponse"> & {
  /**
   * The unique identifier of the newly created key.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * The timestamp of the key creation.
   *
   * @generated from field: google.protobuf.Timestamp creation_date = 2;
   */
  creationDate?: Timestamp;
};

/**
 * @generated from message zitadel.webkey.v2beta.CreateWebKeyResponse
 */
export declare type CreateWebKeyResponseJson = {
  /**
   * The unique identifier of the newly created key.
   *
   * @generated from field: string id = 1;
   */
  id?: string;

  /**
   * The timestamp of the key creation.
   *
   * @generated from field: google.protobuf.Timestamp creation_date = 2;
   */
  creationDate?: TimestampJson;
};

/**
 * Describes the message zitadel.webkey.v2beta.CreateWebKeyResponse.
 * Use `create(CreateWebKeyResponseSchema)` to create a new message.
 */
export declare const CreateWebKeyResponseSchema: GenMessage<CreateWebKeyResponse, {jsonType: CreateWebKeyResponseJson}>;

/**
 * @generated from message zitadel.webkey.v2beta.ActivateWebKeyRequest
 */
export declare type ActivateWebKeyRequest = Message<"zitadel.webkey.v2beta.ActivateWebKeyRequest"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * @generated from message zitadel.webkey.v2beta.ActivateWebKeyRequest
 */
export declare type ActivateWebKeyRequestJson = {
  /**
   * @generated from field: string id = 1;
   */
  id?: string;
};

/**
 * Describes the message zitadel.webkey.v2beta.ActivateWebKeyRequest.
 * Use `create(ActivateWebKeyRequestSchema)` to create a new message.
 */
export declare const ActivateWebKeyRequestSchema: GenMessage<ActivateWebKeyRequest, {jsonType: ActivateWebKeyRequestJson}>;

/**
 * @generated from message zitadel.webkey.v2beta.ActivateWebKeyResponse
 */
export declare type ActivateWebKeyResponse = Message<"zitadel.webkey.v2beta.ActivateWebKeyResponse"> & {
  /**
   * The timestamp of the activation of the key.
   *
   * @generated from field: google.protobuf.Timestamp change_date = 3;
   */
  changeDate?: Timestamp;
};

/**
 * @generated from message zitadel.webkey.v2beta.ActivateWebKeyResponse
 */
export declare type ActivateWebKeyResponseJson = {
  /**
   * The timestamp of the activation of the key.
   *
   * @generated from field: google.protobuf.Timestamp change_date = 3;
   */
  changeDate?: TimestampJson;
};

/**
 * Describes the message zitadel.webkey.v2beta.ActivateWebKeyResponse.
 * Use `create(ActivateWebKeyResponseSchema)` to create a new message.
 */
export declare const ActivateWebKeyResponseSchema: GenMessage<ActivateWebKeyResponse, {jsonType: ActivateWebKeyResponseJson}>;

/**
 * @generated from message zitadel.webkey.v2beta.DeleteWebKeyRequest
 */
export declare type DeleteWebKeyRequest = Message<"zitadel.webkey.v2beta.DeleteWebKeyRequest"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * @generated from message zitadel.webkey.v2beta.DeleteWebKeyRequest
 */
export declare type DeleteWebKeyRequestJson = {
  /**
   * @generated from field: string id = 1;
   */
  id?: string;
};

/**
 * Describes the message zitadel.webkey.v2beta.DeleteWebKeyRequest.
 * Use `create(DeleteWebKeyRequestSchema)` to create a new message.
 */
export declare const DeleteWebKeyRequestSchema: GenMessage<DeleteWebKeyRequest, {jsonType: DeleteWebKeyRequestJson}>;

/**
 * @generated from message zitadel.webkey.v2beta.DeleteWebKeyResponse
 */
export declare type DeleteWebKeyResponse = Message<"zitadel.webkey.v2beta.DeleteWebKeyResponse"> & {
  /**
   * The timestamp of the deletion of the key.
   * Note that the deletion date is only guaranteed to be set if the deletion was successful during the request.
   * In case the deletion occurred in a previous request, the deletion date might be empty.
   *
   * @generated from field: google.protobuf.Timestamp deletion_date = 3;
   */
  deletionDate?: Timestamp;
};

/**
 * @generated from message zitadel.webkey.v2beta.DeleteWebKeyResponse
 */
export declare type DeleteWebKeyResponseJson = {
  /**
   * The timestamp of the deletion of the key.
   * Note that the deletion date is only guaranteed to be set if the deletion was successful during the request.
   * In case the deletion occurred in a previous request, the deletion date might be empty.
   *
   * @generated from field: google.protobuf.Timestamp deletion_date = 3;
   */
  deletionDate?: TimestampJson;
};

/**
 * Describes the message zitadel.webkey.v2beta.DeleteWebKeyResponse.
 * Use `create(DeleteWebKeyResponseSchema)` to create a new message.
 */
export declare const DeleteWebKeyResponseSchema: GenMessage<DeleteWebKeyResponse, {jsonType: DeleteWebKeyResponseJson}>;

/**
 * @generated from message zitadel.webkey.v2beta.ListWebKeysRequest
 */
export declare type ListWebKeysRequest = Message<"zitadel.webkey.v2beta.ListWebKeysRequest"> & {
};

/**
 * @generated from message zitadel.webkey.v2beta.ListWebKeysRequest
 */
export declare type ListWebKeysRequestJson = {
};

/**
 * Describes the message zitadel.webkey.v2beta.ListWebKeysRequest.
 * Use `create(ListWebKeysRequestSchema)` to create a new message.
 */
export declare const ListWebKeysRequestSchema: GenMessage<ListWebKeysRequest, {jsonType: ListWebKeysRequestJson}>;

/**
 * @generated from message zitadel.webkey.v2beta.ListWebKeysResponse
 */
export declare type ListWebKeysResponse = Message<"zitadel.webkey.v2beta.ListWebKeysResponse"> & {
  /**
   * @generated from field: repeated zitadel.webkey.v2beta.WebKey web_keys = 1;
   */
  webKeys: WebKey[];
};

/**
 * @generated from message zitadel.webkey.v2beta.ListWebKeysResponse
 */
export declare type ListWebKeysResponseJson = {
  /**
   * @generated from field: repeated zitadel.webkey.v2beta.WebKey web_keys = 1;
   */
  webKeys?: WebKeyJson[];
};

/**
 * Describes the message zitadel.webkey.v2beta.ListWebKeysResponse.
 * Use `create(ListWebKeysResponseSchema)` to create a new message.
 */
export declare const ListWebKeysResponseSchema: GenMessage<ListWebKeysResponse, {jsonType: ListWebKeysResponseJson}>;

/**
 * Service to manage web keys for OIDC token signing and validation.
 * The service provides methods to create, activate, delete and list web keys.
 * The public key endpoint (outside of this service) is used to retrieve the public keys of the active and inactive keys.
 *
 * Please make sure to enable the `web_key` feature flag on your instance to use this service.
 *
 * @generated from service zitadel.webkey.v2beta.WebKeyService
 */
export declare const WebKeyService: GenService<{
  /**
   * Create Web Key
   *
   * Generate a private and public key pair. The private key can be used to sign OIDC tokens after activation.
   * The public key can be used to validate OIDC tokens.
   * The newly created key will have the state `STATE_INITIAL` and is published to the public key endpoint.
   * Note that the JWKs OIDC endpoint returns a cacheable response.
   *
   * If no key type is provided, a RSA key pair with 2048 bits and SHA256 hashing will be created.
   *
   * Required permission:
   *   - `iam.web_key.write`
   *
   * Required feature flag:
   *   - `web_key`
   *
   * @generated from rpc zitadel.webkey.v2beta.WebKeyService.CreateWebKey
   */
  createWebKey: {
    methodKind: "unary";
    input: typeof CreateWebKeyRequestSchema;
    output: typeof CreateWebKeyResponseSchema;
  },
  /**
   * Activate Web Key
   *
   * Switch the active signing web key. The previously active key will be deactivated.
   * Note that the JWKs OIDC endpoint returns a cacheable response.
   * Therefore it is not advised to activate a key that has been created within the cache duration (default is 5min),
   * as the public key may not have been propagated to caches and clients yet.
   *
   * Required permission:
   *   - `iam.web_key.write`
   *
   * Required feature flag:
   *   - `web_key`
   *
   * @generated from rpc zitadel.webkey.v2beta.WebKeyService.ActivateWebKey
   */
  activateWebKey: {
    methodKind: "unary";
    input: typeof ActivateWebKeyRequestSchema;
    output: typeof ActivateWebKeyResponseSchema;
  },
  /**
   * Delete Web Key
   *
   * Delete a web key pair. Only inactive keys can be deleted. Once a key is deleted,
   * any tokens signed by this key will be invalid.
   * Note that the JWKs OIDC endpoint returns a cacheable response.
   * In case the web key is not found, the request will return a successful response as
   * the desired state is already achieved.
   * You can check the change date in the response to verify if the web key was deleted during the request.
   *
   * Required permission:
   *   - `iam.web_key.delete`
   *
   * Required feature flag:
   *   - `web_key`
   *
   * @generated from rpc zitadel.webkey.v2beta.WebKeyService.DeleteWebKey
   */
  deleteWebKey: {
    methodKind: "unary";
    input: typeof DeleteWebKeyRequestSchema;
    output: typeof DeleteWebKeyResponseSchema;
  },
  /**
   * List Web Keys
   *
   * List all web keys and their states.
   *
   * Required permission:
   *   - `iam.web_key.read`
   *
   * Required feature flag:
   *   - `web_key`
   *
   * @generated from rpc zitadel.webkey.v2beta.WebKeyService.ListWebKeys
   */
  listWebKeys: {
    methodKind: "unary";
    input: typeof ListWebKeysRequestSchema;
    output: typeof ListWebKeysResponseSchema;
  },
}>;

